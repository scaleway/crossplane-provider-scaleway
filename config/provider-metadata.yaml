name: scaleway/scaleway
resources:
    scaleway_account_project:
        subCategory: Account
        name: scaleway_account_project
        title: scaleway_account_project
        examples:
            - name: project
              manifest: |-
                {
                  "name": "project"
                }
            - name: project
              manifest: |-
                {
                  "name": "my_project",
                  "provider": "${scaleway.tmp}"
                }
              references:
                provider: scaleway.tmp
              dependencies:
                scaleway_instance_server.server: |-
                    {
                      "image": "ubuntu_jammy",
                      "type": "PRO2-XXS"
                    }
        argumentDocs:
            created_at: '- The creation time of the Project.'
            description: '- (Optional) The description of the Project.'
            id: '- The unique identifier of the project (UUID format).'
            name: '- (Optional) The name of the Project.'
            organization_id: '- (Optional. Defaults to provider organization_id)The organization ID the Project is associated with. Any change made to the organization_id will recreate the resource.'
            updated_at: '- The last update time of the Project.'
        importStatements: []
    scaleway_account_ssh_key:
        subCategory: Account
        name: scaleway_account_ssh_key
        title: scaleway_account_ssh_key
        examples:
            - name: main
              manifest: |-
                {
                  "name": "main",
                  "public_key": "\u003cYOUR-PUBLIC-SSH-KEY\u003e"
                }
        argumentDocs:
            id: '- The ID of the SSH key (UUID format).'
            name: '- (Required) The name of the SSH key.'
            organization_id: '- The organization ID the SSH key is associated with.'
            project_id: '- (Defaults to provider project_id) The ID of the project the SSH key is associated with.'
            public_key: '- (Required) The public SSH key to be added.'
        importStatements: []
    scaleway_apple_silicon_server:
        subCategory: Apple Silicon
        name: scaleway_apple_silicon_server
        title: scaleway_apple_silicon
        examples:
            - name: server
              manifest: |-
                {
                  "name": "test-m1",
                  "type": "M1-M"
                }
        argumentDocs:
            created_at: '- The date and time of the creation of the Apple Silicon server.'
            deleted_at: '- The minimal date and time on which you can delete this server due to Apple licence.'
            id: '- The ID of the server.'
            ip: '- IPv4 address of the server (IPv4 address).'
            name: '- (Optional) The name of the server.'
            organization_id: '- The organization ID the server is associated with.'
            project_id: |-
                - (Defaults to provider project_id) The ID of the project the server is
                associated with.
            state: '- The state of the server.'
            type: |-
                - (Required) The commercial type of the server. You find all the available types on
                the pricing page. Updates to this field will recreate a new
                resource.
            updated_at: '- The date and time of the last update of the Apple Silicon server.'
            vnc_url: '- URL of the VNC.'
            zone: |-
                - (Defaults to provider zone) The zone in which
                the server should be created.
        importStatements: []
    scaleway_baremetal_server:
        subCategory: Elastic Metal
        name: scaleway_baremetal_server
        title: scaleway_baremetal_server
        examples:
            - name: base
              manifest: |-
                {
                  "offer": "GP-BM1-S",
                  "os": "d17d6872-0412-45d9-a198-af82c34d3c5c",
                  "ssh_key_ids": [
                    "${data.scaleway_account_ssh_key.main.id}"
                  ],
                  "zone": "fr-par-2"
                }
            - name: base
              manifest: |-
                {
                  "offer": "${data.scaleway_baremetal_offer.my_offer.offer_id}",
                  "options": [
                    {
                      "id": "${data.scaleway_baremetal_option.private_network.option_id}"
                    },
                    {
                      "id": "${data.scaleway_baremetal_option.remote_access.option_id}"
                    }
                  ],
                  "os": "${data.scaleway_baremetal_os.my_os.os_id}",
                  "ssh_key_ids": [
                    "${data.scaleway_account_ssh_key.main.id}"
                  ],
                  "zone": "fr-par-2"
                }
              references:
                offer: data.scaleway_baremetal_offer.my_offer.offer_id
                options.id: data.scaleway_baremetal_option.remote_access.option_id
                os: data.scaleway_baremetal_os.my_os.os_id
            - name: base
              manifest: |-
                {
                  "offer": "${data.scaleway_baremetal_offer.my_offer.offer_id}",
                  "options": [
                    {
                      "id": "${data.scaleway_baremetal_option.private_network.option_id}"
                    }
                  ],
                  "os": "${data.scaleway_baremetal_os.my_os.os_id}",
                  "private_network": [
                    {
                      "id": "${scaleway_vpc_private_network.pn.id}"
                    }
                  ],
                  "ssh_key_ids": [
                    "${data.scaleway_account_ssh_key.main.id}"
                  ],
                  "zone": "fr-par-2"
                }
              references:
                offer: data.scaleway_baremetal_offer.my_offer.offer_id
                options.id: data.scaleway_baremetal_option.private_network.option_id
                os: data.scaleway_baremetal_os.my_os.os_id
                private_network.id: scaleway_vpc_private_network.pn.id
              dependencies:
                scaleway_vpc_private_network.pn: |-
                    {
                      "name": "baremetal_private_network",
                      "region": "fr-par"
                    }
            - name: base
              manifest: |-
                {
                  "install_config_afterward": true,
                  "offer": "${data.scaleway_baremetal_offer.my_offer.offer_id}",
                  "zone": "fr-par-2"
                }
              references:
                offer: data.scaleway_baremetal_offer.my_offer.offer_id
        argumentDocs:
            address: '- The address of the IP.'
            created_at: '- The date and time of the creation of the private network.'
            description: '- (Optional) A description for the server.'
            domain: '- The domain of the server.'
            expires_at: '- (Optional) The auto expiration date for compatible options'
            hostname: '- (Optional) The hostname of the server.'
            id: '- (Required) The id of the option to enable. Use this endpoint to find the available options IDs.'
            install_config_afterward: '- (Optional) If True, this boolean allows to create a server without the install config if you want to provide it later.'
            ips: '- (List of) The IPs of the server.'
            ipv4: '- (List of) The IPv4 addresses of the server.'
            ipv6: '- (List of) The IPv6 addresses of the server.'
            name: '- (Optional) The name of the server.'
            offer: |-
                - (Required) The offer name or UUID of the baremetal server.
                Use this endpoint to find the right offer.
            offer_id: '- The ID of the offer.'
            offer_name: '- The name of the offer.'
            options: |-
                - (Optional) The options to enable on the server.
                ~> The options block supports:
            organization_id: '- The organization ID the server is associated with.'
            os: |-
                - (Required) The UUID of the os to install on the server.
                Use this endpoint to find the right OS ID.
                ~> Important: Updates to os will reinstall the server.
            os_name: '- The name of the os.'
            password: '- (Optional) Password used for the installation. May be required depending on used os.'
            private_network: '- (Required) The private networks to attach to the server. For more information, see the documentation'
            project_id: '- (Defaults to provider project_id) The ID of the project the server is associated with.'
            reinstall_on_config_changes: |-
                - (Optional) If True, this boolean allows to reinstall the server on install config changes.
                ~> Important: Updates to ssh_key_ids, user, password, service_user or service_password will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
            reverse: '- The reverse of the IP.'
            service_password: '- (Optional) Password used for the service to install. May be required depending on used os.'
            service_user: '- (Optional) User used for the service to install.'
            ssh_key_ids: '- (Required) List of SSH keys allowed to connect to the server.'
            status: '- The private network status.'
            tags: '- (Optional) The tags associated with the server.'
            updated_at: '- The date and time of the last update of the private network.'
            user: '- (Optional) User used for the installation.'
            version: '- The type of the IP.'
            vlan: '- The VLAN ID associated to the private network.'
            zone: '- (Defaults to provider zone) The zone in which the server should be created.'
        importStatements: []
    scaleway_block_snapshot:
        subCategory: Block
        name: scaleway_block_snapshot
        title: scaleway_block_snapshot
        examples:
            - name: block_snapshot
              manifest: |-
                {
                  "name": "some-snapshot-name",
                  "volume_id": "${scaleway_block_volume.block_volume.id}"
                }
              references:
                volume_id: scaleway_block_volume.block_volume.id
              dependencies:
                scaleway_block_volume.block_volume: |-
                    {
                      "iops": 5000,
                      "name": "some-volume-name",
                      "size_in_gb": 20
                    }
        argumentDocs:
            id: '- The ID of the snapshot.'
            name: '- (Optional) The name of the snapshot. If not provided, a name will be randomly generated.'
            project_id: '- (Defaults to the Project ID specified in the provider configuration). The ID of the Scaleway Project the snapshot is associated with.'
            tags: '- (Optional) A list of tags to apply to the snapshot.'
            volume_id: '- (Optional) The ID of the volume to take a snapshot from.'
            zone: '- (Defaults to the zone specified in the provider configuration). The zone in which the snapshot should be created.'
        importStatements: []
    scaleway_block_volume:
        subCategory: Block
        name: scaleway_block_volume
        title: scaleway_block_volume
        examples:
            - name: block_volume
              manifest: |-
                {
                  "iops": 5000,
                  "name": "some-volume-name",
                  "size_in_gb": 20
                }
            - name: base
              manifest: |-
                {
                  "iops": 5000,
                  "name": "block-volume-base",
                  "size_in_gb": 20
                }
              dependencies:
                scaleway_block_snapshot.main: |-
                    {
                      "name": "block-volume-from-snapshot",
                      "volume_id": "${scaleway_block_volume.base.id}"
                    }
            - name: main
              manifest: |-
                {
                  "iops": 5000,
                  "name": "block-volume-from-snapshot",
                  "snapshot_id": "${scaleway_block_snapshot.main.id}"
                }
              references:
                snapshot_id: scaleway_block_snapshot.main.id
              dependencies:
                scaleway_block_snapshot.main: |-
                    {
                      "name": "block-volume-from-snapshot",
                      "volume_id": "${scaleway_block_volume.base.id}"
                    }
        argumentDocs:
            '{zone}/{id}.organization_id': '- The Organization ID the volume is associated with.'
            id: '- The ID of the volume.'
            iops: '- (Required) The maximum IOPs expected, must match available options.'
            name: '- (Optional) The name of the volume. If not provided, a name will be randomly generated.'
            project_id: '- (Defaults to the Project ID specified in the provider configurqtion). The ID of the Project the volume is associated with.'
            size_in_gb: '- (Optional) The size of the volume in gigabytes. Only one of size_in_gb, and snapshot_id should be specified.'
            snapshot_id: '- (Optional) If set, the new volume will be created from this snapshot. Only one of size_in_gb, snapshot_id should be specified.'
            tags: '- (Optional) A list of tags to apply to the volume.'
            zone: '- (Defaults to the zone specified in the provider configuration). The zone in which the volume should be created.'
        importStatements: []
    scaleway_cockpit:
        subCategory: Cockpit
        name: scaleway_cockpit
        title: scaleway_cockpit
        examples:
            - name: main
              manifest: '{}'
            - name: main
              manifest: |-
                {
                  "project_id": "11111111-1111-1111-1111-111111111111"
                }
            - name: main
              manifest: |-
                {
                  "plan": "premium",
                  "project_id": "11111111-1111-1111-1111-111111111111"
                }
            - name: main
              manifest: '{}'
              dependencies:
                grafana_folder.test_folder: |-
                    {
                      "title": "Test Folder"
                    }
                scaleway_cockpit_grafana_user.main: |-
                    {
                      "login": "example",
                      "project_id": "${scaleway_cockpit.main.project_id}",
                      "role": "editor"
                    }
        argumentDocs:
            alertmanager_url: '- (Deprecated) URL for the Alert manager.'
            endpoints: '- (Deprecated) A list of endpoints related to Cockpit, each with specific URLs:'
            grafana_url: '- (Deprecated) URL for Grafana.'
            logs_url: '- (Deprecated) URL for logs to retrieve in the Data sources tab of the Scaleway console.'
            metrics_url: '- (Deprecated) URL for metrics to retrieve in the Data sources tab of the Scaleway console.'
            plan: '- (Optional) Name of the plan to use. Available plans are: free, premium, and custom.'
            plan_id: '- (Deprecated) The ID of the current pricing plan.'
            project_id: '- (Defaults to the Project specified in the provider''s configuration) The ID of the Project the Cockpit is associated with.'
            traces_url: '- (Deprecated) URL for traces to retrieve in the Data sources tab of the Scaleway console.'
        importStatements: []
    scaleway_cockpit_alert_manager:
        subCategory: Cockpit
        name: scaleway_cockpit_alert_manager
        title: scaleway_cockpit_alert_manager
        examples:
            - name: alert_manager
              manifest: |-
                {
                  "contact_points": [
                    {
                      "email": "alert1@example.com"
                    },
                    {
                      "email": "alert2@example.com"
                    }
                  ],
                  "enable_managed_alerts": true,
                  "project_id": "${scaleway_account_project.project.id}"
                }
              references:
                project_id: scaleway_account_project.project.id
              dependencies:
                scaleway_account_project.project: |-
                    {
                      "name": "tf_test_project"
                    }
        argumentDocs:
            alert_manager_url: '- The URL of the alert manager.'
            contact_points: '- (Optional, List of Map) A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.'
            enable_managed_alerts: '- (Optional, Boolean) Specifies whether the alert manager should be enabled. Defaults to true.'
            project_id: '- (Defaults to the Project ID specified in the provider configuration) The ID of the Project the Cockpit is associated with.'
            region: '- (Defaults to the region specified in the provider configuration) The region where the alert manager should be enabled.'
        importStatements: []
    scaleway_cockpit_grafana_user:
        subCategory: Cockpit
        name: scaleway_cockpit_grafana_user
        title: scaleway_cockpit_grafana_user
        examples:
            - name: main
              manifest: |-
                {
                  "login": "my-awesome-user",
                  "project_id": "${scaleway_account_project.project.id}",
                  "role": "editor"
                }
              references:
                project_id: scaleway_account_project.project.id
              dependencies:
                scaleway_account_project.project: |-
                    {
                      "name": "test project grafana user"
                    }
        argumentDocs:
            login: '- (Required) The username of the Grafana user. The admin user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.'
            password: '- The password of the Grafana user.'
            project_id: '- (Defaults to Project ID speficied in the provider configuration) The ID of the Project the Cockpit is associated with.'
            role: '- (Required) The role assigned to the Grafana user. Must be editor or viewer.'
        importStatements: []
    scaleway_cockpit_source:
        subCategory: Cockpit
        name: scaleway_cockpit_source
        title: scaleway_cockpit_source
        examples:
            - name: main
              manifest: |-
                {
                  "name": "my-data-source",
                  "project_id": "${scaleway_account_project.project.id}",
                  "type": "metrics"
                }
              references:
                project_id: scaleway_account_project.project.id
              dependencies:
                scaleway_account_project.project: |-
                    {
                      "name": "test project data source"
                    }
        argumentDocs:
            created_at: '- The date and time the data source was created (in RFC 3339 format).'
            id: '- The ID of the data source.'
            name: '- (Required) The name of the data source.'
            origin: '- The origin of the Cockpit data source.'
            project_id: '- (Defaults to the Project ID specified in the provider configuration) The ID of the Project the data source is associated with.'
            push_url: '- The URL endpoint used for pushing data to the Cockpit data source.'
            region: '- (Defaults to the region specified in the provider configuration) The region where the data source is located.'
            synchronized_with_grafana: '- Indicates whether the data source is synchronized with Grafana.'
            type: '- (Required) The type of data source. Possible values are: metrics, logs, or traces.'
            updated_at: '- The date and time the data source was last updated (in RFC 3339 format).'
            url: '- The URL of the Cockpit data source.'
        importStatements: []
    scaleway_cockpit_token:
        subCategory: Cockpit
        name: scaleway_cockpit_token
        title: scaleway_cockpit_token
        examples:
            - name: main
              manifest: |-
                {
                  "name": "my-awesome-token",
                  "project_id": "${scaleway_account_project.project.id}"
                }
              references:
                project_id: scaleway_account_project.project.id
              dependencies:
                scaleway_account_project.project: |-
                    {
                      "name": "my-project"
                    }
            - name: main
              manifest: |-
                {
                  "name": "my-awesome-token",
                  "project_id": "${scaleway_account_project.project.id}",
                  "scopes": [
                    {
                      "query_logs": true,
                      "query_metrics": true,
                      "write_logs": false,
                      "write_metrics": false
                    }
                  ]
                }
              references:
                project_id: scaleway_account_project.project.id
              dependencies:
                scaleway_account_project.project: |-
                    {
                      "name": "my-project"
                    }
        argumentDocs:
            id: '- The ID of the Cockpit token.'
            my-awesome-token: inside the Project
            name: '- (Required) The name of the token.'
            project_id: '- (Defaults to the Project ID specified in the provider configuration) The ID of the Project the Cockpit is associated with.'
            query_logs: '- (Defaults to false) Permission to query logs.'
            query_metrics: '- (Defaults to false) Permission to query metrics.'
            query_traces: '- (Defaults to false) Permission to query traces.'
            read: permissions to the token for metrics and logs
            region: '- (Defaults to the region specified in the provider configuration) The region where the Cockpit token is located.'
            scopes: '- (Optional) Scopes allowed, each with default values:'
            secret_key: '- The secret key of the token.'
            setup_alerts: '- (Defaults to false) Permission to set up alerts.'
            setup_logs_rules: '- (Defaults to false) Permission to set up logs rules.'
            setup_metrics_rules: '- (Defaults to false) Permission to set up metrics rules.'
            write: permissions for metrics and logs
            write_logs: '- (Defaults to true) Permission to write logs.'
            write_metrics: '- (Defaults to true) Permission to write metrics.'
            write_traces: '- (Defaults to false) Permission to write traces.'
        importStatements: []
    scaleway_container:
        subCategory: Containers
        name: scaleway_container
        title: scaleway_container
        examples:
            - name: main
              manifest: |-
                {
                  "cpu_limit": 140,
                  "deploy": true,
                  "description": "environment variables test",
                  "environment_variables": {
                    "foo": "var"
                  },
                  "max_concurrency": 80,
                  "max_scale": 5,
                  "memory_limit": 256,
                  "min_scale": 3,
                  "name": "my-container-02",
                  "namespace_id": "${scaleway_container_namespace.main.id}",
                  "port": 9997,
                  "privacy": "private",
                  "protocol": "http1",
                  "registry_image": "${scaleway_container_namespace.main.registry_endpoint}/alpine:test",
                  "secret_environment_variables": {
                    "key": "secret"
                  },
                  "timeout": 600
                }
              references:
                namespace_id: scaleway_container_namespace.main.id
              dependencies:
                scaleway_container_namespace.main: |-
                    {
                      "description": "test container",
                      "name": "my-ns-test"
                    }
        argumentDocs:
            cpu_limit: '- (Optional) The amount of vCPU computing resources to allocate to each container.'
            cron_status: '- The cron status of the container.'
            deploy: '- (Optional) Boolean indicating whether the container is in a production environment.'
            description: (Optional) The description of the container.
            domain_name: '- The native domain name of the container'
            environment_variables: '- (Optional) The environment variables of the container.'
            error_message: '- The error message of the container.'
            h2c: ': HTTP/2 over TCP.'
            http_option: '- (Optional) Allows both HTTP and HTTPS (enabled) or redirect HTTP to HTTPS (redirected). Defaults to enabled.'
            http1: ': Hypertext Transfer Protocol.'
            id: '- The unique identifier of the container.'
            max_concurrency: '- (Optional) The maximum number of simultaneous requests your container can handle at the same time.'
            max_scale: '- (Optional) The maximum number of instances this container can scale to.'
            memory_limit: '- (Optional) The memory resources in MB to allocate to each container.'
            min_scale: '- (Optional) The minimum number of container instances running continuously.'
            name: '- (Required) The unique name of the container name.'
            namespace_id: '- (Required) The Containers namespace ID of the container.'
            port: '- (Optional) The port to expose the container.'
            privacy: '- (Optional) The privacy type defines the way to authenticate to your container. Please check our dedicated section.'
            protocol: '- (Optional) The communication protocol http1 or h2c. Defaults to http1.'
            region: '- (Defaults to provider region) The region in which the container was created.'
            registry_image: '- (Optional) The registry image address (e.g., rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE)'
            registry_sha256: '- (Optional) The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.'
            sandbox: '- (Optional) Execution environment of the container.'
            secret_environment_variables: '- (Optional) The secret environment variables of the container.'
            status: '- The container status.'
            timeout: '- (Optional) The maximum amount of time your container can spend processing a request before being stopped.'
        importStatements: []
    scaleway_container_cron:
        subCategory: Containers
        name: scaleway_container_cron
        title: scaleway_container_cron
        examples:
            - name: main
              manifest: |-
                {
                  "args": "${jsonencode(\n    {\n        address   = {\n            city    = \"Paris\"\n            country = \"FR\"\n        }\n        age       = 23\n        firstName = \"John\"\n        isAlive   = true\n        lastName  = \"Smith\"\n        # minScale: 1\n        # memoryLimit: 256\n        # maxScale: 2\n        # timeout: 20000\n        # Local environment variables - used only in given function\n    }\n    )}",
                  "container_id": "${scaleway_container.main.id}",
                  "name": "my-cron-name",
                  "schedule": "5 4 1 * *"
                }
              references:
                container_id: scaleway_container.main.id
              dependencies:
                scaleway_container.main: |-
                    {
                      "name": "my-container-with-cron-tf",
                      "namespace_id": "${scaleway_container_namespace.main.id}"
                    }
                scaleway_container_namespace.main: '{}'
        argumentDocs:
            args: '- (Required) The key-value mapping to define arguments that will be passed to your container’s event object'
            container_id: '- (Required) The unique identifier of the container to link to your CRON trigger.'
            id: '- The unique identifier of the container''s CRON trigger.'
            name: '- (Optional) The name of the container CRON trigger. If not provided, a random name is generated.'
            region: |-
                - (Defaults to provider region) The region
                in which the CRON trigger is created.
            schedule: '- (Required) CRON format string (refer to the CRON schedule reference for more information).'
            status: '- The CRON status.'
        importStatements: []
    scaleway_container_domain:
        subCategory: Containers
        name: scaleway_container_domain
        title: scaleway_container_domain
        examples:
            - name: app
              manifest: |-
                {
                  "container_id": "${scaleway_container.app.id}",
                  "hostname": "container.domain.tld"
                }
              references:
                container_id: scaleway_container.app.id
              dependencies:
                scaleway_container.app: '{}'
            - name: app
              manifest: |-
                {
                  "container_id": "${scaleway_container.app.id}",
                  "hostname": "${scaleway_domain_record.app.name}.${scaleway_domain_record.app.dns_zone}"
                }
              references:
                container_id: scaleway_container.app.id
              dependencies:
                scaleway_container.app: |-
                    {
                      "cpu_limit": 140,
                      "deploy": true,
                      "max_concurrency": 80,
                      "max_scale": 1,
                      "memory_limit": 256,
                      "min_scale": 1,
                      "name": "app",
                      "namespace_id": "${scaleway_container_namespace.main.id}",
                      "port": 80,
                      "privacy": "public",
                      "protocol": "http1",
                      "registry_image": "${scaleway_container_namespace.main.registry_endpoint}/nginx:alpine",
                      "timeout": 600
                    }
                scaleway_container_namespace.main: |-
                    {
                      "description": "test container",
                      "name": "my-ns-test"
                    }
                scaleway_domain_record.app: |-
                    {
                      "data": "${scaleway_container.app.domain_name}.",
                      "dns_zone": "domain.tld",
                      "name": "subdomain",
                      "ttl": 3600,
                      "type": "CNAME"
                    }
        argumentDocs:
            container_id: '- (Required) The unique identifier of the container.'
            hostname: '- (Required) The hostname with a CNAME record.'
            id: '- The unique identifier of the container domain.'
            region: '- (Defaults to provider region) The region in which the container exists.'
            url: '- The URL used to query the container.'
        importStatements: []
    scaleway_container_namespace:
        subCategory: Containers
        name: scaleway_container_namespace
        title: scaleway_container_namespace
        examples:
            - name: main
              manifest: |-
                {
                  "description": "Main container namespace",
                  "name": "main-container-namespace"
                }
        argumentDocs:
            description: (Optional) The description of the namespace.
            environment_variables: '- The environment variables of the namespace.'
            id: '- The unique identifier of the namespace.'
            name: '- (Required) The unique name of the Containers namespace.'
            organization_id: '- The Organization ID with which the namespace is associated.'
            project_id: '- (Defaults to provider project_id) The unique identifier of the project that contains the namespace.'
            region: '- (Defaults to provider region). The region in which the namespace is created.'
            registry_endpoint: '- The registry endpoint of the namespace.'
            registry_namespace_id: '- The registry namespace ID of the namespace.'
            secret_environment_variables: '- The secret environment variables of the namespace.'
        importStatements: []
    scaleway_container_token:
        subCategory: Containers
        name: scaleway_container_token
        title: scaleway_container_token
        examples:
            - name: namespace
              manifest: |-
                {
                  "expires_at": "2022-10-18T11:35:15+02:00",
                  "namespace_id": "${scaleway_container_namespace.main.id}"
                }
              references:
                namespace_id: scaleway_container_namespace.main.id
              dependencies:
                scaleway_container.main: |-
                    {
                      "namespace_id": "${scaleway_container_namespace.main.id}"
                    }
                scaleway_container_namespace.main: |-
                    {
                      "name": "test-container-token-ns"
                    }
            - name: container
              manifest: |-
                {
                  "container_id": "${scaleway_container.main.id}"
                }
              references:
                container_id: scaleway_container.main.id
              dependencies:
                scaleway_container.main: |-
                    {
                      "namespace_id": "${scaleway_container_namespace.main.id}"
                    }
                scaleway_container_namespace.main: |-
                    {
                      "name": "test-container-token-ns"
                    }
        argumentDocs:
            container_id: '- (Required) The unique identifier of the container.'
            description: (Optional) The description of the token.
            expires_at: (Optional) The expiration date of the token.
            id: '- The unique identifier of the token.'
            namespace_id: '- (Required) The unique identifier of the Containers namespace.'
            region: '- (Defaults to provider region). The region in which the namespace is created.'
            token: '- The token.'
        importStatements: []
    scaleway_container_trigger:
        subCategory: Containers
        name: scaleway_container_trigger
        title: scaleway_container_trigger
        examples:
            - name: main
              manifest: |-
                {
                  "container_id": "${scaleway_container.main.id}",
                  "name": "my-trigger",
                  "sqs": [
                    {
                      "project_id": "${scaleway_mnq_sqs.main.project_id}",
                      "queue": "MyQueue",
                      "region": "${scaleway_mnq_sqs.main.region}"
                    }
                  ]
                }
              references:
                container_id: scaleway_container.main.id
                sqs.project_id: scaleway_mnq_sqs.main.project_id
                sqs.region: scaleway_mnq_sqs.main.region
            - name: main
              manifest: |-
                {
                  "container_id": "${scaleway_container.main.id}",
                  "name": "my-trigger",
                  "nats": [
                    {
                      "account_id": "${scaleway_mnq_nats_account.main.id}",
                      "region": "${scaleway_mnq_nats_account.main.region}",
                      "subject": "MySubject"
                    }
                  ]
                }
              references:
                container_id: scaleway_container.main.id
                nats.account_id: scaleway_mnq_nats_account.main.id
                nats.region: scaleway_mnq_nats_account.main.region
        argumentDocs:
            account_id: (Required) unique identifier of the Messaging and Queuing NATS account.
            container_id: (Required) The unique identifier of the container to create a trigger for.
            description: (Optional) The description of the trigger.
            id: '- The unique identifier of the Container trigger'
            name: '- (Optional) The unique name of the trigger. If not provided, a random name is generated.'
            namespace_id: (Deprecated) ID of the Messaging and Queuing namespace. This argument is deprecated.
            nats: The configuration for the Scaleway NATS account used by the trigger
            project_id: (Optional) The ID of the project in which SQS is enabled, (defaults to provider project_id)
            queue: (Required) The name of the SQS queue.
            region: (Optional) Region where SQS is enabled (defaults to provider region)
            sqs: The configuration of the Scaleway SQS queue used by the trigger
            subject: (Required) The subject to listen to.
        importStatements: []
    scaleway_domain_record:
        subCategory: Domains and DNS
        name: scaleway_domain_record
        title: scaleway_domain_record
        examples:
            - name: www
              manifest: |-
                {
                  "data": "1.2.3.4",
                  "dns_zone": "domain.tld",
                  "name": "www",
                  "ttl": 3600,
                  "type": "A"
                }
            - name: www2
              manifest: |-
                {
                  "data": "1.2.3.5",
                  "dns_zone": "domain.tld",
                  "name": "www",
                  "ttl": 3600,
                  "type": "A"
                }
            - name: mx
              manifest: |-
                {
                  "data": "mx.online.net.",
                  "dns_zone": "domain.tld",
                  "name": "",
                  "priority": 10,
                  "ttl": 3600,
                  "type": "MX"
                }
            - name: mx2
              manifest: |-
                {
                  "data": "mx-cache.online.net.",
                  "dns_zone": "domain.tld",
                  "name": "",
                  "priority": 20,
                  "ttl": 3600,
                  "type": "MX"
                }
            - name: geo_ip
              manifest: |-
                {
                  "data": "1.2.3.4",
                  "dns_zone": "domain.tld",
                  "geo_ip": [
                    {
                      "matches": [
                        {
                          "continents": [
                            "EU"
                          ],
                          "countries": [
                            "FR"
                          ],
                          "data": "1.2.3.5"
                        },
                        {
                          "continents": [
                            "NA"
                          ],
                          "data": "4.3.2.1"
                        }
                      ]
                    }
                  ],
                  "name": "images",
                  "ttl": 3600,
                  "type": "A"
                }
            - name: http_service
              manifest: |-
                {
                  "data": "1.2.3.4",
                  "dns_zone": "domain.tld",
                  "http_service": [
                    {
                      "ips": [
                        "1.2.3.5",
                        "1.2.3.6"
                      ],
                      "must_contain": "up",
                      "strategy": "hashed",
                      "url": "http://mywebsite.com/health",
                      "user_agent": "scw_service_up"
                    }
                  ],
                  "name": "app",
                  "ttl": 3600,
                  "type": "A"
                }
            - name: view
              manifest: |-
                {
                  "data": "1.2.3.4",
                  "dns_zone": "domain.tld",
                  "name": "db",
                  "ttl": 3600,
                  "type": "A",
                  "view": [
                    {
                      "data": "1.2.3.5",
                      "subnet": "100.0.0.0/16"
                    },
                    {
                      "data": "1.2.3.6",
                      "subnet": "100.1.0.0/16"
                    }
                  ]
                }
            - name: weighted
              manifest: |-
                {
                  "data": "1.2.3.4",
                  "dns_zone": "domain.tld",
                  "name": "web",
                  "ttl": 3600,
                  "type": "A",
                  "weighted": [
                    {
                      "ip": "1.2.3.5",
                      "weight": 1
                    },
                    {
                      "ip": "1.2.3.6",
                      "weight": 2
                    }
                  ]
                }
            - name: web_A
              manifest: |-
                {
                  "data": "${scaleway_instance_server.web.public_ip}",
                  "dns_zone": "${var.dns_zone}",
                  "name": "web",
                  "ttl": 3600,
                  "type": "A"
                }
              references:
                data: scaleway_instance_server.web.public_ip
                dns_zone: var.dns_zone
              dependencies:
                scaleway_instance_ip.public_ip: |-
                    {
                      "project_id": "${var.project_id}"
                    }
                scaleway_instance_server.web: |-
                    {
                      "image": "ubuntu_jammy",
                      "ip_id": "${scaleway_instance_ip.public_ip.id}",
                      "project_id": "${var.project_id}",
                      "root_volume": [
                        {
                          "size_in_gb": 20
                        }
                      ],
                      "tags": [
                        "front",
                        "web"
                      ],
                      "type": "DEV1-S"
                    }
            - name: web_cname
              manifest: |-
                {
                  "data": "web.${var.dns_zone}.",
                  "dns_zone": "${var.dns_zone}",
                  "name": "www",
                  "ttl": 3600,
                  "type": "CNAME"
                }
              references:
                dns_zone: var.dns_zone
              dependencies:
                scaleway_instance_ip.public_ip: |-
                    {
                      "project_id": "${var.project_id}"
                    }
                scaleway_instance_server.web: |-
                    {
                      "image": "ubuntu_jammy",
                      "ip_id": "${scaleway_instance_ip.public_ip.id}",
                      "project_id": "${var.project_id}",
                      "root_volume": [
                        {
                          "size_in_gb": 20
                        }
                      ],
                      "tags": [
                        "front",
                        "web"
                      ],
                      "type": "DEV1-S"
                    }
            - name: web_alias
              manifest: |-
                {
                  "data": "web.${var.dns_zone}.",
                  "dns_zone": "${var.dns_zone}",
                  "name": "",
                  "ttl": 3600,
                  "type": "ALIAS"
                }
              references:
                dns_zone: var.dns_zone
              dependencies:
                scaleway_instance_ip.public_ip: |-
                    {
                      "project_id": "${var.project_id}"
                    }
                scaleway_instance_server.web: |-
                    {
                      "image": "ubuntu_jammy",
                      "ip_id": "${scaleway_instance_ip.public_ip.id}",
                      "project_id": "${var.project_id}",
                      "root_volume": [
                        {
                          "size_in_gb": 20
                        }
                      ],
                      "tags": [
                        "front",
                        "web"
                      ],
                      "type": "DEV1-S"
                    }
        argumentDocs:
            app.domain.tld: that checks the health of specified IPs and responds based on their status.
            continents: '- (Optional) List of continents (eg: EU for Europe, NA for North America, AS for Asia, etc.). Check the list of all continent codes.'
            countries: '- (Optional) List of countries (eg: FR for France, US for the United States, GB for Great Britain, etc.). Check the list of all country codes.'
            data: '- (Required) The content of the record (an IPv4 for an A record, a string for a TXT record, etc.).'
            db.domain.tld: that resolve differently based on the client's subnet.
            dns_zone: '- (Required) The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.'
            fqdn: '- The FQDN of the record.'
            geo_ip: '- (Optional) The Geo IP provides DNS resolution based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. Check the documentation for more information.'
            http_service: '- (Optional) The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs, by excluding the ones not responding to the given string to check. Check the documentation for more information.'
            id: '- The ID of the record.'
            images.domain.tld: 'that points to different IPs based on the user''s location: 1.2.3.5 for users in France (EU), and 4.3.2.1 for users in North America (NA)'
            ip: '- (Required) The weighted IP.'
            ips: '- (Required) List of IPs to check.'
            keep_empty_zone: '- (Optional, defaults to false) When destroying a resource, if only NS records remain and this is set to false, the zone will be deleted. Note that each zone not deleted will be billed.'
            matches: '- (Required) The list of matches. (Can be more than one).'
            must_contain: '- (Required) Text to search.'
            mx.online.net.: mail server and a priority of 10, and another one with the mx-cache.online.net. mail server and a priority of 20
            name: '- (Optional) The name of the record (can be an empty string for a root record).'
            priority: '- (Optional, defaults to 0) The priority of the record (mostly used with an MX record).'
            strategy: '- (Required) Strategy to return an IP from the IPs list. Can be random, hashed, or all.'
            subnet: '- (Required) The subnet of the view.'
            ttl: '- (Optional, defaults to 3600) Time To Live of the record in seconds.'
            type: '- (Required) The type of the record (A, AAAA, MX, CNAME, DNAME, ALIAS, NS, PTR, SRV, TXT, TLSA, or CAA).'
            url: '- (Required) URL to match the must_contain text to validate an IP.'
            user_agent: '- (Optional) User-agent used when checking the URL.'
            view: '- (Optional) The answer to a DNS request is based on the client’s (resolver) subnet. (Can be more than 1) Check the documentation for more information.'
            web.domain.tld: that directs traffic to different IPs based on their weights.
            weight: '- (Required) The weight of the IP as an integer UInt32.'
            weighted: '- (Optional) You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with their related IP compared to the others in the list. (Can be more than 1) Check the documentation for more information.'
            www.domain.tld: domain, pointing to 1.2.3.4 and another one pointing to 1.2.3.5
        importStatements: []
    scaleway_domain_zone:
        subCategory: Domains and DNS
        name: scaleway_domain_zone
        title: scaleway_domain_zone
        examples:
            - name: test
              manifest: |-
                {
                  "domain": "scaleway-terraform.com",
                  "subdomain": "test"
                }
        argumentDocs:
            domain: '- (Required) The main domain where the DNS zone will be created.'
            id: '- The ID of the zone, in the {subdomain}.{domain} format.'
            message: '- Message.'
            ns: '- The list of same servers for the zone.'
            ns_default: '-  The default list of same servers for the zone.'
            ns_master: '- The master list of same servers for the zone.'
            project_id: '- (Defaults to Project ID specified in the provider configuration project_id) The ID of the Project associated with the domain.'
            status: '- The status of the domain zone.'
            subdomain: '- (Required) The name of the subdomain (zone name) to create within the domain.'
            updated_at: '- The date and time at which the DNS zone was last updated.'
        importStatements: []
    scaleway_flexible_ip:
        subCategory: Elastic Metal
        name: scaleway_flexible_ip
        title: scaleway_flexible_ip
        examples:
            - name: main
              manifest: |-
                {
                  "reverse": "my-reverse.com"
                }
            - name: main
              manifest: |-
                {
                  "zone": "fr-par-2"
                }
            - name: main
              manifest: |-
                {
                  "is_ipv6": "true"
                }
            - name: main
              manifest: |-
                {
                  "server_id": "${scaleway_baremetal_server.base.id}",
                  "zone": "fr-par-2"
                }
              references:
                server_id: scaleway_baremetal_server.base.id
              dependencies:
                scaleway_account_ssh_key.main: |-
                    {
                      "name": "main",
                      "public_key": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com"
                    }
                scaleway_baremetal_server.base: |-
                    {
                      "offer": "${data.scaleway_baremetal_offer.my_offer.offer_id}",
                      "os": "${data.scaleway_baremetal_os.by_id.os_id}",
                      "ssh_key_ids": "${scaleway_account_ssh_key.main.id}",
                      "zone": "fr-par-2"
                    }
        argumentDocs:
            created_at: '- The date and time of the creation of the Flexible IP (Format ISO 8601).'
            description: '- (Optional) A description of the flexible IP.'
            id: '- The ID of the Flexible IP'
            ip_address: '-  The IP address of the Flexible IP.'
            is_ipv6: '- (Optional) Defines whether the flexible IP has an IPv6 address.'
            organization_id: '- The organization of the Flexible IP.'
            project_id: '- The project of the Flexible IP.'
            reverse: '- (Optional) The reverse domain associated with this flexible IP.'
            server_id: '- The ID of the associated server.'
            status: '- The status of the flexible IP.'
            tags: '- (Optional) A list of tags to apply to the flexible IP.'
            updated_at: '- The date and time of the last update of the Flexible IP (Format ISO 8601).'
            zone: '- The zone of the Flexible IP.'
        importStatements: []
    scaleway_flexible_ip_mac_address:
        subCategory: Elastic Metal
        name: scaleway_flexible_ip_mac_address
        title: scaleway_flexible_ip_mac_address
        examples:
            - name: main
              manifest: |-
                {
                  "flexible_ip_id": "${scaleway_flexible_ip.main.id}",
                  "type": "kvm"
                }
              references:
                flexible_ip_id: scaleway_flexible_ip.main.id
              dependencies:
                scaleway_flexible_ip.main: '{}'
            - name: main
              manifest: |-
                {
                  "flexible_ip_id": "${scaleway_flexible_ip.ip01.id}",
                  "flexible_ip_ids_to_duplicate": [
                    "${scaleway_flexible_ip.ip02.id}",
                    "${scaleway_flexible_ip.ip03.id}"
                  ],
                  "type": "kvm"
                }
              references:
                flexible_ip_id: scaleway_flexible_ip.ip01.id
              dependencies:
                scaleway_baremetal_server.base: |-
                    {
                      "install_config_afterward": true,
                      "name": "TestAccScalewayBaremetalServer_WithoutInstallConfig",
                      "offer": "${data.scaleway_baremetal_offer.my_offer.offer_id}"
                    }
                scaleway_flexible_ip.ip01: |-
                    {
                      "server_id": "${scaleway_baremetal_server.base.id}"
                    }
                scaleway_flexible_ip.ip02: |-
                    {
                      "server_id": "${scaleway_baremetal_server.base.id}"
                    }
                scaleway_flexible_ip.ip03: |-
                    {
                      "server_id": "${scaleway_baremetal_server.base.id}"
                    }
        argumentDocs:
            address: '-  The Virtual MAC address.'
            created_at: '- The date at which the Virtual Mac Address was created (RFC 3339 format).'
            flexible_ip_id: '- (Required) The ID of the flexible IP for which to generate a virtual MAC.'
            flexible_ip_ids_to_duplicate: |-
                - (Optional) The IDs of the flexible IPs on which to duplicate the virtual MAC.
                ~> Important: The flexible IPs need to be attached to the same server for the operation to work.
            id: '- The ID of the Flexible IP Mac Address'
            status: '- The Virtual MAC status.'
            type: '- (Required) The type of the virtual MAC.'
            updated_at: '- The date at which the Virtual Mac Address was last updated (RFC 3339 format).'
            zone: '- The zone of the Virtual Mac Address.'
        importStatements: []
    scaleway_function:
        subCategory: Functions
        name: scaleway_function
        title: scaleway_function
        examples:
            - name: main
              manifest: |-
                {
                  "handler": "Handle",
                  "namespace_id": "${scaleway_function_namespace.main.id}",
                  "privacy": "private",
                  "runtime": "go118"
                }
              references:
                namespace_id: scaleway_function_namespace.main.id
              dependencies:
                scaleway_function_namespace.main: |-
                    {
                      "description": "Main function namespace",
                      "name": "main-function-namespace"
                    }
            - name: main
              manifest: |-
                {
                  "deploy": true,
                  "handler": "Handle",
                  "namespace_id": "${scaleway_function_namespace.main.id}",
                  "privacy": "private",
                  "runtime": "go118",
                  "timeout": 10,
                  "zip_file": "function.zip",
                  "zip_hash": "${filesha256(\"function.zip\")}"
                }
              references:
                namespace_id: scaleway_function_namespace.main.id
              dependencies:
                scaleway_function_namespace.main: |-
                    {
                      "description": "Main function namespace",
                      "name": "main-function-namespace"
                    }
        argumentDocs:
            cpu_limit: '- The CPU limit in mVCPU for your function.'
            deploy: '- Define whether the function should be deployed. Terraform will wait for the function to be deployed. Your function will be redeployed if you update the source zip file.'
            description: (Optional) The description of the function.
            domain_name: '- The native domain name of the function.'
            environment_variables: '- (Optional) The environment variables of the function.'
            handler: '- Handler of the function, depends on the runtime. Refer to the dedicated documentation for the list of supported runtimes.'
            id: '- The unique identifier of the function.'
            max_scale: '- (Optional) The maximum number of instances this function can scale to. Default to 20. Your function will scale automatically based on the incoming workload, but will never exceed the configured max_scale value.'
            memory_limit: '- (Optional) The memory resources in MB to allocate to each function. Defaults to 256 MB.'
            min_scale: '- (Optional) The minimum number of function instances running continuously. Defaults to 0. Functions are billed when executed, and using a min_scale greater than 0 will cause your function to run constantly.'
            name: '- (Required) The unique name of the function name.'
            namespace_id: '- (Required) The Functions namespace ID of the function.'
            organization_id: '- The organization ID the function is associated with.'
            privacy: '- (Optional) The privacy type defines the way to authenticate to your function. Please check our dedicated section.'
            project_id: '- (Defaults to provider project_id) The ID of the project the functions namespace is associated with.'
            region: '- (Defaults to provider region). The region in which the namespace should be created.'
            runtime: '- Runtime of the function. Runtimes can be fetched using specific route'
            sandbox: '- (Optional) Execution environment of the function.'
            secret_environment_variables: '- (Optional) The secret environment variables of the function.'
            timeout: '- (Optional) The maximum amount of time your function can spend processing a request before being stopped. Defaults to 300s.'
            zip_file: '- Path to the zip file containing your function sources to upload.'
            zip_hash: '- The hash of your source zip file, changing it will redeploy the function. Can be any string, changing it will simply trigger a state change. You can use any Terraform hash function to trigger a change on your zip change (see examples).'
        importStatements: []
    scaleway_function_cron:
        subCategory: Functions
        name: scaleway_function_cron
        title: scaleway_function_cron
        examples:
            - name: main
              manifest: |-
                {
                  "args": "${jsonencode({test = \"scw\"})}",
                  "function_id": "${scaleway_function.main.id}",
                  "name": "test-cron",
                  "schedule": "0 0 * * *"
                }
              references:
                function_id: scaleway_function.main.id
              dependencies:
                scaleway_function.main: |-
                    {
                      "handler": "handler.handle",
                      "name": "test-cron",
                      "namespace_id": "${scaleway_function_namespace.main.id}",
                      "privacy": "private",
                      "runtime": "node14"
                    }
                scaleway_function_namespace.main: |-
                    {
                      "name": "test-cron"
                    }
            - name: func
              manifest: |-
                {
                  "args": "${jsonencode({my_var = \"terraform\"})}",
                  "function_id": "${scaleway_function.main.id}",
                  "schedule": "0 1 * * *"
                }
              references:
                function_id: scaleway_function.main.id
              dependencies:
                scaleway_function.main: |-
                    {
                      "handler": "handler.handle",
                      "name": "test-cron",
                      "namespace_id": "${scaleway_function_namespace.main.id}",
                      "privacy": "private",
                      "runtime": "node14"
                    }
                scaleway_function_namespace.main: |-
                    {
                      "name": "test-cron"
                    }
        argumentDocs:
            args: '- (Required) The key-value mapping to define arguments that will be passed to your function’s event object'
            function_id: '- (Required) The unique identifier of the function to link to your CRON trigger.'
            id: '- The unique identifier of the function''s CRON trigger.'
            name: '- (Optional) The name of the function CRON trigger. If not provided, a random name is generated.'
            region: |-
                - (Defaults to provider region) The region
                in which the function was created.
            schedule: '- (Required) CRON format string (refer to the CRON schedule reference for more information).'
            status: '- The CRON status.'
        importStatements: []
    scaleway_function_domain:
        subCategory: Functions
        name: scaleway_function_domain
        title: scaleway_function_domain
        examples:
            - name: main
              manifest: |-
                {
                  "depends_on": [
                    "${scaleway_function.main}"
                  ],
                  "function_id": "${scaleway_function.main.id}",
                  "hostname": "example.com"
                }
              references:
                function_id: scaleway_function.main.id
              dependencies:
                scaleway_function.main: |-
                    {
                      "deploy": true,
                      "handler": "Handle",
                      "namespace_id": "${scaleway_function_namespace.main.id}",
                      "privacy": "private",
                      "runtime": "go118",
                      "zip_file": "testfixture/gofunction.zip"
                    }
                scaleway_function_namespace.main: '{}'
        argumentDocs:
            domain_name: for it.
            function_id: '- (Required) The unique identifier of the function.'
            hostname: '- (Required) The hostname with a CNAME record.'
            id: '- The unique identifier of the function domain.'
            region: '- (Defaults to provider region) The region in which the domain was created.'
            url: '- The URL used to query the function.'
        importStatements: []
    scaleway_function_namespace:
        subCategory: Functions
        name: scaleway_function_namespace
        title: scaleway_function_namespace
        examples:
            - name: main
              manifest: |-
                {
                  "description": "Main function namespace",
                  "name": "main-function-namespace"
                }
        argumentDocs:
            description: (Optional) The description of the namespace.
            environment_variables: '- The environment variables of the namespace.'
            id: '- The unique identifier of the namespace.'
            name: '- (Required) The unique name of the Functions namespace.'
            organization_id: '- The Organization ID with which the namespace is associated.'
            project_id: '- (Defaults to provider project_id) The unique identifier of the project that contains the namespace.'
            region: '- (Defaults to provider region). The region in which the namespace is created.'
            registry_endpoint: '- The registry endpoint of the namespace.'
            registry_namespace_id: '- The registry namespace ID of the namespace.'
            secret_environment_variables: '- The secret environment variables of the namespace.'
        importStatements: []
    scaleway_function_token:
        subCategory: Functions
        name: scaleway_function_token
        title: scaleway_function_token
        examples:
            - name: namespace
              manifest: |-
                {
                  "expires_at": "2022-10-18T11:35:15+02:00",
                  "namespace_id": "${scaleway_function_namespace.main.id}"
                }
              references:
                namespace_id: scaleway_function_namespace.main.id
              dependencies:
                scaleway_function.main: |-
                    {
                      "handler": "Handle",
                      "namespace_id": "${scaleway_function_namespace.main.id}",
                      "privacy": "private",
                      "runtime": "go118"
                    }
                scaleway_function_namespace.main: |-
                    {
                      "name": "test-function-token-ns"
                    }
            - name: function
              manifest: |-
                {
                  "function_id": "${scaleway_function.main.id}"
                }
              references:
                function_id: scaleway_function.main.id
              dependencies:
                scaleway_function.main: |-
                    {
                      "handler": "Handle",
                      "namespace_id": "${scaleway_function_namespace.main.id}",
                      "privacy": "private",
                      "runtime": "go118"
                    }
                scaleway_function_namespace.main: |-
                    {
                      "name": "test-function-token-ns"
                    }
        argumentDocs:
            description: (Optional) The description of the token.
            expires_at: (Optional) The expiration date of the token.
            function_id: '- (Required) The unique identifier of the function.'
            id: '- The unique identifier of the token.'
            namespace_id: '- (Required) The unique identifier of the Functions namespace.'
            region: '- (Defaults to provider region). The region in which the namespace is created.'
            token: '- The token.'
        importStatements: []
    scaleway_function_trigger:
        subCategory: Functions
        name: scaleway_function_trigger
        title: scaleway_function_trigger
        examples:
            - name: main
              manifest: |-
                {
                  "function_id": "${scaleway_function.main.id}",
                  "name": "my-trigger",
                  "sqs": [
                    {
                      "project_id": "${scaleway_mnq_sqs.main.project_id}",
                      "queue": "MyQueue",
                      "region": "${scaleway_mnq_sqs.main.region}"
                    }
                  ]
                }
              references:
                function_id: scaleway_function.main.id
                sqs.project_id: scaleway_mnq_sqs.main.project_id
                sqs.region: scaleway_mnq_sqs.main.region
            - name: main
              manifest: |-
                {
                  "function_id": "${scaleway_function.main.id}",
                  "name": "my-trigger",
                  "nats": [
                    {
                      "account_id": "${scaleway_mnq_nats_account.main.id}",
                      "region": "${scaleway_mnq_nats_account.main.region}",
                      "subject": "MySubject"
                    }
                  ]
                }
              references:
                function_id: scaleway_function.main.id
                nats.account_id: scaleway_mnq_nats_account.main.id
                nats.region: scaleway_mnq_nats_account.main.region
        argumentDocs:
            account_id: (Required) unique identifier of the Messaging and Queuing NATS account.
            description: (Optional) The description of the trigger.
            function_id: (Required) The unique identifier of the function to create a trigger for.
            id: '- The unique identifier of the Function trigger'
            name: '- (Optional) The unique name of the trigger. If not provided, a random name is generated.'
            namespace_id: (Deprecated) ID of the Messaging and Queuing namespace. This argument is deprecated.
            nats: The configuration for the Scaleway NATS account used by the trigger
            project_id: (Optional) The ID of the project in which SQS is enabled, (defaults to provider project_id)
            queue: (Required) The name of the SQS queue.
            region: (Optional) Region where SQS is enabled (defaults to provider region)
            sqs: The configuration of the Scaleway SQS queue used by the trigger
            subject: (Required) The subject to listen to.
        importStatements: []
    scaleway_iam_api_key:
        subCategory: IAM
        name: scaleway_iam_api_key
        title: scaleway_iam_api_key
        examples:
            - name: main
              manifest: |-
                {
                  "application_id": "${scaleway_iam_application.main.id}",
                  "description": "a description"
                }
              references:
                application_id: scaleway_iam_application.main.id
              dependencies:
                scaleway_iam_application.ci_cd: |-
                    {
                      "name": "My application"
                    }
            - name: main
              manifest: |-
                {
                  "description": "a description",
                  "user_id": "${scaleway_iam_user.main.id}"
                }
              references:
                user_id: scaleway_iam_user.main.id
              dependencies:
                scaleway_iam_user.main: |-
                    {
                      "email": "test@test.com"
                    }
            - name: main
              manifest: |-
                {
                  "application_id": "${scaleway_iam_application.main.id}",
                  "expires_at": "${time_rotating.rotate_after_a_year.rotation_rfc3339}"
                }
              references:
                application_id: scaleway_iam_application.main.id
                expires_at: time_rotating.rotate_after_a_year.rotation_rfc3339
              dependencies:
                time_rotating.rotate_after_a_year: |-
                    {
                      "rotation_years": 1
                    }
        argumentDocs:
            access_key: '- The access key of the IAM API key.'
            application_id: ': (Optional) ID of the application attached to the API key.'
            created_at: '- The date and time of the creation of the IAM API key.'
            creation_ip: '- The IP Address of the device which created the API key.'
            default_project_id: '- (Optional) The default Project ID to use with Object Storage.'
            description: ': (Optional) The description of the API key.'
            editable: '- Whether the IAM API key is editable.'
            expires_at: |-
                - (Optional) The date and time of the expiration of the IAM API key. Please note that in case of any changes,
                the resource will be recreated.
            id: '- The ID of the API key, which is the access key.'
            secret_key: ': The secret Key of the IAM API key.'
            updated_at: '- The date and time of the last update of the IAM API key.'
            user_id: |-
                - (Optional) ID of the user attached to the API key.
                -> Note You must specify at least one: application_id and/or user_id.
        importStatements: []
    scaleway_iam_application:
        subCategory: IAM
        name: scaleway_iam_application
        title: scaleway_iam_application
        examples:
            - name: main
              manifest: |-
                {
                  "description": "a description",
                  "name": "My application"
                }
        argumentDocs:
            created_at: '- The date and time of the creation of the application.'
            description: '- (Optional) The description of the iam application.'
            editable: '- Whether the application is editable.'
            id: '- The ID of the application.'
            name: '- (Optional) The name of the iam application.'
            organization_id: '- (Defaults to provider organization_id) The ID of the organization the application is associated with.'
            tags: '- (Optional) The tags associated with the application.'
            updated_at: '- The date and time of the last update of the application.'
        importStatements: []
    scaleway_iam_group:
        subCategory: IAM
        name: scaleway_iam_group
        title: scaleway_iam_group
        examples:
            - name: basic
              manifest: |-
                {
                  "application_ids": [],
                  "description": "basic description",
                  "name": "iam_group_basic",
                  "user_ids": []
                }
            - name: with_app
              manifest: |-
                {
                  "application_ids": [
                    "${scaleway_iam_application.app.id}"
                  ],
                  "name": "iam_group_with_app",
                  "user_ids": []
                }
              dependencies:
                scaleway_iam_application.app: '{}'
            - name: with_users
              manifest: |-
                {
                  "application_ids": [],
                  "name": "iam_group_with_app",
                  "user_ids": "${[for user in data.scaleway_iam_user.users : user.id]}"
                }
        argumentDocs:
            application_ids: '- (Optional) The list of IDs of the applications attached to the group.'
            description: '- (Optional) The description of the IAM group.'
            external_membership: '- (Optional) Manage membership externally. This make the resource ignore user_ids and application_ids. Should be used when using iam_group_membership'
            name: '- (Optional) The name of the IAM group.'
            organization_id: '- (Defaults to provider organization_id) The ID of the organization the group is associated with.'
            tags: '- (Optional) The tags associated with the group.'
            user_ids: '- (Optional) The list of IDs of the users attached to the group.'
        importStatements: []
    scaleway_iam_group_membership:
        subCategory: IAM
        name: scaleway_iam_group_membership
        title: scaleway_iam_group_membership
        examples:
            - name: member
              manifest: |-
                {
                  "application_id": "${scaleway_iam_application.app.id}",
                  "group_id": "${scaleway_iam_group.group.id}"
                }
              references:
                application_id: scaleway_iam_application.app.id
                group_id: scaleway_iam_group.group.id
              dependencies:
                scaleway_iam_application.app: |-
                    {
                      "name": "my_app"
                    }
                scaleway_iam_group.group: |-
                    {
                      "external_membership": true,
                      "name": "my_group"
                    }
            - name: members
              manifest: |-
                {
                  "for_each": "${data.scaleway_iam_user.users}",
                  "group_id": "${scaleway_iam_group.group.id}",
                  "user_id": "${each.value.id}"
                }
              references:
                for_each: data.scaleway_iam_user.users
                group_id: scaleway_iam_group.group.id
                user_id: each.value.id
              dependencies:
                scaleway_iam_group.group: |-
                    {
                      "external_membership": true,
                      "name": "my_group"
                    }
        argumentDocs:
            application_id: '- (Optional) The ID of the application that will be added to the group.'
            group_id: '- (Required) ID of the group to add members to.'
            user_id: '- (Optional) The ID of the user that will be added to the group'
        importStatements: []
    scaleway_iam_policy:
        subCategory: IAM
        name: scaleway_iam_policy
        title: scaleway_iam_policy
        examples:
            - name: object_read_only
              manifest: |-
                {
                  "application_id": "${scaleway_iam_application.app.id}",
                  "description": "gives app readonly access to object storage in project",
                  "name": "my policy",
                  "rule": [
                    {
                      "permission_set_names": [
                        "ObjectStorageReadOnly"
                      ],
                      "project_ids": [
                        "${data.scaleway_account_project.default.id}"
                      ]
                    }
                  ]
                }
              references:
                application_id: scaleway_iam_application.app.id
              dependencies:
                scaleway_iam_application.app: |-
                    {
                      "name": "my app"
                    }
            - name: object_read_only
              manifest: |-
                {
                  "application_id": "${scaleway_iam_application.app.id}",
                  "description": "gives app readonly access to object storage in project",
                  "name": "my policy",
                  "rule": [
                    {
                      "organization_id": "${scaleway_iam_application.app.organization_id}",
                      "permission_set_names": [
                        "ObjectStorageReadOnly"
                      ]
                    }
                  ]
                }
              references:
                application_id: scaleway_iam_application.app.id
                rule.organization_id: scaleway_iam_application.app.organization_id
              dependencies:
                scaleway_iam_application.app: |-
                    {
                      "name": "my app"
                    }
            - name: iam_tf_storage_policy
              manifest: |-
                {
                  "group_id": "${scaleway_iam_group.with_users.id}",
                  "name": "developers permissions",
                  "rule": [
                    {
                      "permission_set_names": [
                        "InstancesReadOnly"
                      ],
                      "project_ids": [
                        "${data.scaleway_account_project.project.id}"
                      ]
                    }
                  ]
                }
              references:
                group_id: scaleway_iam_group.with_users.id
              dependencies:
                scaleway_iam_group.with_users: |-
                    {
                      "name": "developers",
                      "user_ids": "${[for user in data.scaleway_iam_user.users : user.id]}"
                    }
            - name: main
              manifest: |-
                {
                  "name": "tf_tests_policy_condition",
                  "no_principal": true,
                  "rule": [
                    {
                      "condition": "request.user_agent == 'My User Agent'",
                      "organization_id": "%s",
                      "permission_set_names": [
                        "AllProductsFullAccess"
                      ]
                    }
                  ]
                }
        argumentDocs:
            application_id: '- ID of the application the policy will be linked to'
            condition: '- (Optional) The condition of the IAM policy.'
            created_at: '- The date and time of the creation of the policy.'
            description: '- (Optional) The description of the IAM policy.'
            editable: '- Whether the policy is editable.'
            group_id: '- ID of the group the policy will be linked to'
            id: '- The ID of the policy.'
            name: '- (Optional) The name of the IAM policy.'
            no_principal: '- If the policy doesn''t apply to a principal.'
            organization_id: '- (Defaults to provider organization_id) The ID of the organization the policy is associated with.'
            permission_set_names: '- Names of permission sets bind to the rule.'
            project_ids: '- List of project IDs scoped to the rule.'
            rule: '- List of rules in the policy.'
            tags: '- (Optional) The tags associated with the IAM policy.'
            updated_at: '- The date and time of the last update of the policy.'
            user_id: '- ID of the user the policy will be linked to'
        importStatements:
            - scw IAM permission-set list
    scaleway_iam_ssh_key:
        subCategory: IAM
        name: scaleway_iam_ssh_key
        title: scaleway_iam_ssh_key
        examples:
            - name: main
              manifest: |-
                {
                  "name": "main",
                  "public_key": "\u003cYOUR-PUBLIC-SSH-KEY\u003e"
                }
        argumentDocs:
            created_at: '- The date and time of the creation of the SSH key.'
            disabled: '- (Optional) The SSH key status.'
            fingerprint: '- The fingerprint of the iam SSH key.'
            id: '- The ID of the SSH public key.'
            name: '- (Required) The name of the SSH key.'
            organization_id: '- The ID of the organization the SSH key is associated with.'
            project_id: |-
                - (Defaults to provider project_id) The ID of the project the SSH key is
                associated with.
            public_key: '- (Required) The public SSH key to be added.'
            updated_at: '- The date and time of the last update of the SSH key.'
        importStatements: []
    scaleway_iam_user:
        subCategory: IAM
        name: scaleway_iam_user
        title: scaleway_iam_user
        examples:
            - name: basic
              manifest: |-
                {
                  "email": "test@test.com"
                }
            - name: user
              manifest: |-
                {
                  "email": "${each.key}",
                  "for_each": "${local.users}"
                }
              references:
                email: each.key
                for_each: local.users
        argumentDocs:
            account_root_user_id: '- The ID of the account root user associated with the user.'
            created_at: '- The date and time of the creation of the IAM user.'
            deletable: '- Whether the IAM user is deletable.'
            email: '- (Required) The email of the IAM user.'
            id: '- The ID of the user (UUID format).'
            last_login_at: '- The date of the last login.'
            mfa: '- Whether the MFA is enabled.'
            organization_id: '- (Defaults to provider organization_id) The ID of the organization the user is associated with.'
            status: '- The status of user invitation. Check the possible values in the API doc.'
            type: '- The type of user. Check the possible values in the API doc.'
            updated_at: '- The date and time of the last update of the IAM user.'
        importStatements: []
    scaleway_instance_image:
        subCategory: Instances
        name: scaleway_instance_image
        title: scaleway_instance_image
        examples:
            - name: volume_image
              manifest: |-
                {
                  "name": "image_from_volume",
                  "root_volume_id": "${scaleway_instance_snapshot.volume_snapshot.id}"
                }
              references:
                root_volume_id: scaleway_instance_snapshot.volume_snapshot.id
              dependencies:
                scaleway_instance_snapshot.volume_snapshot: |-
                    {
                      "volume_id": "${scaleway_instance_volume.volume.id}"
                    }
                scaleway_instance_volume.volume: |-
                    {
                      "size_in_gb": 20,
                      "type": "b_ssd"
                    }
            - name: server_image
              manifest: |-
                {
                  "name": "image_from_server",
                  "root_volume_id": "${scaleway_instance_snapshot.server_snapshot.id}"
                }
              references:
                root_volume_id: scaleway_instance_snapshot.server_snapshot.id
              dependencies:
                scaleway_instance_server.server: |-
                    {
                      "image": "ubuntu_jammy",
                      "type": "DEV1-S"
                    }
                scaleway_instance_snapshot.server_snapshot: |-
                    {
                      "volume_id": "${scaleway_instance_server.main.root_volume.0.volume_id}"
                    }
            - name: image
              manifest: |-
                {
                  "additional_volumes": [
                    "${scaleway_instance_snapshot.volume_snapshot.id}"
                  ],
                  "name": "image_with_extra_volumes",
                  "root_volume_id": "${scaleway_instance_snapshot.server_snapshot.id}"
                }
              references:
                root_volume_id: scaleway_instance_snapshot.server_snapshot.id
              dependencies:
                scaleway_instance_server.server: |-
                    {
                      "image": "ubuntu_jammy",
                      "type": "DEV1-S"
                    }
                scaleway_instance_snapshot.server_snapshot: |-
                    {
                      "volume_id": "${scaleway_instance_server.main.root_volume.0.volume_id}"
                    }
                scaleway_instance_snapshot.volume_snapshot: |-
                    {
                      "volume_id": "${scaleway_instance_volume.volume.id}"
                    }
                scaleway_instance_volume.volume: |-
                    {
                      "size_in_gb": 20,
                      "type": "b_ssd"
                    }
        argumentDocs:
            additional_volume_ids: '- (Optional) List of IDs of the snapshots of the additional volumes to be attached to the image.'
            additional_volumes: '- The description of the extra volumes attached to the image.'
            additional_volumes.creation_date: '- Date of the volume creation.'
            additional_volumes.export_uri: '- The export URI of the volume.'
            additional_volumes.id: '- The ID of the volume.'
            additional_volumes.modification_date: '- Date of volume latest update.'
            additional_volumes.name: '- The name of the volume.'
            additional_volumes.organization: '- The organization ID the volume is associated with.'
            additional_volumes.project: '- ID of the project the volume is associated with'
            additional_volumes.server: '- Description of the server containing the volume (in case the image is a backup from a server).'
            additional_volumes.size: '- The size of the volume.'
            additional_volumes.state: '- State of the volume.'
            additional_volumes.tags: '- List of tags associated with the volume.'
            additional_volumes.volume_type: '- The type of volume, possible values are l_ssd and b_ssd.'
            additional_volumes.zone: '- The zone in which the volume is.'
            architecture: '- (Optional, default x86_64) The architecture the image is compatible with. Possible values are: x86_64 or arm.'
            creation_date: '- Date of the image creation.'
            from_server_id: '- ID of the server the image is based on (in case it is a backup).'
            id: '- The ID of the image.'
            modification_date: '- Date of image latest update.'
            name: '- (Optional) The name of the image. If not provided it will be randomly generated.'
            organization_id: '- The organization ID the image is associated with.'
            project_id: '- (Defaults to provider project_id) The ID of the project the image is associated with.'
            public: '- (Optional) Set to true if the image is public.'
            root_volume_id: '- (Required) The ID of the snapshot of the volume to be used as root in the image.'
            server: |-
                block contains :
                - id - ID of the server containing the volume.
                - name - Name of the server containing the volume.
            state: '- State of the image. Possible values are: available, creating or error.'
            tags: '- (Optional) A list of tags to apply to the image.'
            zone: '- (Defaults to provider zone) The zone in which the image should be created.'
        importStatements: []
    scaleway_instance_ip:
        subCategory: Instances
        name: scaleway_instance_ip
        title: scaleway_instance_ip
        examples:
            - name: server_ip
              manifest: '{}'
        argumentDocs:
            address: '- The IP address.'
            id: '- The ID of the IP.'
            organization_id: '- The organization ID the IP is associated with.'
            prefix: '- The IP Prefix.'
            project_id: '- (Defaults to provider project_id) The ID of the project the IP is associated with.'
            reverse: '- The reverse dns attached to this IP'
            tags: '- The tags associated with the IP.'
            type: '- (Defaults to nat) The type of the IP (nat, routed_ipv4, routed_ipv6), more information in the documentation'
            zone: '- (Defaults to provider zone) The zone in which the IP should be reserved.'
        importStatements: []
    scaleway_instance_ip_reverse_dns:
        subCategory: Instances
        name: scaleway_instance_ip_reverse_dns
        title: scaleway_instance_ip_reverse_dns
        examples:
            - name: reverse
              manifest: |-
                {
                  "ip_id": "${scaleway_instance_ip.server_ip.id}",
                  "reverse": "www.scaleway.com"
                }
              references:
                ip_id: scaleway_instance_ip.server_ip.id
              dependencies:
                scaleway_domain_record.tf_A: |-
                    {
                      "data": "${scaleway_instance_ip.server_ip.address}",
                      "dns_zone": "scaleway.com",
                      "name": "www",
                      "priority": 1,
                      "ttl": 3600,
                      "type": "A"
                    }
                scaleway_instance_ip.server_ip: '{}'
        argumentDocs:
            id: '- The ID of the IP for which the reverse DNS is configured.'
            ip_id: '- (Required) The IP ID'
            reverse: '- (Required) The reverse DNS for this IP.'
            zone: '- (Defaults to provider zone) The zone in which the IP should be reserved.'
        importStatements: []
    scaleway_instance_placement_group:
        subCategory: Instances
        name: scaleway_instance_placement_group
        title: scaleway_instance_placement_group
        examples:
            - name: availability_group
              manifest: '{}'
        argumentDocs:
            id: '- The ID of the placement group.'
            name: '- (Optional) The name of the placement group.'
            organization_id: '- The organization ID the placement group is associated with.'
            policy_mode: '- (Defaults to optional) The policy mode of the placement group. Possible values are: optional or enforced.'
            policy_respected: '- Is true when the policy is respected.'
            policy_type: '- (Defaults to max_availability) The policy type of the placement group. Possible values are: low_latency or max_availability.'
            project_id: '- (Defaults to provider project_id) The ID of the project the placement group is associated with.'
            tags: '- (Optional) A list of tags to apply to the placement group.'
            zone: '- (Defaults to provider zone) The zone in which the placement group should be created.'
        importStatements: []
    scaleway_instance_private_nic:
        subCategory: Instances
        name: scaleway_instance_private_nic
        title: scaleway_instance_private_nic
        examples:
            - name: pnic01
              manifest: |-
                {
                  "private_network_id": "fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                  "server_id": "fr-par-1/11111111-1111-1111-1111-111111111111"
                }
            - name: pnic01
              manifest: |-
                {
                  "private_network_id": "${scaleway_vpc_private_network.pn01.id}",
                  "server_id": "${scaleway_instance_server.base.id}",
                  "zone": "${scaleway_vpc_private_network.pn01.zone}"
                }
              references:
                private_network_id: scaleway_vpc_private_network.pn01.id
                server_id: scaleway_instance_server.base.id
                zone: scaleway_vpc_private_network.pn01.zone
              dependencies:
                scaleway_instance_server.base: |-
                    {
                      "image": "ubuntu_jammy",
                      "type": "DEV1-S",
                      "zone": "${scaleway_vpc_private_network.pn01.zone}"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "name": "private_network_instance",
                      "region": "fr-par"
                    }
            - name: pnic01
              manifest: |-
                {
                  "ipam_ip_ids": [
                    "${scaleway_ipam_ip.ip01.id}"
                  ],
                  "private_network_id": "${scaleway_vpc_private_network.pn01.id}",
                  "server_id": "${scaleway_instance_server.server01.id}"
                }
              references:
                private_network_id: scaleway_vpc_private_network.pn01.id
                server_id: scaleway_instance_server.server01.id
              dependencies:
                scaleway_instance_server.server01: |-
                    {
                      "image": "ubuntu_focal",
                      "type": "PLAY2-MICRO"
                    }
                scaleway_ipam_ip.ip01: |-
                    {
                      "address": "172.16.64.7",
                      "source": [
                        {
                          "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                        }
                      ]
                    }
                scaleway_vpc.vpc01: |-
                    {
                      "name": "vpc_instance"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "ipv4_subnet": [
                        {
                          "subnet": "172.16.64.0/22"
                        }
                      ],
                      "name": "private_network_instance",
                      "vpc_id": "${scaleway_vpc.vpc01.id}"
                    }
        argumentDocs:
            id: '- The ID of the private NIC.'
            ipam_ip_ids: '- (Optional) IPAM IDs of a pre-reserved IP addresses to assign to the Instance in the requested private network.'
            mac_address: '- The MAC address of the private NIC.'
            private_network_id: '- (Required) The ID of the private network attached to.'
            server_id: '- (Required) The ID of the server associated with.'
            tags: '- (Optional) The tags associated with the private NIC.'
            zone: '- (Defaults to provider zone) The zone in which the server must be created.'
        importStatements: []
    scaleway_instance_security_group:
        subCategory: Instances
        name: scaleway_instance_security_group
        title: scaleway_instance_security_group
        examples:
            - name: allow_all
              manifest: '{}'
            - name: web
              manifest: |-
                {
                  "inbound_default_policy": "drop",
                  "inbound_rule": [
                    {
                      "action": "accept",
                      "ip": "212.47.225.64",
                      "port": 22
                    },
                    {
                      "action": "accept",
                      "port": 80
                    },
                    {
                      "action": "accept",
                      "port_range": "22-23",
                      "protocol": "UDP"
                    }
                  ]
                }
            - name: web
              manifest: |-
                {
                  "inbound_default_policy": "drop",
                  "inbound_rule": [
                    {
                      "action": "drop",
                      "ip": "1.1.1.1"
                    },
                    {
                      "action": "accept",
                      "ip": "212.47.225.64",
                      "port": 22
                    },
                    {
                      "action": "accept",
                      "port": 443
                    }
                  ],
                  "outbound_default_policy": "drop",
                  "outbound_rule": [
                    {
                      "action": "accept",
                      "ip": "8.8.8.8"
                    }
                  ]
                }
            - name: dummy
              manifest: |-
                {
                  "dynamic": {
                    "inbound_rule": [
                      {
                        "content": [
                          {
                            "action": "accept",
                            "ip": "${inbound_rule.value}",
                            "port": 22
                          }
                        ],
                        "for_each": "${local.trusted}"
                      }
                    ]
                  },
                  "inbound_default_policy": "drop",
                  "outbound_default_policy": "accept"
                }
              references:
                dynamic.content.ip: inbound_rule.value
                dynamic.for_each: local.trusted
        argumentDocs:
            description: '- (Optional) The description of the security group.'
            enable_default_security: '- Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, open a support ticket.'
            external_rules: |-
                - (Defaults to false) A boolean to specify whether to use instance_security_group_rules.
                If external_rules is set to true, inbound_rule and outbound_rule can not be set directly in the security group.
            id: '- The ID of the security group.'
            inbound_default_policy: '- (Defaults to accept) The default policy on incoming traffic. Possible values are: accept or drop.'
            inbound_rule: '- (Optional) A list of inbound rule to add to the security group. (Structure is documented below.)'
            inbound_rule.action: '- (Required) The action to take when rule match. Possible values are: accept or drop.'
            inbound_rule.ip: '- (Optional) The ip this rule apply to. If no ip nor ip_range are specified, rule will apply to all ip. Only one of ip and ip_range should be specified.'
            inbound_rule.ip_range: '- (Optional) The ip range (e.g 192.168.1.0/24) this rule applies to. If no ip nor ip_range are specified, rule will apply to all ip. Only one of ip and ip_range should be specified.'
            inbound_rule.port: '- (Optional) The port this rule applies to. If no port nor port_range are specified, the rule will apply to all port. Only one of port and port_range should be specified.'
            inbound_rule.port_range: |-
                - Need terraform >= 0.13.0 (Optional) The port range (e.g 22-23) this rule applies to.
                If no port nor port_range are specified, rule will apply to all port.
                Only one of port and port_range should be specified.
            inbound_rule.protocol: '- (Defaults to TCP) The protocol this rule apply to. Possible values are: TCP, UDP, ICMP or ANY.'
            inbound_rule.tags: '- (Optional) The tags of the security group.'
            name: '- (Optional) The name of the security group.'
            organization_id: '- The organization ID the security group is associated with.'
            outbound_default_policy: '- (Defaults to accept) The default policy on outgoing traffic. Possible values are: accept or drop.'
            outbound_rule: '- (Optional) A list of outbound rule to add to the security group. (Structure is documented below.)'
            project_id: '- (Defaults to provider project_id) The ID of the project the security group is associated with.'
            stateful: '- (Defaults to true) A boolean to specify whether the security group should be stateful or not.'
            zone: '- (Defaults to provider zone) The zone in which the security group should be created.'
        importStatements: []
    scaleway_instance_security_group_rules:
        subCategory: Instances
        name: scaleway_instance_security_group_rules
        title: scaleway_instance_security_group_rules
        examples:
            - name: sgrs01
              manifest: |-
                {
                  "inbound_rule": [
                    {
                      "action": "accept",
                      "ip_range": "0.0.0.0/0",
                      "port": 80
                    }
                  ],
                  "security_group_id": "${scaleway_instance_security_group.sg01.id}"
                }
              references:
                security_group_id: scaleway_instance_security_group.sg01.id
              dependencies:
                scaleway_instance_security_group.sg01: |-
                    {
                      "external_rules": true
                    }
            - name: main
              manifest: |-
                {
                  "dynamic": {
                    "inbound_rule": [
                      {
                        "content": [
                          {
                            "action": "accept",
                            "ip": "${inbound_rule.value}",
                            "port": 80
                          }
                        ],
                        "for_each": "${local.trusted}"
                      }
                    ]
                  },
                  "security_group_id": "${scaleway_instance_security_group.main.id}"
                }
              references:
                dynamic.content.ip: inbound_rule.value
                dynamic.for_each: local.trusted
                security_group_id: scaleway_instance_security_group.main.id
              dependencies:
                scaleway_instance_security_group.main: |-
                    {
                      "description": "test",
                      "inbound_default_policy": "drop",
                      "name": "terraform test",
                      "outbound_default_policy": "accept"
                    }
            - name: main
              manifest: |-
                {
                  "dynamic": {
                    "inbound_rule": [
                      {
                        "content": [
                          {
                            "action": "accept",
                            "ip": "${inbound_rule.value.ip}",
                            "port": "${inbound_rule.value.port}"
                          }
                        ],
                        "for_each": "${local.trusted}"
                      }
                    ]
                  },
                  "security_group_id": "${scaleway_instance_security_group.main.id}"
                }
              references:
                dynamic.content.ip: inbound_rule.value.ip
                dynamic.content.port: inbound_rule.value.port
                dynamic.for_each: local.trusted
                security_group_id: scaleway_instance_security_group.main.id
              dependencies:
                scaleway_instance_security_group.main: |-
                    {
                      "description": "test",
                      "inbound_default_policy": "drop",
                      "name": "terraform test",
                      "outbound_default_policy": "accept"
                    }
        argumentDocs:
            id: '- The ID of the security group.'
            inbound_rule: '- (Optional) A list of inbound rule to add to the security group. (Structure is documented below.)'
            inbound_rule.action: '- (Required) The action to take when rule match. Possible values are: accept or drop.'
            inbound_rule.ip: '- (Optional) The ip this rule apply to. If no ip nor ip_range are specified, rule will apply to all ip. Only one of ip and ip_range should be specified.'
            inbound_rule.ip_range: '- (Optional) The ip range (e.g 192.168.1.0/24) this rule applies to. If no ip nor ip_range are specified, rule will apply to all ip. Only one of ip and ip_range should be specified.'
            inbound_rule.port: '- (Optional) The port this rule apply to. If no port is specified, rule will apply to all port.'
            inbound_rule.port_range: |-
                - Need terraform >= 0.13.0 (Optional) The port range (e.g 22-23) this rule applies to.
                If no port nor port_range are specified, rule will apply to all port.
                Only one of port and port_range should be specified.
            inbound_rule.protocol: '- (Defaults to TCP) The protocol this rule apply to. Possible values are: TCP, UDP, ICMP or ANY.'
            outbound_rule: '- (Optional) A list of outbound rule to add to the security group. (Structure is documented below.)'
            security_group_id: '- (Required) The ID of the security group.'
        importStatements: []
    scaleway_instance_server:
        subCategory: Instances
        name: scaleway_instance_server
        title: scaleway_instance_server
        examples:
            - name: web
              manifest: |-
                {
                  "image": "ubuntu_jammy",
                  "ip_id": "${scaleway_instance_ip.public_ip.id}",
                  "type": "DEV1-S"
                }
              references:
                ip_id: scaleway_instance_ip.public_ip.id
              dependencies:
                scaleway_instance_ip.public_ip: '{}'
            - name: web
              manifest: |-
                {
                  "additional_volume_ids": [
                    "${scaleway_instance_volume.data.id}"
                  ],
                  "image": "ubuntu_jammy",
                  "root_volume": [
                    {
                      "delete_on_termination": false
                    }
                  ],
                  "tags": [
                    "hello",
                    "public"
                  ],
                  "type": "DEV1-S"
                }
              dependencies:
                scaleway_instance_volume.data: |-
                    {
                      "size_in_gb": 100,
                      "type": "b_ssd"
                    }
            - name: web
              manifest: |-
                {
                  "image": "f974feac-abae-4365-b988-8ec7d1cec10d",
                  "ip_id": "${scaleway_instance_ip.ip.id}",
                  "tags": [
                    "hello",
                    "public"
                  ],
                  "type": "DEV1-S"
                }
              references:
                ip_id: scaleway_instance_ip.ip.id
              dependencies:
                scaleway_instance_ip.ip: '{}'
            - name: web
              manifest: |-
                {
                  "image": "ubuntu_jammy",
                  "security_group_id": "${scaleway_instance_security_group.www.id}",
                  "type": "DEV1-S"
                }
              references:
                security_group_id: scaleway_instance_security_group.www.id
              dependencies:
                scaleway_instance_security_group.www: |-
                    {
                      "inbound_default_policy": "drop",
                      "inbound_rule": [
                        {
                          "action": "accept",
                          "ip": "212.47.225.64",
                          "port": "22"
                        },
                        {
                          "action": "accept",
                          "port": "80"
                        },
                        {
                          "action": "accept",
                          "port": "443"
                        }
                      ],
                      "outbound_default_policy": "accept",
                      "outbound_rule": [
                        {
                          "action": "drop",
                          "ip_range": "10.20.0.0/24"
                        }
                      ]
                    }
            - name: web
              manifest: |-
                {
                  "image": "ubuntu_jammy",
                  "type": "DEV1-S",
                  "user_data": {
                    "cloud-init": "${file(\"${path.module}/cloud-init.yml\")}",
                    "foo": "bar"
                  }
                }
            - name: base
              manifest: |-
                {
                  "image": "ubuntu_jammy",
                  "private_network": [
                    {
                      "pn_id": "${scaleway_vpc_private_network.pn01.id}"
                    }
                  ],
                  "type": "DEV1-S"
                }
              references:
                private_network.pn_id: scaleway_vpc_private_network.pn01.id
              dependencies:
                scaleway_vpc_private_network.pn01: |-
                    {
                      "name": "private_network_instance"
                    }
            - name: image
              manifest: |-
                {
                  "image": "ubuntu_jammy",
                  "root_volume": [
                    {
                      "size_in_gb": 100,
                      "volume_type": "b_ssd"
                    }
                  ],
                  "type": "PRO2-XXS"
                }
            - name: from_snapshot
              manifest: |-
                {
                  "root_volume": [
                    {
                      "volume_id": "${scaleway_instance_volume.from_snapshot.id}"
                    }
                  ],
                  "type": "PRO2-XXS"
                }
              references:
                root_volume.volume_id: scaleway_instance_volume.from_snapshot.id
              dependencies:
                scaleway_instance_volume.from_snapshot: |-
                    {
                      "from_snapshot_id": "${data.scaleway_instance_snapshot.snapshot.id}",
                      "type": "b_ssd"
                    }
            - name: server
              manifest: |-
                {
                  "image": "ubuntu_jammy",
                  "root_volume": [
                    {
                      "sbs_iops": 15000,
                      "size_in_gb": 50,
                      "volume_type": "sbs_volume"
                    }
                  ],
                  "type": "PLAY2-MICRO"
                }
        argumentDocs:
            additional_volume_ids: |-
                - (Optional) The additional volumes
                attached to the server. Updates to this field will trigger a stop/start of the server.
            address: '- The address of the IP'
            boot_type: '- The boot Type of the server. Possible values are: local, bootscript or rescue.'
            bootscript_id: (Deprecated) - The ID of the bootscript to use  (set boot_type to bootscript).
            delete_on_termination: '- (Defaults to true) Forces deletion of the root volume on instance termination.'
            enable_dynamic_ip: '- (Defaults to false) If true a dynamic IP will be attached to the server.'
            enable_ipv6: |-
                - (Defaults to false) Determines if IPv6 is enabled for the server. Useful only with routed_ip_enabled as false, otherwise ipv6 is always supported.
                Deprecated: Please use a scaleway_instance_ip with a routed_ipv6 type.
            id: '- The ID of the server.'
            image: |-
                - (Optional) The UUID or the label of the base image used by the server. You can use this endpoint
                to find either the right label or the right local image ID for a given type. Optional when creating an instance with an existing root volume.
            ip_id: '- (Optional) The ID of the reserved IP that is attached to the server.'
            ip_ids: '- (Optional) List of ID of reserved IPs that are attached to the server. Cannot be used with ip_id.'
            ipv6_address: |-
                - The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )
                Deprecated: Please use a scaleway_instance_ip with a routed_ipv6 type.
            ipv6_gateway: |-
                - The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )
                Deprecated: Please use a scaleway_instance_ip with a routed_ipv6 type.
            ipv6_prefix_length: |-
                - The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )
                Deprecated: Please use a scaleway_instance_ip with a routed_ipv6 type.
            mac_address: The private NIC MAC address.
            name: '- (Optional) The name of the server.'
            organization_id: '- The organization ID the server is associated with.'
            placement_group_id: '- (Optional) The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-security-groups-update-a-security-group the server is attached to.'
            placement_group_policy_respected: '- True when the placement group policy is respected.'
            pn_id: '- (Required) The private network ID where to connect.'
            private_ip: '- The Scaleway internal IP address of the server.'
            private_network: |-
                - (Optional) The private network associated with the server.
                Use the pn_id key to attach a private_network on your instance.
            project_id: '- (Defaults to provider project_id) The ID of the project the server is associated with.'
            public_ip: '- The public IP address of the server (Deprecated use public_ips instead).'
            public_ips: '- The list of public IPs of the server.'
            replace_on_type_change: '- (Defaults to false) If true, the server will be replaced if type is changed. Otherwise, the server will migrate.'
            root_volume: '- (Optional) Root volume attached to the server on creation.'
            routed_ip_enabled: '- (Defaults to true) If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.'
            sbs_iops: '- (Optional) Choose IOPS of your sbs volume, has to be used with sbs_volume for root volume type.'
            security_group_id: '- (Optional) The security group the server is attached to.'
            size_in_gb: |-
                - (Required) Size of the root volume in gigabytes.
                To find the right size use this endpoint and
                check the volumes_constraint.{min|max}_size (in bytes) for your commercial_type.
                Updates to this field will recreate a new resource.
            state: '- (Defaults to started) The state of the server. Possible values are: started, stopped or standby.'
            status: The private NIC state.
            tags: '- (Optional) The tags associated with the server.'
            type: |-
                - (Required) The commercial type of the server.
                You find all the available types on the pricing page.
                Updates to this field will migrate the server, local storage constraint must be respected. More info.
                Use replace_on_type_change to trigger replacement instead of migration.
            user_data: |-
                - (Optional) The user data associated with the server.
                Use the cloud-init key to use cloud-init on your instance.
                You can define values using:
            volume_id: '- (Optional) The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.'
            volume_type: '- (Optional) Volume type of root volume, can be b_ssd, l_ssd or sbs_volume, default value depends on server type'
            zone: '- (Defaults to provider zone) The zone in which the server should be created.'
        importStatements: []
    scaleway_instance_snapshot:
        subCategory: Instances
        name: scaleway_instance_snapshot
        title: scaleway_instance_snapshot
        examples:
            - name: main
              manifest: |-
                {
                  "name": "some-snapshot-name",
                  "volume_id": "11111111-1111-1111-1111-111111111111"
                }
            - name: main
              manifest: |-
                {
                  "depends_on": [
                    "${scaleway_instance_server.main}"
                  ],
                  "type": "unified",
                  "volume_id": "${scaleway_instance_volume.main.id}"
                }
              references:
                volume_id: scaleway_instance_volume.main.id
              dependencies:
                scaleway_instance_server.main: |-
                    {
                      "additional_volume_ids": [
                        "${scaleway_instance_volume.main.id}"
                      ],
                      "image": "ubuntu_jammy",
                      "root_volume": [
                        {
                          "size_in_gb": 10,
                          "volume_type": "l_ssd"
                        }
                      ],
                      "type": "DEV1-S"
                    }
                scaleway_instance_volume.main: |-
                    {
                      "size_in_gb": 10,
                      "type": "l_ssd"
                    }
            - name: snapshot
              manifest: |-
                {
                  "import": [
                    {
                      "bucket": "${scaleway_object.qcow.bucket}",
                      "key": "${scaleway_object.qcow.key}"
                    }
                  ],
                  "type": "unified"
                }
              references:
                import.bucket: scaleway_object.qcow.bucket
                import.key: scaleway_object.qcow.key
              dependencies:
                scaleway_object.qcow: |-
                    {
                      "bucket": "${scaleway_object_bucket.bucket.name}",
                      "file": "myqcow.qcow2",
                      "key": "server.qcow2"
                    }
                scaleway_object_bucket.bucket: |-
                    {
                      "name": "snapshot-qcow-import"
                    }
        argumentDocs:
            bucket: '- Bucket name containing qcow2 to import'
            created_at: '- The snapshot creation time.'
            id: '- The ID of the snapshot.'
            import: '- (Optional) Import a snapshot from a qcow2 file located in a bucket'
            key: '- Key of the object to import'
            name: '- (Optional) The name of the snapshot. If not provided it will be randomly generated.'
            organization_id: '- The organization ID the snapshot is associated with.'
            project_id: |-
                - (Defaults to provider project_id) The ID of the project the snapshot is
                associated with.
            size_in_gb: '- (Optional) The size of the snapshot.'
            tags: '- (Optional) A list of tags to apply to the snapshot.'
            type: |-
                - (Optional) The snapshot's volume type.  The possible values are: b_ssd (Block SSD), l_ssd (Local SSD) and unified.
                Updates to this field will recreate a new resource.
            volume_id: '- (Optional) The ID of the volume to take a snapshot from.'
            zone: |-
                - (Defaults to provider zone) The zone in which
                the snapshot should be created.
        importStatements: []
    scaleway_instance_user_data:
        subCategory: Instances
        name: scaleway_instance_user_data
        title: scaleway_instance_user_data
        examples:
            - name: main
              manifest: |-
                {
                  "key": "foo",
                  "server_id": "${scaleway_instance_server.main.id}",
                  "value": "bar"
                }
              references:
                server_id: scaleway_instance_server.main.id
              dependencies:
                scaleway_instance_server.main: |-
                    {
                      "image": "ubuntu_focal",
                      "type": "DEV1-S"
                    }
            - name: data
              manifest: |-
                {
                  "for_each": "${var.user_data}",
                  "key": "${each.key}",
                  "server_id": "${scaleway_instance_server.main.id}",
                  "value": "${each.value}"
                }
              references:
                for_each: var.user_data
                key: each.key
                server_id: scaleway_instance_server.main.id
                value: each.value
              dependencies:
                scaleway_instance_server.main: |-
                    {
                      "image": "ubuntu_focal",
                      "type": "DEV1-S"
                    }
        argumentDocs:
            id: '- The ID of the instance''s user data.'
            key: '- (Required) Key of the user data.'
            server_id: '- (Required) The ID of the server associated with.'
            value: '- (Required) Value associated with your key'
            zone: '- (Defaults to provider zone) The zone in which the server should be created.'
        importStatements: []
    scaleway_instance_volume:
        subCategory: Instances
        name: scaleway_instance_volume
        title: scaleway_instance_volume
        examples:
            - name: server_volume
              manifest: |-
                {
                  "name": "some-volume-name",
                  "size_in_gb": 20,
                  "type": "l_ssd"
                }
        argumentDocs:
            from_snapshot_id: '- (Optional) If set, the new volume will be created from this snapshot. Only one of size_in_gb and from_snapshot_id should be specified.'
            id: '- The ID of the volume.'
            name: '- (Optional) The name of the volume. If not provided it will be randomly generated.'
            organization_id: '- The organization ID the volume is associated with.'
            project_id: '- (Defaults to provider project_id) The ID of the project the volume is associated with.'
            server_id: '- The id of the associated server.'
            size_in_gb: '- (Optional) The size of the volume. Only one of size_in_gb and from_snapshot_id should be specified.'
            tags: '- (Optional) A list of tags to apply to the volume.'
            type: '- (Required) The type of the volume. The possible values are: b_ssd (Block SSD), l_ssd (Local SSD), scratch (Local Scratch SSD).'
            zone: '- (Defaults to provider zone) The zone in which the volume should be created.'
        importStatements: []
    scaleway_iot_device:
        subCategory: IoT Hub
        name: scaleway_iot_device
        title: scaleway_iot_device
        examples:
            - name: main
              manifest: |-
                {
                  "hub_id": "${scaleway_iot_hub.main.id}",
                  "name": "test-iot"
                }
              references:
                hub_id: scaleway_iot_hub.main.id
              dependencies:
                scaleway_iot_hub.main: |-
                    {
                      "name": "test-iot",
                      "product_plan": "plan_shared"
                    }
            - name: main
              manifest: |-
                {
                  "certificate": [
                    {
                      "crt": "${data.local_file.device_cert.content}"
                    }
                  ],
                  "hub_id": "${scaleway_iot_hub.main.id}",
                  "name": "test-iot"
                }
              references:
                certificate.crt: data.local_file.device_cert.content
                hub_id: scaleway_iot_hub.main.id
              dependencies:
                scaleway_iot_hub.main: |-
                    {
                      "name": "test-iot",
                      "product_plan": "plan_shared"
                    }
        argumentDocs:
            allow_insecure: '- (Optional) Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.'
            allow_multiple_connections: '- (Optional) Allow more than one simultaneous connection using the same device credentials.'
            certificate: '- The certificate bundle of the device.'
            certificate.crt: '- (Optional) The certificate of the device, either generated by Scaleway or provided.'
            created_at: '- The date and time the device was created.'
            description: '- (Optional) The description of the IoT device (e.g. living room).'
            hub_id: '- (Required) The ID of the hub on which this device will be created.'
            id: '- The ID of the device.'
            is_connected: '- The current connection status of the device.'
            key: '- The private key of the device, in case it is generated by Scaleway.'
            last_activity_at: '- The last MQTT activity of the device.'
            message_filters: '- (Optional) Rules that define which messages are authorized or denied based on their topic.'
            name: '- (Required) The name of the IoT device you want to create (e.g. my-device).'
            policy: (Optional) Filtering policy (eg accept or reject)
            publish: '- (Optional) Rules used to restrict topics the device can publish to.'
            status: '- The current status of the device.'
            subscribe: '- (Optional) Rules used to restrict topics the device can subscribe to.'
            topics: (Optional) List of topics to match (eg foo/bar/+/baz/#)
            updated_at: '- The date and time the device resource was updated.'
        importStatements: []
    scaleway_iot_hub:
        subCategory: IoT Hub
        name: scaleway_iot_hub
        title: scaleway_iot_hub
        examples:
            - name: main
              manifest: |-
                {
                  "name": "test-iot",
                  "product_plan": "plan_shared"
                }
        argumentDocs:
            connected_device_count: '- The current number of connected devices in the Hub.'
            created_at: '- The date and time the Hub was created.'
            device_count: '- The number of registered devices in the Hub.'
            enabled: '- (Optional) Wether the IoT Hub instance should be enabled or not.'
            endpoint: '- The MQTT network endpoint to connect MQTT devices to.'
            id: '- The ID of the Hub.'
            mqtt_ca: '- The MQTT certificat content'
            mqtt_ca_url: '- The MQTT ca url'
            name: '- (Required) The name of the IoT Hub instance you want to create (e.g. my-hub).'
            product_plan: '- (Required) Product plan to create the hub, see documentation for available product plans (e.g. plan_shared)'
            project_id: '- (Defaults to provider project_id) The ID of the project the IoT Hub Instance is associated with.'
            region: '- (Defaults to provider region) The region in which the Database Instance should be created.'
            status: '- The current status of the Hub.'
            updated_at: '- The date and time the Hub resource was updated.'
        importStatements: []
    scaleway_iot_network:
        subCategory: IoT Hub
        name: scaleway_iot_network
        title: scaleway_iot_network
        examples:
            - name: main
              manifest: |-
                {
                  "hub_id": "${scaleway_iot_hub.main.id}",
                  "name": "main",
                  "type": "sigfox"
                }
              references:
                hub_id: scaleway_iot_hub.main.id
              dependencies:
                scaleway_iot_hub.main: |-
                    {
                      "name": "main",
                      "product_plan": "plan_shared"
                    }
        argumentDocs:
            created_at: '- The date and time the Network was created.'
            endpoint: '- The endpoint to use when interacting with the network.'
            hub_id: '- (Required) The hub ID to which the Network will be attached to.'
            id: '- The ID of the Network.'
            name: '- (Required) The name of the IoT Network you want to create (e.g. my-net).'
            region: '- (Defaults to provider region) The region in which the Network is attached to.'
            secret: '- The endpoint key to keep secret.'
            topic_prefix: '- (Optional) The prefix that will be prepended to all topics for this Network.'
            type: '- (Required) The network type to create (e.g. sigfox).'
        importStatements: []
    scaleway_iot_route:
        subCategory: IoT Hub
        name: scaleway_iot_route
        title: scaleway_iot_route
        examples:
            - name: main
              manifest: |-
                {
                  "database": [
                    {
                      "dbname": "rdb",
                      "host": "${scaleway_rdb_instance.iot.endpoint_ip}",
                      "password": "${scaleway_rdb_instance.iot.password}",
                      "port": "${scaleway_rdb_instance.iot.endpoint_port}",
                      "query": "INSERT INTO measurements(\n\tpush_time,\n\treport_time,\n\tstation_id,\n\ttemperature,\n\thumidity\n) VALUES (\n\tNOW(),\n\tTIMESTAMP 'epoch' + (($PAYLOAD::jsonb-\u003e'last_reported')::integer * INTERVAL '1 second'),\n\t($PAYLOAD::jsonb-\u003e'station_id')::uuid,\n\t($PAYLOAD::jsonb-\u003e'temperature')::decimal,\n\t($PAYLOAD::jsonb-\u003e'humidity'):decimal:\n);\n",
                      "username": "${scaleway_rdb_instance.iot.user_name}"
                    }
                  ],
                  "hub_id": "${scaleway_iot_hub.main.id}",
                  "name": "default",
                  "topic": "#"
                }
              references:
                database.host: scaleway_rdb_instance.iot.endpoint_ip
                database.password: scaleway_rdb_instance.iot.password
                database.port: scaleway_rdb_instance.iot.endpoint_port
                database.username: scaleway_rdb_instance.iot.user_name
                hub_id: scaleway_iot_hub.main.id
              dependencies:
                scaleway_iot_hub.main: |-
                    {
                      "name": "main",
                      "product_plan": "plan_shared"
                    }
                scaleway_rdb_instance.iot: |-
                    {
                      "engine": "PostgreSQL-12",
                      "name": "iot",
                      "node_type": "db-dev-s",
                      "password": "T3stP4ssw0rdD0N0tUs3!",
                      "user_name": "root"
                    }
            - name: main
              manifest: |-
                {
                  "hub_id": "${scaleway_iot_hub.main.id}",
                  "name": "main",
                  "s3": [
                    {
                      "bucket_name": "${scaleway_object_bucket.main.name}",
                      "bucket_region": "${scaleway_object_bucket.main.region}",
                      "object_prefix": "foo",
                      "strategy": "per_topic"
                    }
                  ],
                  "topic": "#"
                }
              references:
                hub_id: scaleway_iot_hub.main.id
                s3.bucket_name: scaleway_object_bucket.main.name
                s3.bucket_region: scaleway_object_bucket.main.region
              dependencies:
                scaleway_iot_hub.main: |-
                    {
                      "name": "main",
                      "product_plan": "plan_shared"
                    }
                scaleway_object_bucket.main: |-
                    {
                      "name": "my_awesome-bucket",
                      "region": "fr-par"
                    }
            - name: main
              manifest: |-
                {
                  "hub_id": "${scaleway_iot_hub.main.id}",
                  "name": "main",
                  "rest": [
                    {
                      "headers": {
                        "X-awesome-header": "my-awesome-value"
                      },
                      "uri": "http://scaleway.com",
                      "verb": "get"
                    }
                  ],
                  "topic": "#"
                }
              references:
                hub_id: scaleway_iot_hub.main.id
              dependencies:
                scaleway_iot_hub.main: |-
                    {
                      "name": "main",
                      "product_plan": "plan_shared"
                    }
        argumentDocs:
            created_at: '- The date and time the Route was created.'
            database: '- (Optional) Configuration block for the database routes. See  product documentation for a better understanding of the parameters.'
            database.dbname: '- (Required) The database name (e.g. measurements).'
            database.host: '- (Required) The database hostname. Can be an IP or a FQDN.'
            database.password: '- (Required) The database password.'
            database.port: '- (Required) The database port (e.g. 5432)'
            database.query: '- (Required) The SQL query that will be executed when receiving a message ($TOPIC and $PAYLOAD variables are available, see documentation, e.g. INSERT INTO mytable(date, topic, value) VALUES (NOW(), $TOPIC, $PAYLOAD)).'
            database.username: '- (Required) The database username.'
            hub_id: '- (Required) The hub ID to which the Route will be attached to.'
            id: '- The ID of the Route.'
            name: '- (Required) The name of the IoT Route you want to create (e.g. my-route).'
            region: '- (Defaults to provider region) The region in which the Route is attached to.'
            rest: (Optional) - Configuration block for the rest routes. See product documentation for a better understanding of the parameters.
            rest.headers: '- (Required) a map of the extra headers to send with the HTTP call (e.g. X-Header = Value).'
            rest.uri: '- (Required) The URI of the Rest endpoint (e.g. https://internal.mycompany.com/ingest/mqttdata).'
            rest.verb: '- (Required) The HTTP Verb used to call Rest URI (e.g. post).'
            s3: (Optional) - Configuration block for the S3 routes. See product documentation for a better understanding of the parameters.
            s3.bucket_name: (Required) - The name of the S3 route's destination bucket (e.g. my-object-storage).
            s3.bucket_region: (Required) - The region of the S3 route's destination bucket (e.g. fr-par).
            s3.object_prefix: (Required) - The string to prefix object names with (e.g. mykeyprefix-).
            s3.strategy: (Required) - How the S3 route's objects will be created (e.g. per_topic). See documentation for behaviour details.
            topic: '- (Required) The topic the Route subscribes to, wildcards allowed (e.g. thelab/+/temperature/#).'
        importStatements: []
    scaleway_ipam_ip:
        subCategory: IPAM
        name: scaleway_ipam_ip
        title: scaleway_ipam_ip
        examples:
            - name: ip01
              manifest: |-
                {
                  "source": [
                    {
                      "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                    }
                  ]
                }
              references:
                source.private_network_id: scaleway_vpc_private_network.pn01.id
              dependencies:
                scaleway_vpc.vpc01: |-
                    {
                      "name": "my vpc"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "ipv4_subnet": [
                        {
                          "subnet": "172.16.32.0/22"
                        }
                      ],
                      "vpc_id": "${scaleway_vpc.vpc01.id}"
                    }
            - name: ip01
              manifest: |-
                {
                  "address": "172.16.32.7",
                  "source": [
                    {
                      "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                    }
                  ]
                }
              references:
                source.private_network_id: scaleway_vpc_private_network.pn01.id
              dependencies:
                scaleway_vpc.vpc01: |-
                    {
                      "name": "my vpc"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "ipv4_subnet": [
                        {
                          "subnet": "172.16.32.0/22"
                        }
                      ],
                      "vpc_id": "${scaleway_vpc.vpc01.id}"
                    }
            - name: ip01
              manifest: |-
                {
                  "is_ipv6": true,
                  "source": [
                    {
                      "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                    }
                  ]
                }
              references:
                source.private_network_id: scaleway_vpc_private_network.pn01.id
              dependencies:
                scaleway_vpc.vpc01: |-
                    {
                      "name": "my vpc"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "ipv6_subnets": [
                        {
                          "subnet": "fd46:78ab:30b8:177c::/64"
                        }
                      ],
                      "vpc_id": "${scaleway_vpc.vpc01.id}"
                    }
        argumentDocs:
            address: '- (Optional) Request a specific IP in the specified source pool.'
            created_at: '- Date and time of IP''s creation (RFC 3339 format).'
            depends_on: relations, or moving the declarations to another Terraform module. Otherwise, other resources may take the requested address first, blocking the whole Terraform setup. Static IPs should be avoided unless necessary, as we cannot guarantee full automation. We recommend to use DNS, or to not request a specific IP.
            hostname: The reverse domain name.
            id: '- The ID of the IP in IPAM.'
            is_ipv6: '- (Optional) Defines whether to request an IPv6 address instead of IPv4.'
            mac_address: '- The MAC address of the resource the IP is attached to.'
            name: '- The name of the resource the IP is attached to.'
            private_network_id: '- The Private Network of the IP (if the IP is a private IP).'
            project_id: '- (Defaults to provider project_id) The ID of the Project the IP is associated with.'
            region: '- (Defaults to provider region) The region of the IP.'
            resource: '- The IP resource.'
            reverses: '- The reverse DNS for this IP.'
            source: '- (Required) The source in which to book the IP.'
            subnet_id: '- The Private Network subnet of the IP (if the IP is a private IP).'
            tags: '- (Optional) The tags associated with the IP.'
            type: '- The type of resource the IP is attached to.'
            updated_at: '- Date and time of IP''s last update (RFC 3339 format).'
            zonal: '- The zone of the IP (if the IP is public and zoned, rather than private and/or regional)'
            zone: '- The zone of the IP.'
        importStatements: []
    scaleway_ipam_ip_reverse_dns:
        subCategory: IPAM
        name: scaleway_ipam_ip_reverse_dns
        title: scaleway_ipam_ip_reverse_dns
        examples:
            - name: base
              manifest: |-
                {
                  "address": "${cidrhost(data.scaleway_ipam_ip.ipam01.address_cidr, 42)}",
                  "hostname": "example.com",
                  "ipam_ip_id": "${data.scaleway_ipam_ip.ipam01.id}"
                }
              references:
                ipam_ip_id: data.scaleway_ipam_ip.ipam01.id
              dependencies:
                scaleway_domain_record.tf_AAAA: |-
                    {
                      "data": "${cidrhost(data.scaleway_ipam_ip.ipam01.address_cidr, 42)}",
                      "dns_zone": "example.com",
                      "name": "",
                      "priority": 1,
                      "ttl": 3600,
                      "type": "AAAA"
                    }
                scaleway_instance_ip.ip01: |-
                    {
                      "type": "routed_ipv6"
                    }
                scaleway_instance_server.srv01: |-
                    {
                      "image": "ubuntu_jammy",
                      "ip_ids": [
                        "${scaleway_instance_ip.ip01.id}"
                      ],
                      "name": "tf-tests-instance-server-ips",
                      "state": "stopped",
                      "type": "PRO2-XXS"
                    }
        argumentDocs:
            address: '- (Required) The IP corresponding to the hostname.'
            hostname: '- (Required) The reverse domain name.'
            id: '- The ID of the IPAM IP for which reverse DNS is configured.'
            ipam_ip_id: '- (Required) The IPAM IP ID.'
            region: '- (Defaults to provider region) The region of the IP reverse DNS.'
        importStatements: []
    scaleway_job_definition:
        subCategory: Jobs
        name: scaleway_job_definition
        title: scaleway_job_definition
        examples:
            - name: main
              manifest: |-
                {
                  "command": "ls",
                  "cpu_limit": 140,
                  "cron": [
                    {
                      "schedule": "5 4 1 * *",
                      "timezone": "Europe/Paris"
                    }
                  ],
                  "env": {
                    "foo": "bar"
                  },
                  "image_uri": "docker.io/alpine:latest",
                  "memory_limit": 256,
                  "name": "testjob",
                  "timeout": "10m"
                }
        argumentDocs:
            command: '- (Optional) The command that will be run in the container if specified.'
            cpu_limit: '- (Required) The amount of vCPU computing resources to allocate to each container running the job.'
            cron: '- (Optional) The cron configuration'
            description: '- (Optional) The description of the job'
            env: '- (Optional) The environment variables of the container.'
            id: '- The ID of the Job Definition.'
            image_uri: '- (Required) The uri of the container image that will be used for the job run.'
            memory_limit: '- (Required) The memory computing resources in MB to allocate to each container running the job.'
            name: '- (Optional) The name of the job.'
            project_id: '- (Defaults to provider project_id) The ID of the project the Job is associated with.'
            region: '- (Defaults to provider region) The region of the Job.'
            schedule: '- Cron format string.'
            timeout: '- (Optional) The job run timeout, in Go Time format (ex: 2h30m25s)'
            timezone: '- The timezone, must be a canonical TZ identifier as found in this list.'
        importStatements: []
    scaleway_k8s_cluster:
        subCategory: Kubernetes
        name: scaleway_k8s_cluster
        title: scaleway_k8s_cluster
        examples:
            - name: cluster
              manifest: |-
                {
                  "cni": "cilium",
                  "delete_additional_resources": false,
                  "name": "tf-cluster",
                  "private_network_id": "${scaleway_vpc_private_network.pn.id}",
                  "version": "1.29.1"
                }
              references:
                private_network_id: scaleway_vpc_private_network.pn.id
              dependencies:
                scaleway_k8s_pool.pool: |-
                    {
                      "cluster_id": "${scaleway_k8s_cluster.cluster.id}",
                      "name": "tf-pool",
                      "node_type": "DEV1-M",
                      "size": 1
                    }
                scaleway_vpc_private_network.pn: '{}'
            - name: cluster
              manifest: |-
                {
                  "cni": "kilo",
                  "delete_additional_resources": false,
                  "name": "tf-cluster",
                  "type": "multicloud",
                  "version": "1.29.1"
                }
              dependencies:
                scaleway_k8s_pool.pool: |-
                    {
                      "cluster_id": "${scaleway_k8s_cluster.cluster.id}",
                      "min_size": 0,
                      "name": "tf-pool",
                      "node_type": "external",
                      "size": 0
                    }
            - name: cluster
              manifest: |-
                {
                  "autoscaler_config": [
                    {
                      "balance_similar_node_groups": true,
                      "disable_scale_down": false,
                      "estimator": "binpacking",
                      "expander": "random",
                      "expendable_pods_priority_cutoff": -5,
                      "ignore_daemonsets_utilization": true,
                      "scale_down_delay_after_add": "5m"
                    }
                  ],
                  "cni": "calico",
                  "delete_additional_resources": false,
                  "description": "cluster made in terraform",
                  "name": "tf-cluster",
                  "private_network_id": "${scaleway_vpc_private_network.pn.id}",
                  "tags": [
                    "terraform"
                  ],
                  "version": "1.29.1"
                }
              references:
                private_network_id: scaleway_vpc_private_network.pn.id
              dependencies:
                scaleway_k8s_pool.pool: |-
                    {
                      "autohealing": true,
                      "autoscaling": true,
                      "cluster_id": "${scaleway_k8s_cluster.cluster.id}",
                      "max_size": 5,
                      "min_size": 1,
                      "name": "tf-pool",
                      "node_type": "DEV1-M",
                      "size": 3
                    }
                scaleway_vpc_private_network.pn: '{}'
            - name: cluster
              manifest: |-
                {
                  "cni": "cilium",
                  "delete_additional_resources": false,
                  "name": "tf-cluster",
                  "private_network_id": "${scaleway_vpc_private_network.pn.id}",
                  "version": "1.29.1"
                }
              references:
                private_network_id: scaleway_vpc_private_network.pn.id
              dependencies:
                null_resource.kubeconfig: |-
                    {
                      "depends_on": [
                        "${scaleway_k8s_pool.pool}"
                      ],
                      "triggers": {
                        "cluster_ca_certificate": "${scaleway_k8s_cluster.cluster.kubeconfig[0].cluster_ca_certificate}",
                        "host": "${scaleway_k8s_cluster.cluster.kubeconfig[0].host}",
                        "token": "${scaleway_k8s_cluster.cluster.kubeconfig[0].token}"
                      }
                    }
                scaleway_k8s_pool.pool: |-
                    {
                      "cluster_id": "${scaleway_k8s_cluster.cluster.id}",
                      "name": "tf-pool",
                      "node_type": "DEV1-M",
                      "size": 1
                    }
                scaleway_vpc_private_network.pn: '{}'
            - name: cluster
              manifest: |-
                {
                  "cni": "cilium",
                  "delete_additional_resources": false,
                  "name": "tf-cluster",
                  "private_network_id": "${scaleway_vpc_private_network.pn.id}",
                  "version": "1.29.1"
                }
              references:
                private_network_id: scaleway_vpc_private_network.pn.id
              dependencies:
                helm_release.nginx_ingress: |-
                    {
                      "chart": "ingress-nginx",
                      "name": "nginx-ingress",
                      "namespace": "kube-system",
                      "repository": "https://kubernetes.github.io/ingress-nginx",
                      "set": [
                        {
                          "name": "controller.service.loadBalancerIP",
                          "value": "${scaleway_lb_ip.nginx_ip.ip_address}"
                        },
                        {
                          "name": "controller.config.use-proxy-protocol",
                          "value": "true"
                        },
                        {
                          "name": "controller.service.annotations.service\\.beta\\.kubernetes\\.io/scw-loadbalancer-proxy-protocol-v2",
                          "value": "true"
                        },
                        {
                          "name": "controller.service.annotations.service\\.beta\\.kubernetes\\.io/scw-loadbalancer-zone",
                          "value": "${scaleway_lb_ip.nginx_ip.zone}"
                        },
                        {
                          "name": "controller.service.externalTrafficPolicy",
                          "value": "Local"
                        }
                      ]
                    }
                null_resource.kubeconfig: |-
                    {
                      "depends_on": [
                        "${scaleway_k8s_pool.pool}"
                      ],
                      "triggers": {
                        "cluster_ca_certificate": "${scaleway_k8s_cluster.cluster.kubeconfig[0].cluster_ca_certificate}",
                        "host": "${scaleway_k8s_cluster.cluster.kubeconfig[0].host}",
                        "token": "${scaleway_k8s_cluster.cluster.kubeconfig[0].token}"
                      }
                    }
                scaleway_k8s_pool.pool: |-
                    {
                      "cluster_id": "${scaleway_k8s_cluster.cluster.id}",
                      "name": "tf-pool",
                      "node_type": "DEV1-M",
                      "size": 1
                    }
                scaleway_lb_ip.nginx_ip: |-
                    {
                      "project_id": "${scaleway_k8s_cluster.cluster.project_id}",
                      "zone": "fr-par-1"
                    }
                scaleway_vpc_private_network.pn: '{}'
            - name: cluster
              manifest: |-
                {
                  "cni": "cilium",
                  "default_pool": [
                    {
                      "node_type": "DEV1-M",
                      "size": 1
                    }
                  ],
                  "name": "tf-cluster",
                  "version": "1.18.0"
                }
            - name: cluster
              manifest: |-
                {
                  "cni": "cilium",
                  "name": "tf-cluster",
                  "version": "1.18.0"
                }
              dependencies:
                scaleway_k8s_pool.default: |-
                    {
                      "cluster_id": "${scaleway_k8s_cluster.jack.id}",
                      "name": "default",
                      "node_type": "DEV1-M",
                      "size": 1
                    }
        argumentDocs:
            admission_plugins: '- (Optional) The list of admission plugins to enable on the cluster.'
            apiserver_cert_sans: '- (Optional) Additional Subject Alternative Names for the Kubernetes API server certificate'
            apiserver_url: '- The URL of the Kubernetes API server.'
            auto_upgrade: '- (Optional) The auto upgrade configuration.'
            autoscaler_config: '- (Optional) The configuration options for the Kubernetes cluster autoscaler.'
            balance_similar_node_groups: '- (Defaults to false) Detect similar node groups and balance the number of nodes between them.'
            client_id: '- (Required) A client id that all tokens must be issued for'
            cluster_ca_certificate: '- The CA certificate of the Kubernetes API server.'
            cni: |-
                - (Required) The Container Network Interface (CNI) for the Kubernetes cluster.
                ~> Important: Updates to this field will recreate a new resource.
            config_file: '- The raw kubeconfig file.'
            created_at: '- The creation date of the cluster.'
            default_pool: '- (Deprecated) See below.'
            delete_additional_resources: |-
                - (Required) Delete additional resources like block volumes, load-balancers and the cluster's private network (if empty) that were created in Kubernetes on cluster deletion.
                ~> Important: Setting this field to true means that you will lose all your cluster data and network configuration when you delete your cluster.
                If you prefer keeping it, you should instead set it as false.
            description: '- (Optional) A description for the Kubernetes cluster.'
            disable_scale_down: '- (Defaults to false) Disables the scale down feature of the autoscaler.'
            enable: |-
                - (Optional) Set to true to enable Kubernetes patch version auto upgrades.
                ~> Important: When enabling auto upgrades, the version field take a minor version like x.y (ie 1.18).
            estimator: '- (Defaults to binpacking) Type of resource estimator to be used in scale up.'
            expander: '- (Default to random) Type of node group expander to be used in scale up.'
            expendable_pods_priority_cutoff: '- (Defaults to -10) Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don''t cause scale up. Pods with null priority (PodPriority disabled) are non expendable.'
            feature_gates: '- (Optional) The list of feature gates to enable on the cluster.'
            groups_claim: '- (Optional) JWT claim to use as the user''s group'
            groups_prefix: '- (Optional) Prefix prepended to group claims'
            host: '- The URL of the Kubernetes API server.'
            id: '- The ID of the cluster.'
            ignore_daemonsets_utilization: '- (Defaults to false) Ignore DaemonSet pods when calculating resource utilization for scaling down.'
            issuer_url: '- (Required) URL of the provider which allows the API server to discover public signing keys'
            kapsule: or multicloud
            kapsule-dedicated-4: ', kapsule-dedicated-8 or kapsule-dedicated-16.'
            kubeconfig: ""
            maintenance_window_day: '- (Optional) The day of the auto upgrade maintenance window (monday to sunday, or any).'
            maintenance_window_start_hour: '- (Optional) The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).'
            max_graceful_termination_sec: '- (Defaults to 600) Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node'
            multicloud-dedicated-4: ', multicloud-dedicated-8 or multicloud-dedicated-16.'
            name: '- (Required) The name for the Kubernetes cluster.'
            open_id_connect_config: '- (Optional) The OpenID Connect configuration of the cluster'
            organization_id: '- The organization ID the cluster is associated with.'
            private_network_id: '- (Required) The ID of the private network of the cluster.'
            project_id: '- (Defaults to provider project_id) The ID of the project the cluster is associated with.'
            region: '- (Defaults to provider region) The region in which the cluster should be created.'
            required_claim: '- (Optional) Multiple key=value pairs that describes a required claim in the ID Token'
            scale_down_delay_after_add: '- (Defaults to 10m) How long after scale up that scale down evaluation resumes.'
            scale_down_unneeded_time: '- (Default to 10m) How long a node should be unneeded before it is eligible for scale down.'
            scale_down_utilization_threshold: '- (Defaults to 0.5) Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down'
            status: '- The status of the Kubernetes cluster.'
            tags: '- (Optional) The tags associated with the Kubernetes cluster.'
            token: '- The token to connect to the Kubernetes API server.'
            type: '- (Optional) The type of Kubernetes cluster. Possible values are:'
            updated_at: '- The last update date of the cluster.'
            upgrade_available: '- Set to true if a newer Kubernetes version is available.'
            username_claim: '- (Optional) JWT claim to use as the user name'
            username_prefix: '- (Optional) Prefix prepended to username'
            version: '- (Required) The version of the Kubernetes cluster.'
            wildcard_dns: '- The DNS wildcard that points to all ready nodes.'
        importStatements: []
    scaleway_k8s_pool:
        subCategory: Kubernetes
        name: scaleway_k8s_pool
        title: scaleway_k8s_pool
        examples:
            - name: bill
              manifest: |-
                {
                  "autohealing": true,
                  "autoscaling": true,
                  "cluster_id": "${scaleway_k8s_cluster.jack.id}",
                  "container_runtime": "containerd",
                  "max_size": 10,
                  "min_size": 0,
                  "name": "bill",
                  "node_type": "DEV1-M",
                  "placement_group_id": "1267e3fd-a51c-49ed-ad12-857092ee3a3d",
                  "size": 3
                }
              references:
                cluster_id: scaleway_k8s_cluster.jack.id
              dependencies:
                scaleway_k8s_cluster.jack: |-
                    {
                      "cni": "cilium",
                      "name": "jack",
                      "version": "1.24.3"
                    }
            - name: pool
              manifest: |-
                {
                  "cluster_id": "${scaleway_k8s_cluster.cluster.id}",
                  "name": "placement_group",
                  "node_type": "gp1_xs",
                  "placement_group_id": "${scaleway_instance_placement_group.placement_group.id}",
                  "region": "${scaleway_k8s_cluster.cluster.region}",
                  "size": 1,
                  "zone": "${scaleway_instance_placement_group.placement_group.zone}"
                }
              references:
                cluster_id: scaleway_k8s_cluster.cluster.id
                placement_group_id: scaleway_instance_placement_group.placement_group.id
                region: scaleway_k8s_cluster.cluster.region
                zone: scaleway_instance_placement_group.placement_group.zone
              dependencies:
                scaleway_instance_placement_group.placement_group: |-
                    {
                      "name": "pool-placement-group",
                      "policy_mode": "optional",
                      "policy_type": "max_availability",
                      "zone": "nl-ams-1"
                    }
                scaleway_k8s_cluster.cluster: |-
                    {
                      "cni": "kilo",
                      "name": "placement_group",
                      "region": "fr-par",
                      "tags": [
                        "terraform-test",
                        "scaleway_k8s_cluster",
                        "placement_group"
                      ],
                      "type": "multicloud",
                      "version": "%s"
                    }
            - name: kubernetes_cluster_workers_1
              manifest: |-
                {
                  "autohealing": true,
                  "autoscaling": true,
                  "cluster_id": "${scaleway_k8s_cluster.kubernetes_cluster.id}",
                  "max_size": "10",
                  "min_size": "5",
                  "name": "${var.kubernetes_cluster_id}_${var.node_type}_1",
                  "node_type": "${var.node_type}",
                  "size": "5",
                  "wait_for_pool_ready": true
                }
              references:
                cluster_id: scaleway_k8s_cluster.kubernetes_cluster.id
        argumentDocs:
            autohealing: '- (Defaults to false) Enables the autohealing feature for this pool.'
            autoscaling: |-
                - (Defaults to false) Enables the autoscaling feature for this pool.
                ~> Important: When enabled, an update of the size will not be taken into account.
            cluster_id: '- (Required) The ID of the Kubernetes cluster on which this pool will be created.'
            container_runtime: |-
                - (Defaults to containerd) The container runtime of the pool.
                ~> Important: Updates to this field will recreate a new resource.
            created_at: '- The creation date of the pool.'
            current_size: '- The size of the pool at the time the terraform state was updated.'
            id: '- The ID of the pool.'
            kubelet_args: '- (Optional) The Kubelet arguments to be used by this pool'
            max_size: '- (Defaults to size) The maximum size of the pool, used by the autoscaling feature.'
            max_surge: '- (Defaults to 0) The maximum number of nodes to be created during the upgrade'
            max_unavailable: '- (Defaults to 1) The maximum number of nodes that can be not ready at the same time'
            min_size: '- (Defaults to 1) The minimum size of the pool, used by the autoscaling feature.'
            name: |-
                - (Required) The name for the pool.
                ~> Important: Updates to this field will recreate a new resource.
            node_type: '- (Required) The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). external is a special node type used to provision from other Cloud providers.'
            nodes: '- (List of) The nodes in the default pool.'
            placement_group_id: |-
                - (Optional) The placement group the nodes of the pool will be attached to.
                ~> Important: Updates to this field will recreate a new resource.
            public_ip: '- The public IPv4. (Deprecated, Please use the official Kubernetes provider and the kubernetes_nodes data source)'
            public_ip_disabled: |-
                - (Defaults to false) Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
                ~> Important: Updates to this field will recreate a new resource.
            public_ip_v6: '- The public IPv6. (Deprecated, Please use the official Kubernetes provider and the kubernetes_nodes data source)'
            region: '- (Defaults to provider region) The region in which the pool should be created.'
            root_volume_size_in_gb: '- (Optional) The size of the system volume of the nodes in gigabyte'
            root_volume_type: '- (Optional) System volume type of the nodes composing the pool'
            size: |-
                - (Required) The size of the pool.
                ~> Important: This field will only be used at creation if autoscaling is enabled.
            status: '- The status of the pool.'
            tags: '- (Optional) The tags associated with the pool.'
            updated_at: '- The last update date of the pool.'
            upgrade_policy: '- (Optional) The Pool upgrade policy'
            version: '- The version of the pool.'
            wait_for_pool_ready: '- (Defaults to false) Whether to wait for the pool to be ready.'
            zone: |-
                - (Defaults to provider zone) The zone in which the pool should be created.
                ~> Important: Updates to this field will recreate a new resource.
        importStatements: []
    scaleway_lb:
        subCategory: Load Balancers
        name: scaleway_lb
        title: scaleway_lb
        examples:
            - name: base
              manifest: |-
                {
                  "ip_ids": [
                    "${scaleway_lb_ip.main.id}"
                  ],
                  "type": "LB-S",
                  "zone": "${scaleway_lb_ip.main.zone}"
                }
              references:
                zone: scaleway_lb_ip.main.zone
              dependencies:
                scaleway_lb_ip.main: |-
                    {
                      "zone": "fr-par-1"
                    }
            - name: base
              manifest: |-
                {
                  "assign_flexible_ip": false,
                  "name": "private-lb",
                  "type": "LB-S"
                }
            - name: main
              manifest: |-
                {
                  "ip_ids": [
                    "${scaleway_lb_ip.v4.id}",
                    "${scaleway_lb_ip.v6.id}"
                  ],
                  "name": "ipv6-lb",
                  "type": "LB-S"
                }
              dependencies:
                scaleway_lb_ip.v4: '{}'
                scaleway_lb_ip.v6: |-
                    {
                      "is_ipv6": true
                    }
            - name: main
              manifest: |-
                {
                  "ip_ids": [
                    "${scaleway_lb_ip.v4.id}"
                  ],
                  "name": "my-lb",
                  "private_network": [
                    {
                      "ipam_ids": [
                        "${scaleway_ipam_ip.ip01.id}"
                      ],
                      "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                    }
                  ],
                  "type": "LB-S"
                }
              references:
                private_network.private_network_id: scaleway_vpc_private_network.pn01.id
              dependencies:
                scaleway_ipam_ip.ip01: |-
                    {
                      "address": "172.16.32.7",
                      "source": [
                        {
                          "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                        }
                      ]
                    }
                scaleway_lb_ip.v4: '{}'
                scaleway_vpc.vpc01: |-
                    {
                      "name": "my vpc"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "ipv4_subnet": [
                        {
                          "subnet": "172.16.32.0/22"
                        }
                      ],
                      "vpc_id": "${scaleway_vpc.vpc01.id}"
                    }
            - name: main
              manifest: |-
                {
                  "depends_on": [
                    "${scaleway_vpc_public_gateway.main}"
                  ],
                  "ip_id": "${scaleway_lb_ip.main.id}",
                  "name": "MyTest",
                  "private_network": [
                    {
                      "dhcp_config": true,
                      "private_network_id": "${scaleway_vpc_private_network.main.id}"
                    }
                  ],
                  "type": "LB-S"
                }
              references:
                ip_id: scaleway_lb_ip.main.id
                private_network.private_network_id: scaleway_vpc_private_network.main.id
              dependencies:
                scaleway_instance_server.main: |-
                    {
                      "enable_ipv6": false,
                      "image": "debian_bullseye",
                      "name": "Scaleway Terraform Provider",
                      "private_network": [
                        {
                          "pn_id": "${scaleway_vpc_private_network.main.id}"
                        }
                      ],
                      "type": "DEV1-S"
                    }
                scaleway_lb_ip.main: '{}'
                scaleway_vpc_gateway_network.main: |-
                    {
                      "cleanup_dhcp": true,
                      "dhcp_id": "${scaleway_vpc_public_gateway_dhcp.main.id}",
                      "enable_masquerade": true,
                      "gateway_id": "${scaleway_vpc_public_gateway.main.id}",
                      "private_network_id": "${scaleway_vpc_private_network.main.id}"
                    }
                scaleway_vpc_private_network.main: |-
                    {
                      "name": "private network with DHCP config"
                    }
                scaleway_vpc_public_gateway.main: |-
                    {
                      "ip_id": "${scaleway_vpc_public_gateway_ip.main.id}",
                      "name": "tf-test-public-gw",
                      "type": "VPC-GW-S"
                    }
                scaleway_vpc_public_gateway_dhcp.main: |-
                    {
                      "subnet": "10.0.0.0/24"
                    }
                scaleway_vpc_public_gateway_ip.main: '{}'
            - name: main
              manifest: |-
                {
                  "type": "LB-S",
                  "zone": "fr-par-1"
                }
            - name: main
              manifest: |-
                {
                  "ip_id": "${scaleway_lb_ip.main.id}",
                  "release_ip": false,
                  "type": "LB-S",
                  "zone": "fr-par-1"
                }
              references:
                ip_id: scaleway_lb_ip.main.id
              dependencies:
                scaleway_lb_ip.main: '{}'
        argumentDocs:
            assign_flexible_ip: '- (Optional) Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.'
            assign_flexible_ipv6: '- (Optional) Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.'
            description: '- (Optional) The description of the Load Balancer.'
            dhcp_config: '- (Deprecated) Please use ipam_ids. Set to true if you want to let DHCP assign IP addresses. See below.'
            id: '- The ID of the Load Balancer.'
            ip_address: '-  The Load Balancer public IPv4 address.'
            ip_id: '- (Deprecated) The ID of the associated Load Balancer IP. See below.'
            ip_ids: '- (Optional) The List of IP IDs to attach to the Load Balancer.'
            ipam_ids: '- (Optional) IPAM ID of a pre-reserved IP address to assign to the Load Balancer on this Private Network.'
            ipv6_address: '-  The Load Balancer public IPv6 address.'
            name: '- (Optional) The name of the Load Balancer.'
            organization_id: '- The ID of the Organization ID the Load Balancer is associated with.'
            private_network: will recreate the attachment.
            private_network_id: '- (Required) The ID of the Private Network to attach to.'
            project_id: '- (Defaults to provider project_id) The ID of the Project the Load Balancer is associated with.'
            release_ip: '- (Defaults to false) The release_ip allow the release of the IP address associated with the Load Balancer.'
            ssl_compatibility_level: '- (Optional) Enforces minimal SSL version (in SSL/TLS offloading context). Please check possible values.'
            static_config: '- (Deprecated) Please use ipam_ids. Define a local ip address of your choice for the load balancer instance.'
            tags: '- (Optional) The tags associated with the Load Balancer.'
            type: '- (Required) The type of the Load Balancer. Please check the migration section to upgrade the type.'
            zone: '- (Defaults to provider zone) The zone of the Load Balancer.'
        importStatements: []
    scaleway_lb_acl:
        subCategory: Load Balancers
        name: scaleway_lb_acl
        title: scaleway_lb_acl
        examples:
            - name: acl01
              manifest: |-
                {
                  "action": [
                    {
                      "type": "allow"
                    }
                  ],
                  "description": "Exclude well-known IPs",
                  "frontend_id": "${scaleway_lb_frontend.frt01.id}",
                  "index": 0,
                  "match": [
                    {
                      "ip_subnet": [
                        "192.168.0.1",
                        "192.168.0.2",
                        "192.168.10.0/24"
                      ]
                    }
                  ],
                  "name": "acl01"
                }
              references:
                frontend_id: scaleway_lb_frontend.frt01.id
        argumentDocs:
            action: '- (Required) Action to undertake when an ACL filter matches.'
            code: '- (Optional) The HTTP redirect code to use. Valid values are 301, 302, 303, 307 and 308.'
            description: '- (Optional) The ACL description.'
            frontend_id: '- (Required) The ID of the Load Balancer frontend to attach the ACL to.'
            http_filter: |-
                - (Optional) The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
                It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
                Possible values are: acl_http_filter_none, path_begin, path_end, http_header_match or regex.
            http_filter_option: '- (Optional) If you have http_filter at http_header_match, you can use this field to filter on the HTTP header''s value.'
            http_filter_value: |-
                - (Optional) A list of possible values to match for the given HTTP filter.
                Keep in mind that in the case of http_header_match the HTTP header field name is case insensitive.
            id: '- The ID of the Load Balancer ACL.'
            index: '- (Required) The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).'
            invert: '- (Optional) If set to true, the condition will be of type "unless".'
            ip_subnet: '- (Optional) A list of IPs, or CIDR v4/v6 addresses of the session client, to match.'
            match: '- (Required) The ACL match rule. At least ip_subnet or http_filter and http_filter_value are required.'
            name: '- (Optional) The ACL name. If not provided it will be randomly generated.'
            redirect: '- (Optional) Redirect parameters when using an ACL with redirect action.'
            target: '- (Optional) An URL can be used in case of a location redirect (e.g. https://scaleway.com will redirect to this same URL). A scheme name (e.g. https, http, ftp, git) will replace the request''s original scheme.'
            type: '- (Required) The action type. Possible values are: allow or deny or redirect.'
        importStatements: []
    scaleway_lb_backend:
        subCategory: Load Balancers
        name: scaleway_lb_backend
        title: scaleway_lb_backend
        examples:
            - name: backend01
              manifest: |-
                {
                  "forward_port": "80",
                  "forward_protocol": "http",
                  "lb_id": "${scaleway_lb.lb01.id}",
                  "name": "backend01"
                }
              references:
                lb_id: scaleway_lb.lb01.id
            - name: backend01
              manifest: |-
                {
                  "forward_port": "80",
                  "forward_protocol": "http",
                  "health_check_http": [
                    {
                      "uri": "www.test.com/health"
                    }
                  ],
                  "lb_id": "${scaleway_lb.lb01.id}",
                  "name": "backend01"
                }
              references:
                lb_id: scaleway_lb.lb01.id
        argumentDocs:
            code: '- (Default: 200) The expected HTTP status code.'
            failover_host: |-
                - (Optional) Scaleway S3 bucket website to be served if all backend servers are down.
                ~> Note: Only the host part of the Scaleway S3 bucket website is expected:
                e.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
            forward_port: '- (Required) User sessions will be forwarded to this port of backend servers.'
            forward_port_algorithm: '- (Default: roundrobin) Load balancing algorithm. Possible values are: roundrobin, leastconn and first.'
            forward_protocol: '- (Required) Backend protocol. Possible values are: tcp or http.'
            health_check_delay: '- (Default: 60s) Interval between two health check requests.'
            health_check_http: '- (Optional) This block enables HTTP health checks. Only one of health_check_tcp, health_check_http and health_check_https should be specified.'
            health_check_https: '- (Optional) This block enable HTTPS health checks. Only one of health_check_tcp, health_check_http and health_check_https should be specified.'
            health_check_max_retries: '- (Default: 2) Number of allowed failed health check requests before the backend server is marked as down.'
            health_check_port: '- (Default: forward_port) Port the health check requests will be sent to.'
            health_check_send_proxy: '- (Default: false) Defines whether proxy protocol should be activated for the health check.'
            health_check_tcp: '- (Optional) This block enables TCP health checks. Only one of health_check_tcp, health_check_http and health_check_https should be specified.'
            health_check_timeout: '- (Default: 30s) Timeout before we consider a health check request failed.'
            health_check_transient_delay: '- (Default: 0.5s) The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).'
            host_header: '- (Optional) The HTTP host header to use for health check requests.'
            id: '- The ID of the Load Balancer backend.'
            ignore_ssl_server_verify: '- (Default: false) Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.'
            lb_id: |-
                - (Required) The ID of the Load Balancer this backend is attached to.
                ~> Important: Updates to lb_id will recreate the backend.
            max_connections: '- (Optional) Maximum number of connections allowed per backend server.'
            max_retries: '- (Optional) Number of retries when a backend server connection fails.'
            method: '- (Default: GET) The HTTP method to use for health check requests.'
            name: '- (Optional) The name of the Load Balancer backend.'
            on_marked_down_action: '- (Default: none) Specify what action to take when a backend server is marked down. Possible values are: none and shutdown_sessions.'
            proxy_protocol: '- (Default: none) The type of PROXY protocol to enable (none, v1, v2, v2_ssl, v2_ssl_cn)'
            redispatch_attempt_count: '- (Optional) Whether to use another backend server on each attempt.'
            send_proxy_v2: '- DEPRECATED please use proxy_protocol instead - (Default: false) Enables PROXY protocol version 2.'
            server_ips: '- (Optional) List of backend server IP addresses. Addresses can be either IPv4 or IPv6.'
            sni: '- (Optional) The SNI to use for health check requests over SSL.'
            ssl_bridging: '- (Default: false) Enables SSL between the Load Balancer and its backend servers.'
            sticky_sessions: '- (Default: none) The type of sticky session. Possible values are: none, cookie and table.'
            sticky_sessions_cookie_name: '- (Optional) Cookie name for sticky sessions. Only applicable when sticky_sessions is set to cookie.'
            timeout_connect: '- (Optional) Maximum initial server connection establishment time. (e.g. 1s)'
            timeout_queue: '- (Optional) Maximum time for a request to be left pending in queue when max_connections is reached. (e.g.: 1s)'
            timeout_server: '- (Optional) Maximum server connection inactivity time. (e.g. 1s)'
            timeout_tunnel: '- (Optional) Maximum tunnel inactivity time. (e.g. 1s)'
            uri: '- (Required) The HTTP endpoint URL to call for health check requests.'
            zone: '- (Defaults to provider zone) The zone in which the Load Balancer was created.'
        importStatements: []
    scaleway_lb_certificate:
        subCategory: Load Balancers
        name: scaleway_lb_certificate
        title: scaleway_lb_certificate
        examples:
            - name: cert01
              manifest: |-
                {
                  "lb_id": "${scaleway_lb.lb01.id}",
                  "letsencrypt": [
                    {
                      "common_name": "example.org",
                      "subject_alternative_name": [
                        "sub1.example.com",
                        "sub2.example.com"
                      ]
                    }
                  ],
                  "lifecycle": [
                    {
                      "create_before_destroy": true
                    }
                  ],
                  "name": "cert1"
                }
              references:
                lb_id: scaleway_lb.lb01.id
            - name: cert01
              manifest: |-
                {
                  "custom_certificate": [
                    {
                      "certificate_chain": "CERTIFICATE_CHAIN_CONTENTS\n"
                    }
                  ],
                  "lb_id": "${scaleway_lb.lb01.id}",
                  "name": "custom-cert"
                }
              references:
                lb_id: scaleway_lb.lb01.id
        argumentDocs:
            "400": |-
                error from the apply operation.
                Use export TF_LOG=DEBUG to view the exact problem returned by the API.
            common_name: '- Main domain of the certificate'
            custom_certificate: '- (Optional) Block for custom certificate chain configuration. Only one of letsencrypt and custom_certificate should be specified.'
            custom_certificate.certificate_chain: '- (Required) Full PEM-formatted certificate chain.'
            fingerprint: '- The identifier (SHA-1) of the certificate'
            id: '- The ID of the Load Balancer certificate.'
            ip_address: property of the lb_beta entity.
            lb_id: '- (Required) The ID of the Load Balancer this certificate is attached to.'
            letsencrypt: '- (Optional) Block for Let''s Encrypt configuration. Only one of letsencrypt and custom_certificate should be specified.'
            letsencrypt.common_name: '- (Required) Main domain of the certificate. A new certificate will be created if this field is changed.'
            letsencrypt.subject_alternative_name: '- (Optional) Array of alternative domain names. A new certificate will be created if this field is changed.'
            lifecycle: instruction with create_before_destroy = true to permit correct certificate replacement and prevent a 400 error from the apply operation.
            name: '- (Optional) The name of the certificate backend.'
            not_valid_after: '- The not valid after validity bound timestamp'
            not_valid_before: '- The not valid before validity bound timestamp'
            status: '- Certificate status'
            subject_alternative_name: '- The alternative domain names of the certificate'
            zone: '- (Defaults to provider zone) The zone of the certificate.'
        importStatements: []
    scaleway_lb_frontend:
        subCategory: Load Balancers
        name: scaleway_lb_frontend
        title: scaleway_lb_frontend
        examples:
            - name: frontend01
              manifest: |-
                {
                  "backend_id": "${scaleway_lb_backend.backend01.id}",
                  "inbound_port": "80",
                  "lb_id": "${scaleway_lb.lb01.id}",
                  "name": "frontend01"
                }
              references:
                backend_id: scaleway_lb_backend.backend01.id
                lb_id: scaleway_lb.lb01.id
            - name: frt01
              manifest: |-
                {
                  "backend_id": "${scaleway_lb_backend.bkd01.id}",
                  "certificate_ids": [
                    "${scaleway_lb_certificate.cert01.id}"
                  ],
                  "inbound_port": 443,
                  "lb_id": "${scaleway_lb.lb01.id}"
                }
              references:
                backend_id: scaleway_lb_backend.bkd01.id
                lb_id: scaleway_lb.lb01.id
              dependencies:
                scaleway_lb.lb01: |-
                    {
                      "ip_id": "${scaleway_lb_ip.ip01.id}",
                      "name": "test-lb",
                      "type": "lb-s"
                    }
                scaleway_lb_backend.bkd01: |-
                    {
                      "forward_port": 443,
                      "forward_protocol": "tcp",
                      "lb_id": "${scaleway_lb.lb01.id}",
                      "proxy_protocol": "none"
                    }
                scaleway_lb_certificate.cert01: |-
                    {
                      "lb_id": "${scaleway_lb.lb01.id}",
                      "letsencrypt": [
                        {
                          "common_name": "${replace(scaleway_lb_ip.ip01.ip_address,\".\", \"-\")}.lb.${scaleway_lb.lb01.region}.scw.cloud"
                        }
                      ],
                      "lifecycle": [
                        {
                          "create_before_destroy": true
                        }
                      ],
                      "name": "test-cert-front-end"
                    }
                scaleway_lb_ip.ip01: '{}'
            - name: frontend01
              manifest: |-
                {
                  "acl": [
                    {
                      "action": [
                        {
                          "type": "allow"
                        }
                      ],
                      "match": [
                        {
                          "ip_subnet": [
                            "192.168.0.1",
                            "192.168.0.2",
                            "192.168.10.0/24"
                          ]
                        }
                      ],
                      "name": "blacklist wellknwon IPs"
                    },
                    {
                      "action": [
                        {
                          "type": "deny"
                        }
                      ],
                      "match": [
                        {
                          "http_filter": "regex",
                          "http_filter_value": [
                            "^foo*bar$"
                          ],
                          "ip_subnet": [
                            "51.51.51.51"
                          ]
                        }
                      ]
                    },
                    {
                      "action": [
                        {
                          "type": "allow"
                        }
                      ],
                      "match": [
                        {
                          "http_filter": "path_begin",
                          "http_filter_value": [
                            "foo",
                            "bar"
                          ]
                        }
                      ]
                    },
                    {
                      "action": [
                        {
                          "type": "allow"
                        }
                      ],
                      "match": [
                        {
                          "http_filter": "path_begin",
                          "http_filter_value": [
                            "hi"
                          ],
                          "invert": "true"
                        }
                      ]
                    },
                    {
                      "action": [
                        {
                          "type": "allow"
                        }
                      ],
                      "match": [
                        {
                          "http_filter": "http_header_match",
                          "http_filter_option": "bar",
                          "http_filter_value": "foo"
                        }
                      ]
                    },
                    {
                      "action": [
                        {
                          "redirect": [
                            {
                              "code": 307,
                              "target": "https://example.com",
                              "type": "location"
                            }
                          ],
                          "type": "redirect"
                        }
                      ],
                      "match": [
                        {
                          "http_filter": "path_begin",
                          "http_filter_value": [
                            "foo",
                            "bar"
                          ],
                          "ip_subnet": [
                            "10.0.0.10"
                          ]
                        }
                      ]
                    }
                  ],
                  "backend_id": "${scaleway_lb_backend.backend01.id}",
                  "inbound_port": "80",
                  "lb_id": "${scaleway_lb.lb01.id}",
                  "name": "frontend01"
                }
              references:
                backend_id: scaleway_lb_backend.backend01.id
                lb_id: scaleway_lb.lb01.id
        argumentDocs:
            acl: '- (Optional) A list of ACL rules to apply to the Load Balancer frontend.  Defined below.'
            acl.action: '- (Required) Action to undertake when an ACL filter matches.'
            acl.external_acls: |-
                - (Defaults to false) A boolean to specify whether to use lb_acl.
                If external_acls is set to true, acl can not be set directly in the Load Balancer frontend.
            acl.match: '- (Required) The ACL match rule. At least ip_subnet or http_filter and http_filter_value are required.'
            acl.name: '- (Optional) The ACL name. If not provided it will be randomly generated.'
            backend_id: '- (Required) The ID of the Load Balancer backend this frontend is attached to.'
            certificate_id: '- (Deprecated, use certificate_ids instead) First certificate ID used by the frontend.'
            certificate_ids: '- (Optional) List of certificate IDs that should be used by the frontend.'
            code: '- (Optional) The HTTP redirect code to use. Valid values are 301, 302, 303, 307 and 308.'
            enable_http3: '- (Default: false) Activates HTTP/3 protocol.'
            http_filter: |-
                - (Optional) The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
                It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
                Possible values are: acl_http_filter_none, path_begin, path_end, http_header_match or regex.
            http_filter_option: '- (Optional) If you have http_filter at http_header_match, you can use this field to filter on the HTTP header''s value.'
            http_filter_value: |-
                - (Optional) A list of possible values to match for the given HTTP filter.
                Keep in mind that in the case of http_header_match the HTTP header field name is case insensitive.
            id: '- The ID of the Load Balancer frontend.'
            inbound_port: '- (Required) TCP port to listen to on the front side.'
            invert: '- (Optional) If set to true, the condition will be of type "unless".'
            ip_subnet: '- (Optional) A list of IPs, or CIDR v4/v6 addresses of the session client, to match.'
            lb_id: '- (Required) The ID of the Load Balancer this frontend is attached to.'
            name: '- (Optional) The name of the Load Balancer frontend.'
            redirect: '- (Optional) Redirect parameters when using an ACL with redirect action.'
            target: '- (Optional) A URL can be used in case of a location redirect (e.g. https://scaleway.com will redirect to this same URL). A scheme name (e.g. https, http, ftp, git) will replace the request''s original scheme.'
            timeout_client: '- (Optional) Maximum inactivity time on the client side. (e.g. 1s)'
            type: '- (Required) The action type. Possible values are: allow or deny or redirect.'
            zone: '- (Defaults to provider zone) The zone in which the Load Balancer was created.'
        importStatements: []
    scaleway_lb_ip:
        subCategory: Load Balancers
        name: scaleway_lb_ip
        title: scaleway_lb_ip
        examples:
            - name: ip
              manifest: |-
                {
                  "reverse": "my-reverse.com"
                }
            - name: ipv6
              manifest: |-
                {
                  "is_ipv6": true
                }
        argumentDocs:
            id: '- The ID of the IP address'
            ip_address: '-  The IP address'
            is_ipv6: '- (Optional) If true, creates a flexible IP with an IPv6 address.'
            lb_id: '- The associated Load Balancer ID if any'
            project_id: '- (Defaults to provider project_id) The ID of the Project the IP is associated with.'
            reverse: '- (Optional) The reverse domain associated with this IP.'
            tags: '- (Optional) The tags associated with this IP.'
            zone: '- (Defaults to provider zone) The zone in which the IP should be reserved.'
        importStatements: []
    scaleway_lb_route:
        subCategory: Load Balancers
        name: scaleway_lb_route
        title: scaleway_lb_route
        examples:
            - name: rt01
              manifest: |-
                {
                  "backend_id": "${scaleway_lb_backend.bkd01.id}",
                  "frontend_id": "${scaleway_lb_frontend.frt01.id}",
                  "match_sni": "sni.scaleway.com"
                }
              references:
                backend_id: scaleway_lb_backend.bkd01.id
                frontend_id: scaleway_lb_frontend.frt01.id
              dependencies:
                scaleway_lb.lb01: |-
                    {
                      "ip_id": "${scaleway_lb_ip.ip01.id}",
                      "name": "test-lb",
                      "type": "lb-s"
                    }
                scaleway_lb_backend.bkd01: |-
                    {
                      "forward_port": 80,
                      "forward_protocol": "tcp",
                      "lb_id": "${scaleway_lb.lb01.id}",
                      "proxy_protocol": "none"
                    }
                scaleway_lb_frontend.frt01: |-
                    {
                      "backend_id": "${scaleway_lb_backend.bkd01.id}",
                      "inbound_port": 80,
                      "lb_id": "${scaleway_lb.lb01.id}"
                    }
                scaleway_lb_ip.ip01: '{}'
            - name: rt01
              manifest: |-
                {
                  "backend_id": "${scaleway_lb_backend.bkd01.id}",
                  "frontend_id": "${scaleway_lb_frontend.frt01.id}",
                  "match_host_header": "host.scaleway.com"
                }
              references:
                backend_id: scaleway_lb_backend.bkd01.id
                frontend_id: scaleway_lb_frontend.frt01.id
              dependencies:
                scaleway_lb.lb01: |-
                    {
                      "ip_id": "${scaleway_lb_ip.ip01.id}",
                      "name": "test-lb",
                      "type": "lb-s"
                    }
                scaleway_lb_backend.bkd01: |-
                    {
                      "forward_port": 80,
                      "forward_protocol": "http",
                      "lb_id": "${scaleway_lb.lb01.id}",
                      "proxy_protocol": "none"
                    }
                scaleway_lb_frontend.frt01: |-
                    {
                      "backend_id": "${scaleway_lb_backend.bkd01.id}",
                      "inbound_port": 80,
                      "lb_id": "${scaleway_lb.lb01.id}"
                    }
                scaleway_lb_ip.ip01: '{}'
        argumentDocs:
            backend_id: '- (Required) The ID of the backend the route is associated with.'
            created_at: '- The date on which the route was created.'
            frontend_id: '- (Required) The ID of the frontend the route is associated with.'
            id: '- The ID of the route'
            match_host_header: |-
                - The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
                Only one of match_sni and match_host_header should be specified.
            match_sni: |-
                - The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
                Only one of match_sni and match_host_header should be specified.
            updated_at: '- The date on which the route was last updated.'
            zone: '- (Defaults to provider zone) The zone in which the Load Balancer was created.'
        importStatements: []
    scaleway_mnq_nats_account:
        subCategory: Messaging and Queuing
        name: scaleway_mnq_nats_account
        title: scaleway_mnq_nats_account
        examples:
            - name: main
              manifest: |-
                {
                  "name": "nats-account"
                }
        argumentDocs:
            endpoint: '- The endpoint of the NATS service for this account.'
            id: '- The ID of the account'
            name: '- (Optional) The unique name of the NATS account.'
            project_id: |-
                - (Defaults to provider project_id) The ID of the Project the
                account is associated with.
            region: |-
                - (Defaults to provider region). The region
                in which the account should be created.
        importStatements: []
    scaleway_mnq_nats_credentials:
        subCategory: Messaging and Queuing
        name: scaleway_mnq_nats_credentials
        title: scaleway_mnq_nats_credentials
        examples:
            - name: main
              manifest: |-
                {
                  "account_id": "${scaleway_mnq_nats_account.main.id}"
                }
              references:
                account_id: scaleway_mnq_nats_account.main.id
              dependencies:
                scaleway_mnq_nats_account.main: |-
                    {
                      "name": "nats-account"
                    }
        argumentDocs:
            account_id: '- (Required) The ID of the NATS account the credentials are generated from'
            file: '- The content of the credentials file.'
            id: '- The ID of the credentials'
            name: '- (Optional) The unique name of the NATS credentials.'
            region: |-
                - (Defaults to provider region). The region
                in which the account exists.
        importStatements: []
    scaleway_mnq_sns:
        subCategory: Messaging and Queuing
        name: scaleway_mnq_sns
        title: scaleway_mnq_sns
        examples:
            - name: main
              manifest: '{}'
            - name: for_project
              manifest: |-
                {
                  "project_id": "${data.scaleway_account_project.project.id}"
                }
              references:
                project_id: data.scaleway_account_project.project.id
        argumentDocs:
            endpoint: '- The endpoint of the SNS service for this Project.'
            id: '- The ID of the Project'
            project_id: '- (Defaults to provider project_id) The ID of the project in which SNS will be enabled.'
            region: |-
                - (Defaults to provider region). The region
                in which SNS will be enabled.
        importStatements: []
    scaleway_mnq_sns_credentials:
        subCategory: Messaging and Queuing
        name: scaleway_mnq_sns_credentials
        title: scaleway_mnq_sns_credentials
        examples:
            - name: main
              manifest: |-
                {
                  "name": "sns-credentials",
                  "permissions": [
                    {
                      "can_manage": false,
                      "can_publish": false,
                      "can_receive": true
                    }
                  ],
                  "project_id": "${scaleway_mnq_sns.main.project_id}"
                }
              references:
                project_id: scaleway_mnq_sns.main.project_id
              dependencies:
                scaleway_mnq_sns.main: '{}'
        argumentDocs:
            access_key: '- The ID of the key.'
            can_manage: '- (Optional). Defines whether the user can manage the associated resource(s).'
            can_publish: '- (Optional). Defines whether the user can publish messages to the service.'
            can_receive: '- (Optional). Defines whether the user can receive messages from the service.'
            id: '- The ID of the credentials'
            name: '- (Optional) The unique name of the SNS credentials.'
            permissions: '- (Optional). List of permissions associated with these credentials. Only one of the following permissions may be set:'
            project_id: '- (Defaults to provider project_id) The ID of the Project in which SNS is enabled.'
            region: '- (Defaults to provider region). The region in which SNS is enabled.'
            secret_key: '- The secret value of the key.'
        importStatements: []
    scaleway_mnq_sns_topic:
        subCategory: Messaging and Queuing
        name: scaleway_mnq_sns_topic
        title: scaleway_mnq_sns_topic
        examples:
            - name: topic
              manifest: |-
                {
                  "access_key": "${scaleway_mnq_sns_credentials.main.access_key}",
                  "name": "my-topic",
                  "project_id": "${scaleway_mnq_sns.main.project_id}",
                  "secret_key": "${scaleway_mnq_sns_credentials.main.secret_key}"
                }
              references:
                access_key: scaleway_mnq_sns_credentials.main.access_key
                project_id: scaleway_mnq_sns.main.project_id
                secret_key: scaleway_mnq_sns_credentials.main.secret_key
              dependencies:
                scaleway_mnq_sns.main: '{}'
                scaleway_mnq_sns_credentials.main: |-
                    {
                      "permissions": [
                        {
                          "can_manage": true
                        }
                      ],
                      "project_id": "${scaleway_mnq_sns.main.project_id}"
                    }
        argumentDocs:
            access_key: '- (Optional) The access key of the SNS credentials.'
            arn: '- The ARN of the topic'
            content_based_deduplication: '- (Optional) Specifies whether to enable content-based deduplication.'
            fifo_topic: '- (Optional) Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.'
            id: '- The ID of the topic with format {region}/{project-id}/{topic-name}'
            name: '- (Optional) The unique name of the SNS topic. Either name or name_prefix is required. Conflicts with name_prefix.'
            name_prefix: '- (Optional) Creates a unique name beginning with the specified prefix. Conflicts with name.'
            project_id: '- (Defaults to provider project_id) The ID of the Project in which SNS is enabled.'
            region: |-
                - (Defaults to provider region). The region
                in which SNS is enabled.
            secret_key: '- (Optional) The secret key of the SNS credentials.'
            sns_endpoint: '- (Optional) The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to https://sns.mnq.{region}.scaleway.com.'
        importStatements: []
    scaleway_mnq_sns_topic_subscription:
        subCategory: Messaging and Queuing
        name: scaleway_mnq_sns_topic_subscription
        title: scaleway_mnq_sns_topic_subscription
        examples:
            - name: main
              manifest: |-
                {
                  "access_key": "${scaleway_mnq_sns_credentials.main.access_key}",
                  "endpoint": "http://example.com",
                  "project_id": "${scaleway_mnq_sns.main.project_id}",
                  "protocol": "http",
                  "secret_key": "${scaleway_mnq_sns_credentials.main.secret_key}",
                  "topic_id": "${scaleway_mnq_sns_topic.topic.id}"
                }
              references:
                access_key: scaleway_mnq_sns_credentials.main.access_key
                project_id: scaleway_mnq_sns.main.project_id
                secret_key: scaleway_mnq_sns_credentials.main.secret_key
                topic_id: scaleway_mnq_sns_topic.topic.id
              dependencies:
                scaleway_mnq_sns.main: '{}'
                scaleway_mnq_sns_credentials.main: |-
                    {
                      "permissions": [
                        {
                          "can_manage": true,
                          "can_publish": true,
                          "can_receive": true
                        }
                      ],
                      "project_id": "${scaleway_mnq_sns.main.project_id}"
                    }
                scaleway_mnq_sns_topic.topic: |-
                    {
                      "access_key": "${scaleway_mnq_sns_credentials.main.access_key}",
                      "name": "my-topic",
                      "project_id": "${scaleway_mnq_sns.main.project_id}",
                      "secret_key": "${scaleway_mnq_sns_credentials.main.secret_key}"
                    }
        argumentDocs:
            access_key: '- (Optional) The access key of the SNS credentials.'
            arn: '- The ARN of the topic subscription'
            id: '- The ID of the topic with format {region}/{project-id}/{topic-name}/{subscription-id}'
            project_id: '- (Defaults to provider project_id) The ID of the Project in which SNS is enabled.'
            protocol: '- (Required) Protocol of the SNS topic subscription.'
            redrive_policy: '- (Optional) Activate JSON redrive policy.'
            region: |-
                - (Defaults to provider region). The region
                in which SNS is enabled.
            secret_key: '- (Optional) The secret key of the SNS credentials.'
            sns_endpoint: '- (Optional) The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to https://sns.mnq.{region}.scaleway.com.'
            topic_arn: '- (Optional) The ARN of the topic. Either topic_id or topic_arn is required.'
            topic_id: '- (Optional) The ID of the topic. Either topic_id or topic_arn is required. Conflicts with topic_arn.'
        importStatements: []
    scaleway_mnq_sqs:
        subCategory: Messaging and Queuing
        name: scaleway_mnq_sqs
        title: scaleway_mnq_sqs
        examples:
            - name: main
              manifest: '{}'
            - name: for_project
              manifest: |-
                {
                  "project_id": "${data.scaleway_account_project.project.id}"
                }
              references:
                project_id: data.scaleway_account_project.project.id
        argumentDocs:
            endpoint: '- The endpoint of the SQS service for this Project.'
            id: '- The ID of the Project'
            project_id: '- (Defaults to provider project_id) The ID of the Project in which SQS will be enabled.'
            region: |-
                - (Defaults to provider region). The region
                in which SQS will be enabled.
        importStatements: []
    scaleway_mnq_sqs_credentials:
        subCategory: Messaging and Queuing
        name: scaleway_mnq_sqs_credentials
        title: scaleway_mnq_sqs_credentials
        examples:
            - name: main
              manifest: |-
                {
                  "name": "sqs-credentials",
                  "permissions": [
                    {
                      "can_manage": false,
                      "can_publish": false,
                      "can_receive": true
                    }
                  ],
                  "project_id": "${scaleway_mnq_sqs.main.project_id}"
                }
              references:
                project_id: scaleway_mnq_sqs.main.project_id
              dependencies:
                scaleway_mnq_sqs.main: '{}'
        argumentDocs:
            access_key: '- The ID of the key.'
            can_manage: '- (Optional). Defines whether the user can manage the associated resource(s).'
            can_publish: '- (Optional). Defines whether the user can publish messages to the service.'
            can_receive: '- (Optional). Defines whether the user can receive messages from the service.'
            id: '- The ID of the credentials'
            name: '- (Optional) The unique name of the SQS credentials.'
            permissions: '- (Optional). List of permissions associated with these credentials. Only one of the following permissions may be set:'
            project_id: '- (Defaults to provider project_id) The ID of the Project in which SQS is enabled.'
            region: '- (Defaults to provider region). The region in which SQS is enabled.'
            secret_key: '- The secret value of the key.'
        importStatements: []
    scaleway_mnq_sqs_queue:
        subCategory: Messaging and Queuing
        name: scaleway_mnq_sqs_queue
        title: scaleway_mnq_sqs_queue
        examples:
            - name: main
              manifest: |-
                {
                  "access_key": "${scaleway_mnq_sqs_credentials.main.access_key}",
                  "name": "my-queue",
                  "project_id": "${scaleway_mnq_sqs.main.project_id}",
                  "secret_key": "${scaleway_mnq_sqs_credentials.main.secret_key}",
                  "sqs_endpoint": "${scaleway_mnq_sqs.main.endpoint}"
                }
              references:
                access_key: scaleway_mnq_sqs_credentials.main.access_key
                project_id: scaleway_mnq_sqs.main.project_id
                secret_key: scaleway_mnq_sqs_credentials.main.secret_key
                sqs_endpoint: scaleway_mnq_sqs.main.endpoint
              dependencies:
                scaleway_mnq_sqs.main: '{}'
                scaleway_mnq_sqs_credentials.main: |-
                    {
                      "name": "sqs-credentials",
                      "permissions": [
                        {
                          "can_manage": true,
                          "can_publish": false,
                          "can_receive": false
                        }
                      ],
                      "project_id": "${scaleway_mnq_sqs.main.project_id}"
                    }
        argumentDocs:
            access_key: '- (Required) The access key of the SQS queue.'
            content_based_deduplication: '- (Optional) Specifies whether to enable content-based deduplication. Defaults to false.'
            fifo_queue: '- (Optional) Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to false.'
            id: '- The ID of the queue with format {region/{project-id}/{queue-name}'
            message_max_age: '- (Optional) The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.'
            message_max_size: '- (Optional) The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.'
            name: '- (Optional) The unique name of the SQS queue. Either name or name_prefix is required. Conflicts with name_prefix.'
            name_prefix: '- (Optional) Creates a unique name beginning with the specified prefix. Conflicts with name.'
            project_id: '- (Defaults to provider project_id) The ID of the Project in which SQS is enabled.'
            receive_wait_time_seconds: '- (Optional) The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.'
            region: '- (Defaults to provider region). The region in which SQS is enabled.'
            secret_key: '- (Required) The secret key of the SQS queue.'
            sqs_endpoint: '- (Optional) The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to https://sqs.mnq.{region}.scaleway.com.'
            url: '- The URL of the queue.'
            visibility_timeout_seconds: '- (Optional) The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.'
        importStatements: []
    scaleway_object:
        subCategory: Object Storage
        name: scaleway_object
        title: scaleway_object
        examples:
            - name: some_file
              manifest: |-
                {
                  "bucket": "${scaleway_object_bucket.some_bucket.id}",
                  "file": "myfile",
                  "hash": "${filemd5(\"myfile\")}",
                  "key": "object_path"
                }
              references:
                bucket: scaleway_object_bucket.some_bucket.id
              dependencies:
                scaleway_object_bucket.some_bucket: |-
                    {
                      "name": "some-unique-name"
                    }
        argumentDocs:
            bucket: '- (Required) The name of the bucket, or its Terraform ID.'
            content: '- (Optional) The content of the file to upload. Only one of file, content or content_base64 can be defined.'
            content_base64: '- (Optional) The base64-encoded content of the file to upload. Only one of file, content or content_base64 can be defined.'
            file: '- (Optional) The name of the file to upload, defaults to an empty file.'
            hash: '- (Optional) Hash of the file, used to trigger the upload on file change.'
            id: '- The path of the object, including the name of the bucket.'
            key: '- (Required) The path to the object.'
            metadata: '- (Optional) Map of metadata used for the object (keys must be lowercase).'
            project_id: '- (Defaults to provider project_id) The ID of the project the bucket is associated with.'
            region: '- The Scaleway region the bucket resides in.'
            storage_class: '- (Optional) Specifies the Scaleway storage class (STANDARD, GLACIER, or ONEZONE_IA) used to store the object.'
            tags: '- (Optional) Map of tags.'
            visibility: '- (Optional) Visibility of the object, public-read or private.'
        importStatements: []
    scaleway_object_bucket:
        subCategory: Object Storage
        name: scaleway_object_bucket
        title: scaleway_object_bucket
        examples:
            - name: some_bucket
              manifest: |-
                {
                  "name": "some-unique-name",
                  "tags": {
                    "key": "value"
                  }
                }
            - name: some_bucket
              manifest: |-
                {
                  "name": "some-unique-name",
                  "project_id": "11111111-1111-1111-1111-111111111111"
                }
            - name: main
              manifest: |-
                {
                  "lifecycle_rule": [
                    {
                      "enabled": true,
                      "expiration": [
                        {
                          "days": 365
                        }
                      ],
                      "id": "id1",
                      "prefix": "path1/",
                      "transition": [
                        {
                          "days": 120,
                          "storage_class": "GLACIER"
                        }
                      ]
                    },
                    {
                      "enabled": true,
                      "expiration": [
                        {
                          "days": "50"
                        }
                      ],
                      "id": "id2",
                      "prefix": "path2/"
                    },
                    {
                      "enabled": false,
                      "expiration": [
                        {
                          "days": "1"
                        }
                      ],
                      "id": "id3",
                      "prefix": "path3/",
                      "tags": {
                        "tagKey": "tagValue",
                        "terraform": "hashicorp"
                      }
                    },
                    {
                      "enabled": true,
                      "id": "id4",
                      "tags": {
                        "tag1": "value1"
                      },
                      "transition": [
                        {
                          "days": 1,
                          "storage_class": "GLACIER"
                        }
                      ]
                    },
                    {
                      "abort_incomplete_multipart_upload_days": 30,
                      "enabled": true
                    }
                  ],
                  "name": "mybuckectid",
                  "region": "fr-par"
                }
        argumentDocs:
            abort_incomplete_multipart_upload_days: (Optional) Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
            acl: '- (Optional)(Deprecated) The canned ACL you want to apply to the bucket.'
            allowed_headers: (Optional) Specifies which headers are allowed.
            allowed_methods: (Required) Specifies which methods are allowed (GET, PUT, POST, DELETE or HEAD).
            allowed_origins: (Required) Specifies which origins are allowed.
            cors_rule: '- (Optional) A rule of Cross-Origin Resource Sharing. The CORS object supports the following:'
            days: (Optional) Specifies the number of days after object creation when the specific rule action takes effect.
            enabled: '- (Optional) Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.'
            endpoint: '- The endpoint URL of the bucket.'
            expiration: '- (Optional) Specifies a period of expiration for the object. The expiration object supports the following:'
            expose_headers: (Optional) Specifies header exposure in the response.
            force_destroy: '- (Optional) Enable deletion of objects in the bucket before destroying, locked objects or under legal hold are also deleted and not recoverable'
            id: '- (Optional) Unique identifier for the rule. Must be less than or equal to 255 characters in length.'
            key/value: |-
                tags yet, so only the tags' values will be displayed.
                If you make any change to your bucket's tags using the console, it will overwrite them with the format value/value.
            lifecycle_rule: '(Optional) - A set of rules that defines actions applied to a group of objects. The lifecycle_rule object supports the following:'
            max_age_seconds: (Optional) Specifies time in seconds that the browser can cache the response for a preflight request.
            name: '- (Required) The name of the bucket.'
            prefix: '- (Optional) Object key prefix identifying one or more objects to which the rule applies.'
            project_id: '- (Defaults to provider project_id) The ID of the project the bucket is associated with.'
            region: '- (Optional) The region in which the bucket will be created.'
            storage_class: (Required) Specifies the Scaleway storage class STANDARD, GLACIER, ONEZONE_IA  to which you want the object to transition.
            tags: '- (Optional) A list of tags (key/value) for the bucket.'
            transition: '- (Optional) Specifies a period in the object''s transitions.'
            versioning: '- (Optional) A state of versioning. The versioning object supports the following:'
        importStatements: []
    scaleway_object_bucket_acl:
        subCategory: Object Storage
        name: scaleway_object_bucket_acl
        title: scaleway_object_bucket_acl
        examples:
            - name: main
              manifest: |-
                {
                  "acl": "private",
                  "bucket": "${scaleway_object_bucket.main.id}"
                }
              references:
                bucket: scaleway_object_bucket.main.id
              dependencies:
                scaleway_object_bucket.some_bucket: |-
                    {
                      "name": "unique-name"
                    }
            - name: main
              manifest: |-
                {
                  "access_control_policy": [
                    {
                      "grant": [
                        {
                          "grantee": [
                            {
                              "id": "\u003cproject-id\u003e:\u003cproject-id\u003e",
                              "type": "CanonicalUser"
                            }
                          ],
                          "permission": "FULL_CONTROL"
                        },
                        {
                          "grantee": [
                            {
                              "id": "\u003cproject-id\u003e",
                              "type": "CanonicalUser"
                            }
                          ],
                          "permission": "WRITE"
                        }
                      ],
                      "owner": [
                        {
                          "id": "\u003cproject-id\u003e"
                        }
                      ]
                    }
                  ],
                  "bucket": "${scaleway_object_bucket.main.id}"
                }
              references:
                bucket: scaleway_object_bucket.main.id
              dependencies:
                scaleway_object_bucket.main: |-
                    {
                      "name": "your-bucket"
                    }
        argumentDocs:
            access_control_policy: '- (Optional, Conflicts with ACL) A configuration block that sets the ACL permissions for an object per grantee documented below.'
            access_control_policy.grant: '- (Required) Set of grant configuration blocks documented below.'
            access_control_policy.grant.grantee: '- (Required) Configuration block for the project being granted permissions documented below.'
            access_control_policy.grant.permission: '- (Required) Logging permissions assigned to the grantee for the bucket.'
            access_control_policy.owner: '- (Required) Configuration block of the bucket owner''s display name and ID documented below.'
            acl: '- (Optional) The canned ACL you want to apply to the bucket. Refer to the AWS Canned ACL documentation page to find a list of all the supported canned ACLs.'
            bucket: '- (Required) The name of the bucket, or its Terraform ID.'
            expected_bucket_owner: '- (Optional, Forces new resource) The project ID of the expected bucket owner.'
            grantee.id: '- (Required) The canonical user ID of the grantee.'
            grantee.type: '- (Required) Type of grantee. Valid values: CanonicalUser.'
            id: '- The region, bucket and acl separated by (/).'
            owner.display_name: '- (Optional) The display name of the owner.'
            owner.id: '- (Required) The ID of the project owner.'
            project_id: '- (Defaults to provider project_id) The ID of the project the bucket is associated with.'
            region: '- (Optional) The region in which the bucket should be created.'
        importStatements: []
    scaleway_object_bucket_lock_configuration:
        subCategory: Object Storage
        name: scaleway_object_bucket_lock_configuration
        title: scaleway_object_bucket_lock_configuration
        examples:
            - name: main
              manifest: |-
                {
                  "bucket": "${scaleway_object_bucket.main.name}",
                  "rule": [
                    {
                      "default_retention": [
                        {
                          "days": 1,
                          "mode": "GOVERNANCE"
                        }
                      ]
                    }
                  ]
                }
              references:
                bucket: scaleway_object_bucket.main.name
              dependencies:
                scaleway_object_bucket.main: |-
                    {
                      "acl": "public-read",
                      "name": "MyBucket",
                      "object_lock_enabled": true
                    }
        argumentDocs:
            bucket: '- (Required, forces new resource) The name of the bucket, or its Terraform ID.'
            days: '- (Optional) The number of days you want to specify for the default retention period.'
            default_retention: '- (Required) The default retention for the lock.'
            id: '- The unique identifier of the Object bucket lock configuration.'
            mode: '- (Required) The default object lock retention mode you want to apply to new objects placed in the specified bucket. Valid values are GOVERNANCE or COMPLIANCE. Refer to the dedicated documentation for more information on retention modes.'
            project_id: '- (Defaults to provider project_id) The ID of the project the bucket is associated with.'
            rule: '- (Optional) Specifies the object lock rule for the specified object.'
            years: '- (Optional) The number of years you want to specify for the default retention period.'
        importStatements: []
    scaleway_object_bucket_policy:
        subCategory: Object Storage
        name: scaleway_object_bucket_policy
        title: scaleway_object_bucket_policy
        examples:
            - name: policy
              manifest: |-
                {
                  "bucket": "${scaleway_object_bucket.bucket.name}",
                  "policy": "${jsonencode({\n    Version   = \"2023-04-17\",\n    Id      = \"MyBucketPolicy\",\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\"s3:*\"]\n        Principal = { SCW = \"user_id:${data.scaleway_iam_user.user.id}\" }\n        Resource  = [\n          scaleway_object_bucket.bucket.name,\n          \"${scaleway_object_bucket.bucket.name}/*\",\n        ]\n      },\n    ]\n  })}"
                }
              references:
                bucket: scaleway_object_bucket.bucket.name
              dependencies:
                scaleway_iam_policy.policy: |-
                    {
                      "name": "object-storage-policy",
                      "rule": [
                        {
                          "permission_set_names": [
                            "ObjectStorageFullAccess"
                          ],
                          "project_ids": [
                            "${data.scaleway_account_project.default.id}"
                          ]
                        }
                      ],
                      "user_id": "${data.scaleway_iam_user.user.id}"
                    }
                scaleway_object_bucket.bucket: |-
                    {
                      "name": "some-unique-name"
                    }
            - name: policy
              manifest: |-
                {
                  "bucket": "${scaleway_object_bucket.bucket.id}",
                  "policy": "${jsonencode(\n    {\n      Version = \"2023-04-17\",\n      Statement = [\n        {\n          Sid    = \"Delegate read access\",\n          Effect = \"Allow\",\n          Principal = {\n            SCW = \"application_id:${scaleway_iam_application.reading-app.id}\"\n          },\n          Action = [\n            \"s3:ListBucket\",\n            \"s3:GetObject\",\n          ]\n          Resource = [\n            \"${scaleway_object_bucket.bucket.name}\",\n            \"${scaleway_object_bucket.bucket.name}/*\"\n          ]\n        }\n      ]\n    }\n  )}"
                }
              references:
                bucket: scaleway_object_bucket.bucket.id
              dependencies:
                scaleway_iam_application.reading-app: |-
                    {
                      "name": "reading-app"
                    }
                scaleway_iam_policy.policy: |-
                    {
                      "application_id": "${scaleway_iam_application.reading-app.id}",
                      "name": "object-storage-policy",
                      "rule": [
                        {
                          "permission_set_names": [
                            "ObjectStorageBucketsRead"
                          ],
                          "project_ids": [
                            "${data.scaleway_account_project.default.id}"
                          ]
                        }
                      ]
                    }
                scaleway_object_bucket.bucket: |-
                    {
                      "name": "some-unique-name"
                    }
            - name: main
              manifest: |-
                {
                  "bucket": "${scaleway_object_bucket.bucket.id}",
                  "policy": "${data.aws_iam_policy_document.policy.json}"
                }
              references:
                bucket: scaleway_object_bucket.bucket.id
                policy: data.aws_iam_policy_document.policy.json
              dependencies:
                scaleway_object_bucket.bucket: |-
                    {
                      "name": "some-unique-name"
                    }
            - name: policy
              manifest: |-
                {
                  "bucket": "${scaleway_object_bucket.bucket.name}",
                  "policy": "${jsonencode({\n    Version   = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\n          \"s3:ListBucket\",\n          \"s3:GetObjectTagging\"\n        ]\n        Principal = { SCW = \"project_id:${data.scaleway_account_project.default.id}\" }\n        Resource  = [\n          scaleway_object_bucket.bucket.name,\n          \"${scaleway_object_bucket.bucket.name}/*\",\n        ]\n      },\n    ]\n  })}"
                }
              references:
                bucket: scaleway_object_bucket.bucket.name
              dependencies:
                scaleway_object_bucket.bucket: |-
                    {
                      "name": "mia-cross-crash-tests",
                      "region": "fr-par"
                    }
        argumentDocs:
            bucket: '- (Required) The name of the bucket, or its Terraform ID.'
            id: '- The unique identifier of the policy, which is the ID of the bucket.'
            policy: '- (Required) The policy document. This is a JSON formatted string. For more information about building AWS IAM policy documents with Terraform, refer to the official documentation.'
            project_id: '- (Defaults to provider project_id) The ID of the project the bucket is associated with.'
            region: '- The Scaleway region this bucket resides in.'
        importStatements: []
    scaleway_object_bucket_website_configuration:
        subCategory: Object Storage
        name: scaleway_object_bucket_website_configuration
        title: scaleway_object_bucket_website_configuration
        examples:
            - name: main
              manifest: |-
                {
                  "bucket": "${scaleway_object_bucket.main.id}",
                  "index_document": [
                    {
                      "suffix": "index.html"
                    }
                  ]
                }
              references:
                bucket: scaleway_object_bucket.main.id
              dependencies:
                scaleway_object_bucket.main: |-
                    {
                      "acl": "public-read",
                      "name": "MyBucket"
                    }
            - name: main
              manifest: |-
                {
                  "bucket": "${scaleway_object_bucket.main.id}",
                  "index_document": [
                    {
                      "suffix": "index.html"
                    }
                  ]
                }
              references:
                bucket: scaleway_object_bucket.main.id
              dependencies:
                scaleway_object_bucket.main: |-
                    {
                      "acl": "public-read",
                      "name": "MyBucket"
                    }
                scaleway_object_bucket_policy.main: |-
                    {
                      "bucket": "${scaleway_object_bucket.main.id}",
                      "policy": "${jsonencode(\n    {\n        \"Version\" = \"2012-10-17\",\n        \"Id\" = \"MyPolicy\",\n        \"Statement\" = [\n        {\n           \"Sid\" = \"GrantToEveryone\",\n           \"Effect\" = \"Allow\",\n           \"Principal\" = \"*\",\n           \"Action\" = [\n              \"s3:GetObject\"\n           ],\n           \"Resource\":[\n              \"\u003cbucket-name\u003e/*\"\n           ]\n        }\n        ]\n    })}"
                    }
        argumentDocs:
            bucket: '- (Required, forces new resource) The name of the bucket.'
            error_document: '- (Optional) The name of the error file for the website detailed below.'
            id: '- The region and bucket name, separated by a slash (e.g. fr-par/some-bucket)'
            index_document: '- (Required) The name of the index file for the website detailed below.'
            index_document.suffix: '- (Required) A suffix that is appended to a request targeting a specific directory on the website endpoint.'
            key: '- (Required) The object key name to use when a 4XX class error occurs.'
            project_id: '- (Defaults to provider project_id) The ID of the project the bucket is associated with.'
            website_domain: '- The domain of the website endpoint. This is used to create DNS alias records.'
            website_endpoint: '- The website endpoint.'
        importStatements: []
    scaleway_rdb_acl:
        subCategory: Databases
        name: scaleway_rdb_acl
        title: scaleway_rdb_acl
        examples:
            - name: main
              manifest: |-
                {
                  "acl_rules": [
                    {
                      "description": "foo",
                      "ip": "1.2.3.4/32"
                    }
                  ],
                  "instance_id": "${scaleway_rdb_instance.main.id}"
                }
              references:
                instance_id: scaleway_rdb_instance.main.id
              dependencies:
                scaleway_rdb_instance.main: |-
                    {
                      "disable_backup": true,
                      "engine": "PostgreSQL-15",
                      "is_ha_cluster": true,
                      "name": "test-rdb",
                      "node_type": "DB-DEV-S",
                      "password": "thiZ_is_v\u0026ry_s3cret",
                      "user_name": "my_initial_user"
                    }
        argumentDocs:
            acl_rules: '- A list of ACLs (structure is described below)'
            acl_rules.description: '- (Optional) A text describing this rule. Default description: IP allowed'
            acl_rules.ip: '- (Required) The IP range to whitelist in CIDR notation'
            instance_id: '- (Required) UUID of the Database Instance.'
            region: '- (Defaults to provider region) The region in which the Database Instance should be created.'
        importStatements: []
    scaleway_rdb_database:
        subCategory: Databases
        name: scaleway_rdb_database
        title: scaleway_rdb_database
        examples:
            - name: main
              manifest: |-
                {
                  "instance_id": "${scaleway_rdb_instance.main.id}",
                  "name": "my-new-database"
                }
              references:
                instance_id: scaleway_rdb_instance.main.id
              dependencies:
                scaleway_rdb_instance.main: |-
                    {
                      "disable_backup": true,
                      "engine": "PostgreSQL-15",
                      "is_ha_cluster": true,
                      "name": "test-rdb",
                      "node_type": "DB-DEV-S",
                      "password": "thiZ_is_v\u0026ry_s3cret",
                      "user_name": "my_initial_user"
                    }
        argumentDocs:
            id: '- The ID of the database, which is of the form {region}/{id}/{DBNAME} e.g. fr-par/11111111-1111-1111-1111-111111111111/mydb'
            instance_id: '- (Required) UUID of the Database Instance.'
            managed: '- Whether the database is managed or not.'
            name: '- (Required) Name of the database (e.g. my-new-database).'
            owner: '- The name of the owner of the database.'
            region: '- (Defaults to provider region) The region in which the resource exists.'
            size: '- Size of the database (in bytes).'
        importStatements: []
    scaleway_rdb_database_backup:
        subCategory: Databases
        name: scaleway_rdb_database_backup
        title: scaleway_rdb_database_backup
        examples:
            - name: main
              manifest: |-
                {
                  "database_name": "${scaleway_rdb_database.main.name}",
                  "instance_id": "${scaleway_rdb_instance.main.id}"
                }
              references:
                database_name: scaleway_rdb_database.main.name
                instance_id: scaleway_rdb_instance.main.id
              dependencies:
                scaleway_rdb_database.main: |-
                    {
                      "instance_id": "${scaleway_rdb_instance.main.id}",
                      "name": "database"
                    }
                scaleway_rdb_instance.main: |-
                    {
                      "disable_backup": true,
                      "engine": "PostgreSQL-15",
                      "is_ha_cluster": true,
                      "name": "test-rdb",
                      "node_type": "DB-DEV-S",
                      "password": "thiZ_is_v\u0026ry_s3cret",
                      "user_name": "my_initial_user"
                    }
            - name: main
              manifest: |-
                {
                  "database_name": "${data.scaleway_rdb_database.main.name}",
                  "expires_at": "2022-06-16T07:48:44Z",
                  "instance_id": "${data.scaleway_rdb_instance.main.id}"
                }
              references:
                database_name: data.scaleway_rdb_database.main.name
                instance_id: data.scaleway_rdb_instance.main.id
        argumentDocs:
            created_at: '- Creation date (Format ISO 8601).'
            expires_at: (Optional) Expiration date (Format ISO 8601).
            id: '- The ID of the backup, which is of the form {region}/{id}, e.g. fr-par/11111111-1111-1111-1111-111111111111'
            instance_id: '- (Required) UUID of the Database Instance.'
            instance_name: '- Name of the instance of the backup.'
            name: '- (Required) Name of the database (e.g. my-database).'
            region: '- (Defaults to provider region) The region in which the resource exists.'
            size: '- Size of the backup (in bytes).'
            updated_at: '- Updated date (Format ISO 8601).'
        importStatements: []
    scaleway_rdb_instance:
        subCategory: Databases
        name: scaleway_rdb_instance
        title: scaleway_rdb_instance
        examples:
            - name: main
              manifest: |-
                {
                  "disable_backup": true,
                  "encryption_at_rest": true,
                  "engine": "PostgreSQL-15",
                  "is_ha_cluster": true,
                  "name": "test-rdb",
                  "node_type": "DB-DEV-S",
                  "password": "thiZ_is_v\u0026ry_s3cret",
                  "user_name": "my_initial_user"
                }
            - name: main
              manifest: |-
                {
                  "disable_backup": true,
                  "engine": "PostgreSQL-15",
                  "is_ha_cluster": true,
                  "name": "test-rdb-sbs",
                  "node_type": "db-play2-pico",
                  "password": "thiZ_is_v\u0026ry_s3cret",
                  "user_name": "my_initial_user",
                  "volume_size_in_gb": 10,
                  "volume_type": "sbs_15k"
                }
            - name: main
              manifest: |-
                {
                  "disable_backup": true,
                  "engine": "MySQL-8",
                  "init_settings": {
                    "lower_case_table_names": 1
                  },
                  "name": "test-rdb",
                  "node_type": "db-dev-s",
                  "password": "thiZ_is_v\u0026ry_s3cret",
                  "settings": {
                    "max_connections": "350"
                  },
                  "user_name": "my_initial_user"
                }
            - name: main
              manifest: |-
                {
                  "backup_schedule_frequency": 24,
                  "backup_schedule_retention": 7,
                  "disable_backup": false,
                  "engine": "PostgreSQL-15",
                  "is_ha_cluster": true,
                  "name": "test-rdb",
                  "node_type": "DB-DEV-S",
                  "password": "thiZ_is_v\u0026ry_s3cret",
                  "user_name": "my_initial_user"
                }
            - name: main
              manifest: |-
                {
                  "engine": "PostgreSQL-15",
                  "node_type": "db-dev-s",
                  "private_network": [
                    {
                      "ip_net": "172.16.20.4/22",
                      "pn_id": "${scaleway_vpc_private_network.pn.id}"
                    }
                  ]
                }
              references:
                private_network.pn_id: scaleway_vpc_private_network.pn.id
              dependencies:
                scaleway_vpc_private_network.pn: |-
                    {
                      "ipv4_subnet": [
                        {
                          "subnet": "172.16.20.0/22"
                        }
                      ]
                    }
            - name: main
              manifest: |-
                {
                  "engine": "PostgreSQL-15",
                  "load_balancer": [
                    {}
                  ],
                  "node_type": "DB-DEV-S",
                  "private_network": [
                    {
                      "enable_ipam": true,
                      "pn_id": "${scaleway_vpc_private_network.pn.id}"
                    }
                  ]
                }
              references:
                private_network.pn_id: scaleway_vpc_private_network.pn.id
              dependencies:
                scaleway_vpc_private_network.pn: '{}'
            - name: main
              manifest: |-
                {
                  "engine": "PostgreSQL-15",
                  "node_type": "db-dev-s"
                }
        argumentDocs:
            backup_same_region: '- (Optional) Boolean to store logical backups in the same region as the Database Instance.'
            backup_schedule_frequency: '- (Optional) Backup schedule frequency in hours.'
            backup_schedule_retention: '- (Optional) Backup schedule retention in days.'
            certificate: '- Certificate of the Database Instance.'
            disable_backup: '- (Optional) Disable automated backup for the Database Instance.'
            enable_ipam: '- (Optional) If true, the IP network address within the private subnet is determined by the IP Address Management (IPAM) service.'
            encryption_at_rest: '- (Optional) Enable or disable encryption at rest for the Database Instance.'
            endpoint_id: '- The ID of the endpoint of the Load Balancer.'
            endpoint_ip: '- (Deprecated) The IP of the Database Instance. Please use the private_network or the load_balancer attribute.'
            endpoint_port: '- (Deprecated) The port of the Database Instance. Please use the private_network or the load_balancer attribute.'
            engine: '- (Required) Database Instance''s engine version (e.g. PostgreSQL-11).'
            hostname: '- Name of the endpoint.'
            id: '- The ID of the Database Instance.'
            init_settings: '- (Optional) Map of engine settings to be set at database initialisation.'
            ip: '- IP of the replica.'
            ip_net: '- (Optional) The IP network address within the private subnet. This must be an IPv4 address with a CIDR notation. If not set, The IP network address within the private subnet is determined by the IP Address Management (IPAM) service.'
            is_ha_cluster: '- (Optional) Enable or disable high availability for the Database Instance.'
            load_balancer: |-
                - (Optional) List of Load Balancer endpoints of the Database Instance. A load-balancer endpoint will be set by default if no Private Network is.
                This block must be defined if you want a public endpoint in addition to your private endpoint.
            name: '- (Optional) The name of the Database Instance.'
            node_type: '- (Required) The type of Database Instance you want to create (e.g. db-dev-s).'
            organization_id: '- The organization ID the Database Instance is associated with.'
            password: '- (Optional) Password for the first user of the Database Instance.'
            pn_id: '- (Required) The ID of the Private Network.'
            port: '- Port of the replica.'
            private_network: '- List of Private Networks endpoints of the Database Instance.'
            project_id: |-
                - (Defaults to provider project_id) The ID of the project the Database
                Instance is associated with.
            read_replicas: '- List of read replicas of the Database Instance.'
            region: |-
                - (Defaults to provider region) The region
                in which the Database Instance should be created.
            settings: '- (Optional) Map of engine settings to be set. Using this option will override default config.'
            tags: '- (Optional) The tags associated with the Database Instance.'
            user_name: '- (Optional) Identifier for the first user of the Database Instance.'
            volume_size_in_gb: '- (Optional) Volume size (in GB). Cannot be used when volume_type is set to lssd.'
            volume_type: '- (Optional, default to lssd) Type of volume where data are stored (bssd, lssd, sbs_5k or sbs_15k).'
        importStatements: []
    scaleway_rdb_privilege:
        subCategory: Databases
        name: scaleway_rdb_privilege
        title: scaleway_rdb_privilege
        examples:
            - name: main
              manifest: |-
                {
                  "database_name": "${scaleway_rdb_database.main.name}",
                  "instance_id": "${scaleway_rdb_instance.main.id}",
                  "permission": "all",
                  "user_name": "${scaleway_rdb_user.main.name}"
                }
              references:
                database_name: scaleway_rdb_database.main.name
                instance_id: scaleway_rdb_instance.main.id
                user_name: scaleway_rdb_user.main.name
              dependencies:
                scaleway_rdb_database.main: |-
                    {
                      "instance_id": "${scaleway_rdb_instance.main.id}",
                      "name": "database"
                    }
                scaleway_rdb_instance.main: |-
                    {
                      "disable_backup": true,
                      "engine": "PostgreSQL-11",
                      "is_ha_cluster": true,
                      "name": "rdb",
                      "node_type": "DB-DEV-S",
                      "password": "thiZ_is_v\u0026ry_s3cret",
                      "user_name": "my_initial_user"
                    }
                scaleway_rdb_user.main: |-
                    {
                      "instance_id": "${scaleway_rdb_instance.main.id}",
                      "is_admin": false,
                      "name": "my-db-user",
                      "password": "thiZ_is_v\u0026ry_s3cret"
                    }
        argumentDocs:
            database_name: '- (Required) Name of the database (e.g. my-db-name).'
            id: '- The ID of the user privileges, which is of the form {region}/{instance_id}/{database_name}/{user_name}, e.g. fr-par/11111111-1111-1111-1111-111111111111/database_name/foo'
            instance_id: '- (Required) UUID of the Database Instance.'
            permission: '- (Required) Permission to set. Valid values are readonly, readwrite, all, custom and none.'
            region: '- (Defaults to provider region) The region in which the resource exists.'
            user_name: '- (Required) Name of the user (e.g. my-db-user).'
        importStatements: []
    scaleway_rdb_read_replica:
        subCategory: Databases
        name: scaleway_rdb_read_replica
        title: scaleway_rdb_read_replica
        examples:
            - name: replica
              manifest: |-
                {
                  "direct_access": [
                    {}
                  ],
                  "instance_id": "${scaleway_rdb_instance.instance.id}"
                }
              references:
                instance_id: scaleway_rdb_instance.instance.id
              dependencies:
                scaleway_rdb_instance.instance: |-
                    {
                      "disable_backup": true,
                      "engine": "PostgreSQL-14",
                      "is_ha_cluster": false,
                      "name": "test-rdb-rr-update",
                      "node_type": "db-dev-s",
                      "password": "thiZ_is_v\u0026ry_s3cret",
                      "tags": [
                        "terraform-test",
                        "scaleway_rdb_read_replica",
                        "minimal"
                      ],
                      "user_name": "my_initial_user"
                    }
            - name: replica
              manifest: |-
                {
                  "instance_id": "${scaleway_rdb_instance.instance.id}",
                  "private_network": [
                    {
                      "private_network_id": "${scaleway_vpc_private_network.pn.id}",
                      "service_ip": "192.168.1.254/24"
                    }
                  ]
                }
              references:
                instance_id: scaleway_rdb_instance.instance.id
                private_network.private_network_id: scaleway_vpc_private_network.pn.id
              dependencies:
                scaleway_rdb_instance.instance: |-
                    {
                      "disable_backup": true,
                      "engine": "PostgreSQL-14",
                      "is_ha_cluster": false,
                      "name": "rdb_instance",
                      "node_type": "db-dev-s",
                      "password": "thiZ_is_v\u0026ry_s3cret",
                      "user_name": "my_initial_user"
                    }
                scaleway_vpc_private_network.pn: '{}'
            - name: replica
              manifest: |-
                {
                  "instance_id": "${scaleway_rdb_instance.instance.id}",
                  "private_network": [
                    {
                      "enable_ipam": true,
                      "private_network_id": "${scaleway_vpc_private_network.pn.id}"
                    }
                  ]
                }
              references:
                instance_id: scaleway_rdb_instance.instance.id
                private_network.private_network_id: scaleway_vpc_private_network.pn.id
              dependencies:
                scaleway_rdb_instance.instance: |-
                    {
                      "disable_backup": true,
                      "engine": "PostgreSQL-14",
                      "is_ha_cluster": false,
                      "name": "rdb_instance",
                      "node_type": "db-dev-s",
                      "password": "thiZ_is_v\u0026ry_s3cret",
                      "user_name": "my_initial_user"
                    }
                scaleway_vpc_private_network.pn: '{}'
        argumentDocs:
            direct_access: '- (Optional) Creates a direct access endpoint to rdb replica.'
            enable_ipam: '- (Optional) If true, the IP network address within the private subnet is determined by the IP Address Management (IPAM) service.'
            endpoint_id: '- The ID of the endpoint of the Read Replica.'
            hostname: '- Hostname of the endpoint. Only one of IP and hostname may be set.'
            id: '- The ID of the Read Replica.'
            instance_id: '- (Required) UUID of the rdb instance.'
            ip: '- IPv4 address of the endpoint (IP address). Only one of IP and hostname may be set.'
            name: '- Name of the endpoint.'
            port: '- TCP port of the endpoint.'
            private_network: '- (Optional) Create an endpoint in a Private Netork.'
            private_network_id: '- (Required) UUID of the Private Netork to be connected to the Read Replica.'
            region: |-
                - (Defaults to provider region) The region
                in which the Read Replica should be created.
            same_zone: '- (Defaults to true) Defines whether to create the replica in the same availability zone as the main instance nodes or not.'
            service_ip: '- (Optional) The IP network address within the private subnet. This must be an IPv4 address with a CIDR notation. If not set, The IP network address within the private subnet is determined by the IP Address Management (IPAM) service.'
        importStatements: []
    scaleway_rdb_user:
        subCategory: Databases
        name: scaleway_rdb_user
        title: scaleway_rdb_user
        examples:
            - name: db_admin
              manifest: |-
                {
                  "instance_id": "${scaleway_rdb_instance.main.id}",
                  "is_admin": true,
                  "name": "devtools",
                  "password": "${random_password.db_password.result}"
                }
              references:
                instance_id: scaleway_rdb_instance.main.id
                password: random_password.db_password.result
              dependencies:
                random_password.db_password: |-
                    {
                      "length": 16,
                      "special": true
                    }
                scaleway_rdb_instance.main: |-
                    {
                      "disable_backup": true,
                      "engine": "PostgreSQL-15",
                      "is_ha_cluster": true,
                      "name": "test-rdb",
                      "node_type": "DB-DEV-S",
                      "password": "thiZ_is_v\u0026ry_s3cret",
                      "user_name": "my_initial_user"
                    }
        argumentDocs:
            id: '- The ID of the user, which is of the form {region}/{instance_id}/{user_name}, e.g. fr-par/11111111-1111-1111-1111-111111111111/admin'
            instance_id: '- (Required) UUID of the Database Instance.'
            is_admin: '- (Optional) Grant admin permissions to the database user.'
            name: '- (Required) database user name.'
            password: '- (Required) database user password.'
            region: '- The Scaleway region this resource resides in.'
        importStatements: []
    scaleway_redis_cluster:
        subCategory: Redis
        name: scaleway_redis_cluster
        title: scaleway_redis_cluster
        examples:
            - name: main
              manifest: |-
                {
                  "acl": [
                    {
                      "description": "Allow all",
                      "ip": "0.0.0.0/0"
                    }
                  ],
                  "cluster_size": 1,
                  "name": "test_redis_basic",
                  "node_type": "RED1-MICRO",
                  "password": "thiZ_is_v\u0026ry_s3cret",
                  "tags": [
                    "test",
                    "redis"
                  ],
                  "tls_enabled": "true",
                  "user_name": "my_initial_user",
                  "version": "6.2.7"
                }
            - name: main
              manifest: |-
                {
                  "name": "test_redis_basic",
                  "node_type": "RED1-MICRO",
                  "password": "thiZ_is_v\u0026ry_s3cret",
                  "settings": {
                    "maxclients": "1000",
                    "tcp-keepalive": "120"
                  },
                  "user_name": "my_initial_user",
                  "version": "6.2.7"
                }
            - name: main
              manifest: |-
                {
                  "cluster_size": 1,
                  "depends_on": [
                    "${scaleway_vpc_private_network.pn}"
                  ],
                  "name": "test_redis_endpoints",
                  "node_type": "RED1-MICRO",
                  "password": "thiZ_is_v\u0026ry_s3cret",
                  "private_network": [
                    {
                      "id": "${scaleway_vpc_private_network.pn.id}",
                      "service_ips": [
                        "10.12.1.1/20"
                      ]
                    }
                  ],
                  "user_name": "my_initial_user",
                  "version": "6.2.7"
                }
              dependencies:
                scaleway_vpc_private_network.pn: |-
                    {
                      "name": "private-network"
                    }
        argumentDocs:
            acl: '- (Optional) List of acl rules, this is cluster''s authorized IPs. More details on the ACL section.'
            acl.acl: conflict with private_network. Only one should be specified.
            acl.description: '- (Optional) A text describing this rule. Default description: Allow IP'
            acl.ip: |-
                - (Required) The IP range to whitelist
                in CIDR notation
            certificate: '- The PEM of the certificate used by redis, only when tls_enabled is true'
            cluster_size: '- (Optional) The number of nodes in the Redis™ cluster.'
            created_at: '- The date and time of creation of the Redis™ cluster.'
            endpoint_id: '- The ID of the endpoint.'
            id: '- The ID of the Redis™ cluster.'
            name: '- (Optional) The name of the Redis™ cluster.'
            node_type: '- (Required) The type of Redis™ cluster you want to create (e.g. RED1-M).'
            password: '- (Required) Password for the first user of the Redis™ cluster.'
            private_network: |-
                - (Optional) Describes the Private Network you want to connect to your cluster. If not set, a public
                network will be provided. More details on the Private Network section
            private_network.cluster_size: |-
                = 1) : you can attach as many Private Networks as you want (each must be a separate
                block). If you detach your only Private Network, your cluster won't be reachable until you define a new Private or
                Public Network. You can modify your private_network and its specs, you can have both a Private and Public Network side
                by side.
            private_network.id: '- (Required) The UUID of the Private Network resource.'
            private_network.service_ips: |-
                - (Optional) Endpoint IPv4 addresses in CIDR notation. You must provide at least one IP per node.
                Keep in mind that in cluster mode you cannot edit your Private Network after its creation so if you want to be able to
                scale your cluster horizontally (adding nodes) later, you should provide more IPs than nodes.
                If not set, the IP network address within the private subnet is determined by the IP Address Management (IPAM) service.
            project_id: |-
                - (Defaults to provider project_id) The ID of the project the Redis™ cluster is
                associated with.
            public_network: |-
                - (Optional) Public network details. Only one of private_network and public_network may be set.
                ~> The public_network block exports:
            public_network.id: '- (Required) The UUID of the endpoint.'
            public_network.ips: '- Lis of IPv4 address of the endpoint (IP address).'
            public_network.port: '- TCP port of the endpoint.'
            settings: |-
                - (Optional) Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions
                with scaleway API or CLI
            tags: '- (Optional) The tags associated with the Redis™ cluster.'
            tls_enabled: '- (Defaults to false) Whether TLS is enabled or not.'
            updated_at: '- The date and time of the last update of the Redis™ cluster.'
            user_name: '- (Required) Identifier for the first user of the Redis™ cluster.'
            version: '- (Required) Redis™ cluster''s version (e.g. 6.2.7).'
            zone: |-
                - (Defaults to provider zone) The zone in which the
                Redis™ cluster should be created.
        importStatements: []
    scaleway_registry_namespace:
        subCategory: Container Registry
        name: scaleway_registry_namespace
        title: scaleway_registry_namespace
        examples:
            - name: main
              manifest: |-
                {
                  "description": "Main container registry",
                  "is_public": false,
                  "name": "main-cr"
                }
        argumentDocs:
            description: (Optional) The description of the namespace.
            endpoint: '- Endpoint reachable by Docker.'
            id: '- The ID of the namespace'
            is_public: (Defaults to false) Whether the images stored in the namespace should be downloadable publicly (docker pull).
            name: '- (Required) The unique name of the namespace.'
            organization_id: '- The Organization ID the namespace is associated with.'
            project_id: '- (Defaults to provider project_id) The ID of the project the namespace is associated with.'
            region: '- (Defaults to provider region). The region in which the namespace should be created.'
        importStatements: []
    scaleway_sdb_sql_database:
        subCategory: Databases
        name: scaleway_sdb_sql_database
        title: scaleway_sdb_sql_database
        examples:
            - name: database
              manifest: |-
                {
                  "max_cpu": 8,
                  "min_cpu": 0,
                  "name": "my-database"
                }
            - name: database
              manifest: |-
                {
                  "max_cpu": 8,
                  "min_cpu": 0,
                  "name": "my-database"
                }
              dependencies:
                scaleway_iam_api_key.api_key: |-
                    {
                      "application_id": "${scaleway_iam_application.app.id}"
                    }
                scaleway_iam_application.app: |-
                    {
                      "name": "my app"
                    }
                scaleway_iam_policy.db_access: |-
                    {
                      "application_id": "${scaleway_iam_application.app.id}",
                      "description": "gives app access to serverless database in project",
                      "name": "my policy",
                      "rule": [
                        {
                          "permission_set_names": [
                            "ServerlessSQLDatabaseReadWrite"
                          ],
                          "project_ids": [
                            "${data.scaleway_account_project.default.id}"
                          ]
                        }
                      ]
                    }
        argumentDocs:
            endpoint: '- The endpoint of the database.'
            id: '- The unique identifier of the database, which is of the form {region}/{id} e.g. fr-par/11111111-1111-1111-1111-111111111111.'
            max_cpu: '- (Optional) The maximum number of CPU units for your database. Defaults to 15.'
            min_cpu: '- (Optional) The minimum number of CPU units for your database. Defaults to 0.'
            name: '- (Required) The name of the database (e.g. my-new-database).'
            region: '- (Defaults to provider region) The region in which the resource exists.'
        importStatements: []
    scaleway_secret:
        subCategory: Secrets
        name: scaleway_secret
        title: scaleway_secret
        examples:
            - name: main
              manifest: |-
                {
                  "description": "barr",
                  "name": "foo",
                  "tags": [
                    "foo",
                    "terraform"
                  ]
                }
            - name: ephemeral
              manifest: |-
                {
                  "ephemeral_policy": [
                    {
                      "action": "disable",
                      "expires_once_accessed": true,
                      "ttl": "24h"
                    }
                  ],
                  "name": "foo"
                }
        argumentDocs:
            action: '- (Required) Action to perform when the version of a secret expires. Available values can be found in SDK constants.'
            created_at: '- Date and time of the secret''s creation (in RFC 3339 format).'
            description: '- (Optional) Description of the secret (e.g. my-new-description).'
            ephemeral_policy: '- (Optional) Ephemeral policy of the secret. Policy that defines whether/when a secret''s versions expire. By default, the policy is applied to all the secret''s versions.'
            expires_once_accessed: '- (Optional) True if the secret version expires after a single user access.'
            name: '- (Required) Name of the secret (e.g. my-secret).'
            path: '- (Optional) Path of the secret, defaults to /.'
            project_id: '- (Optional) The project ID containing is the secret.'
            protected: '- (Optional) True if secret protection is enabled on the secret. A protected secret cannot be deleted, terraform will fail to destroy unless this is set to false.'
            region: |-
                - (Defaults to provider region) The region
                in which the resource exists.
            status: '- The status of the secret.'
            tags: '- (Optional) Tags of the secret (e.g. ["tag", "secret"]).'
            ttl: '- (Optional) Time frame, from one second and up to one year, during which the secret''s versions are valid. Has to be specified in Go Duration format (ex: "30m", "24h").'
            type: '- (Optional) Type of the secret. If not specified, the type is Opaque. Available values can be found in SDK Constants.'
            updated_at: '- Date and time of the secret''s last update (in RFC 3339 format).'
            version_count: '- The amount of secret versions.'
        importStatements: []
    scaleway_secret_version:
        subCategory: Secrets
        name: scaleway_secret_version
        title: scaleway_secret_version
        examples:
            - name: v1
              manifest: |-
                {
                  "data": "my_new_secret",
                  "description": "version1",
                  "secret_id": "${scaleway_secret.main.id}"
                }
              references:
                secret_id: scaleway_secret.main.id
              dependencies:
                scaleway_secret.main: |-
                    {
                      "description": "barr",
                      "name": "foo",
                      "tags": [
                        "foo",
                        "terraform"
                      ]
                    }
        argumentDocs:
            created_at: '- The date and time of the secret version''s creation (in RFC 3339 format).'
            data: '- (Required) The data payload of the secret version. Must not exceed 64KiB in size (e.g. my-secret-version-payload). Find out more on the data section.'
            description: '- (Optional) Description of the secret version (e.g. my-new-description).'
            my_new_secret: data
            region: '- (Defaults to the region specified in the provider configuration). The region where the resource exists.'
            revision: '- The revision number of the secret version.'
            secret_id: '- (Required) The ID of the secret associated with the version.'
            status: '- The status of the secret version.'
            updated_at: '- The date and time of the secret version''s last update (in RFC 3339 format).'
        importStatements: []
    scaleway_tem_domain:
        subCategory: Transactional Email
        name: scaleway_tem_domain
        title: scaleway_tem_domain
        examples:
            - name: main
              manifest: |-
                {
                  "accept_tos": true,
                  "name": "example.com"
                }
              dependencies:
                scaleway_tem_domain_validation.example: |-
                    {
                      "domain_id": "${scaleway_tem_domain.main.id}",
                      "region": "fr-par",
                      "timeout": 300
                    }
        argumentDocs:
            domain_id: '- (Required) The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway''s Transactional Email service.'
            region: '- (Defaults to provider region). Specifies the region where the domain is registered. If not specified, it defaults to the provider''s region.'
            timeout: '- (Optional) The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.'
            validated: '- Indicates if the domain has been verified for email sending. This is computed after the creation or update of the domain validation resource.'
        importStatements: []
    scaleway_tem_webhook:
        subCategory: Transactional Email
        name: scaleway_tem_webhook
        title: scaleway_tem_webhook
        examples:
            - name: main
              manifest: |-
                {
                  "domain_id": "your-domain-id",
                  "event_types": [
                    "email_delivered",
                    "email_bounced"
                  ],
                  "name": "example-webhook",
                  "sns_arn": "arn:scw:sns:fr-par:project-xxxx:your-sns-topic"
                }
            - name: webhook
              manifest: |-
                {
                  "depends_on": [
                    "${scaleway_tem_domain_validation.valid}",
                    "${scaleway_mnq_sns_topic.sns_topic}"
                  ],
                  "domain_id": "${scaleway_tem_domain.cr01.id}",
                  "event_types": [
                    "email_delivered",
                    "email_bounced"
                  ],
                  "name": "example-webhook",
                  "sns_arn": "${scaleway_mnq_sns_topic.sns_topic.arn}"
                }
              references:
                domain_id: scaleway_tem_domain.cr01.id
                sns_arn: scaleway_mnq_sns_topic.sns_topic.arn
              dependencies:
                scaleway_domain_record.dkim: |-
                    {
                      "data": "${scaleway_tem_domain.cr01.dkim_config}",
                      "dns_zone": "${var.domain_name}",
                      "name": "${scaleway_tem_domain.cr01.project_id}._domainkey",
                      "type": "TXT"
                    }
                scaleway_domain_record.dmarc: |-
                    {
                      "data": "${scaleway_tem_domain.cr01.dmarc_config}",
                      "dns_zone": "${var.domain_name}",
                      "name": "${scaleway_tem_domain.cr01.dmarc_name}",
                      "type": "TXT"
                    }
                scaleway_domain_record.mx: |-
                    {
                      "data": ".",
                      "dns_zone": "${var.domain_name}",
                      "type": "MX"
                    }
                scaleway_domain_record.spf: |-
                    {
                      "data": "v=spf1 ${scaleway_tem_domain.cr01.spf_config} -all",
                      "dns_zone": "${var.domain_name}",
                      "type": "TXT"
                    }
                scaleway_mnq_sns.sns: '{}'
                scaleway_mnq_sns_credentials.sns_credentials: |-
                    {
                      "permissions": [
                        {
                          "can_manage": true
                        }
                      ]
                    }
                scaleway_mnq_sns_topic.sns_topic: |-
                    {
                      "access_key": "${scaleway_mnq_sns_credentials.sns_credentials.access_key}",
                      "name": "test-mnq-sns-topic-basic",
                      "secret_key": "${scaleway_mnq_sns_credentials.sns_credentials.secret_key}"
                    }
                scaleway_tem_domain.cr01: |-
                    {
                      "accept_tos": true,
                      "name": "${var.domain_name}"
                    }
                scaleway_tem_domain_validation.valid: |-
                    {
                      "domain_id": "${scaleway_tem_domain.cr01.id}",
                      "region": "${scaleway_tem_domain.cr01.region}",
                      "timeout": 3600
                    }
        argumentDocs:
            created_at: '- The date and time of the webhook''s creation (RFC 3339 format).'
            domain_id: '- (Required) The ID of the domain the webhook is associated with.'
            event_types: '- (Required) A list of event types that trigger the webhook.'
            id: '- The ID of the webhook.'
            name: '- (Optional) The name of the webhook. Defaults to an autogenerated name if not provided.'
            organization_id: '- The ID of the organization the webhook belongs to.'
            project_id: '- (Defaults to provider project_id) The ID of the project the webhook is associated with.'
            region: '- (Defaults to provider region). The region in which the webhook should be created.'
            sns_arn: '- (Required) The Amazon Resource Name (ARN) of the SNS topic.'
            updated_at: '- The date and time of the webhook''s last update (RFC 3339 format).'
        importStatements: []
    scaleway_vpc:
        subCategory: VPC
        name: scaleway_vpc
        title: scaleway_vpc
        examples:
            - name: vpc01
              manifest: |-
                {
                  "name": "my-vpc",
                  "tags": [
                    "demo",
                    "terraform"
                  ]
                }
            - name: vpc01
              manifest: |-
                {
                  "enable_routing": true,
                  "name": "my-vpc",
                  "tags": [
                    "demo",
                    "terraform",
                    "routing"
                  ]
                }
        argumentDocs:
            created_at: '- Date and time of VPC''s creation (RFC 3339 format).'
            enable_routing: '- (Optional) Enable routing between Private Networks in the VPC. Note that you will not be able to deactivate it afterwards.'
            id: '- The ID of the VPC.'
            is_default: '- Defines whether the VPC is the default one for its Project.'
            name: '- (Optional) The name for the VPC. If not provided it will be randomly generated.'
            organization_id: '- The Organization ID the VPC is associated with.'
            project_id: '- (Defaults to provider project_id) The ID of the Project the VPC is associated with.'
            region: '- (Defaults to provider region) The region of the VPC.'
            tags: '- (Optional) The tags to associate with the VPC.'
            updated_at: '- Date and time of VPC''s last update (RFC 3339 format).'
        importStatements: []
    scaleway_vpc_gateway_network:
        subCategory: VPC
        name: scaleway_vpc_gateway_network
        title: scaleway_vpc_gateway_network
        examples:
            - name: main
              manifest: |-
                {
                  "enable_masquerade": true,
                  "gateway_id": "${scaleway_vpc_public_gateway.pg01.id}",
                  "ipam_config": [
                    {
                      "push_default_route": true
                    }
                  ],
                  "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                }
              references:
                gateway_id: scaleway_vpc_public_gateway.pg01.id
                private_network_id: scaleway_vpc_private_network.pn01.id
              dependencies:
                scaleway_vpc.vpc01: |-
                    {
                      "name": "my vpc"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "ipv4_subnet": [
                        {
                          "subnet": "172.16.64.0/22"
                        }
                      ],
                      "name": "pn_test_network",
                      "vpc_id": "${scaleway_vpc.vpc01.id}"
                    }
                scaleway_vpc_public_gateway.pg01: |-
                    {
                      "name": "foobar",
                      "type": "VPC-GW-S"
                    }
            - name: main
              manifest: |-
                {
                  "enable_masquerade": true,
                  "gateway_id": "${scaleway_vpc_public_gateway.pg01.id}",
                  "ipam_config": [
                    {
                      "ipam_ip_id": "${scaleway_ipam_ip.ip01.id}",
                      "push_default_route": true
                    }
                  ],
                  "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                }
              references:
                gateway_id: scaleway_vpc_public_gateway.pg01.id
                ipam_config.ipam_ip_id: scaleway_ipam_ip.ip01.id
                private_network_id: scaleway_vpc_private_network.pn01.id
              dependencies:
                scaleway_ipam_ip.ip01: |-
                    {
                      "address": "172.16.64.7",
                      "source": [
                        {
                          "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                        }
                      ]
                    }
                scaleway_vpc.vpc01: |-
                    {
                      "name": "my vpc"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "ipv4_subnet": [
                        {
                          "subnet": "172.16.64.0/22"
                        }
                      ],
                      "name": "pn_test_network",
                      "vpc_id": "${scaleway_vpc.vpc01.id}"
                    }
                scaleway_vpc_public_gateway.pg01: |-
                    {
                      "name": "foobar",
                      "type": "VPC-GW-S"
                    }
            - name: main
              manifest: |-
                {
                  "cleanup_dhcp": true,
                  "dhcp_id": "${scaleway_vpc_public_gateway_dhcp.dhcp01.id}",
                  "enable_masquerade": true,
                  "gateway_id": "${scaleway_vpc_public_gateway.pg01.id}",
                  "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                }
              references:
                dhcp_id: scaleway_vpc_public_gateway_dhcp.dhcp01.id
                gateway_id: scaleway_vpc_public_gateway.pg01.id
                private_network_id: scaleway_vpc_private_network.pn01.id
              dependencies:
                scaleway_vpc_private_network.pn01: |-
                    {
                      "name": "pn_test_network"
                    }
                scaleway_vpc_public_gateway.pg01: |-
                    {
                      "ip_id": "${scaleway_vpc_public_gateway_ip.gw01.id}",
                      "name": "foobar",
                      "type": "VPC-GW-S"
                    }
                scaleway_vpc_public_gateway_dhcp.dhcp01: |-
                    {
                      "push_default_route": true,
                      "subnet": "192.168.1.0/24"
                    }
                scaleway_vpc_public_gateway_ip.gw01: '{}'
            - name: main
              manifest: |-
                {
                  "enable_dhcp": false,
                  "enable_masquerade": true,
                  "gateway_id": "${scaleway_vpc_public_gateway.pg01.id}",
                  "private_network_id": "${scaleway_vpc_private_network.pn01.id}",
                  "static_address": "192.168.1.42/24"
                }
              references:
                gateway_id: scaleway_vpc_public_gateway.pg01.id
                private_network_id: scaleway_vpc_private_network.pn01.id
              dependencies:
                scaleway_vpc_private_network.pn01: |-
                    {
                      "name": "pn_test_network"
                    }
                scaleway_vpc_public_gateway.pg01: |-
                    {
                      "name": "foobar",
                      "type": "VPC-GW-S"
                    }
        argumentDocs:
            cleanup_dhcp: '- (Defaults to false) Whether to remove DHCP configuration on this GatewayNetwork upon destroy. Requires DHCP ID.'
            created_at: '- The date and time of the creation of the GatewayNetwork.'
            dhcp_id: '- (Required) The ID of the Public Gateway DHCP configuration. Only one of dhcp_id, static_address and ipam_config should be specified.'
            enable_dhcp: '- (Defaults to true) WWhether a DHCP configuration should be enabled on this GatewayNetwork. Requires a DHCP ID.'
            enable_masquerade: '- (Defaults to true) Whether masquerade (dynamic NAT) should be enabled on this GatewayNetwork'
            gateway_id: '- (Required) The ID of the Public Gateway.'
            id: '- The ID of the GatewayNetwork'
            ipam_config: '- Auto-configure the GatewayNetwork using Scaleway''s IPAM (IP address management service). Only one of dhcp_id, static_address and ipam_config should be specified.'
            ipam_ip_id: '- Use this IPAM-booked IP ID as the Gateway''s IP in this Private Network.'
            mac_address: '- The MAC address of the GatewayNetwork.'
            private_network_id: '- (Required) The ID of the Private Network.'
            push_default_route: '- Defines whether to enable the default route on the GatewayNetwork.'
            static_address: '- Enable DHCP configration on this GatewayNetwork. Only one of dhcp_id, static_address and ipam_config should be specified.'
            status: '- The status of the Public Gateway''s connection to the Private Network.'
            updated_at: '- The date and time of the last update of the GatewayNetwork.'
            zone: '- (Defaults to provider zone) The zone in which the gateway network should be created.'
        importStatements: []
    scaleway_vpc_private_network:
        subCategory: VPC
        name: scaleway_vpc_private_network
        title: scaleway_vpc_private_network
        examples:
            - name: pn_priv
              manifest: |-
                {
                  "name": "subnet_demo",
                  "tags": [
                    "demo",
                    "terraform"
                  ]
                }
            - name: pn_priv
              manifest: |-
                {
                  "ipv4_subnet": [
                    {
                      "subnet": "192.168.0.0/24"
                    }
                  ],
                  "ipv6_subnets": [
                    {
                      "subnet": "fd46:78ab:30b8:177c::/64"
                    },
                    {
                      "subnet": "fd46:78ab:30b8:c7df::/64"
                    }
                  ],
                  "name": "subnet_demo",
                  "tags": [
                    "demo",
                    "terraform"
                  ]
                }
        argumentDocs:
            address: '- The network address of the subnet in dotted decimal notation, e.g., ''192.168.0.0'' for a ''192.168.0.0/24'' subnet.'
            created_at: '- The date and time of the creation of the Private Network (RFC 3339 format).'
            id: '- The ID of the Private Network.'
            ipv4_subnet: '- (Optional) The IPv4 subnet to associate with the Private Network.'
            ipv6_subnets: '- (Optional) The IPv6 subnets to associate with the private network.'
            is_regional: '- (Deprecated) Private Networks are now all necessarily regional.'
            name: '- (Optional) The name of the Private Network. If not provided, it will be randomly generated.'
            organization_id: '- The Organization ID the Private Network is associated with.'
            prefix_length: '- The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.'
            project_id: '- (Defaults to provider project_id) The ID of the Project the private network is associated with.'
            region: '- (Defaults to provider region) The region of the Private Network.'
            subnet: '- (Optional) The subnet CIDR.'
            subnet_mask: '- The subnet mask expressed in dotted decimal notation, e.g., ''255.255.255.0'' for a /24 subnet'
            tags: '- (Optional) The tags associated with the Private Network.'
            updated_at: '- The date and time of the creation of the Private Network (RFC 3339 format).'
            vpc_id: '- (Optional) The VPC in which to create the Private Network.'
            zone: '- (Deprecated) Use region instead.'
        importStatements: []
    scaleway_vpc_public_gateway:
        subCategory: VPC
        name: scaleway_vpc_public_gateway
        title: scaleway_vpc_public_gateway
        examples:
            - name: main
              manifest: |-
                {
                  "name": "public_gateway_demo",
                  "tags": [
                    "demo",
                    "terraform"
                  ],
                  "type": "VPC-GW-S"
                }
        argumentDocs:
            bastion_enabled: '- (Optional) Enable SSH bastion on the gateway.'
            bastion_port: '- (Optional) The port on which the SSH bastion will listen.'
            created_at: '- The date and time of the creation of the Public Gateway.'
            enable_smtp: '- (Optional) Enable SMTP on the gateway.'
            id: '- The ID of the Public Gateway.'
            ip_id: '- (Optional) Attach an existing flexible IP to the gateway.'
            name: '- (Optional) The name for the Public Gateway. If not provided it will be randomly generated.'
            organization_id: '- The Organization ID the Public Gateway is associated with.'
            project_id: '- (Defaults to provider project_id) The ID of the project the public gateway is associated with.'
            refresh_ssh_keys: '- (Optional) Trigger a refresh of the SSH keys on the Public Gateway by changing this field''s value.'
            status: '- The status of the public gateway.'
            tags: '- (Optional) The tags to associate with the Public Gateway.'
            type: '- (Required) The gateway type.'
            updated_at: '- The date and time of the last update of the Public Gateway.'
            upstream_dns_servers: '- (Optional) Override the gateway''s default recursive DNS servers, if DNS features are enabled.'
            zone: '- (Defaults to provider zone) The zone in which the Public Gateway should be created.'
        importStatements: []
    scaleway_vpc_public_gateway_dhcp:
        subCategory: VPC
        name: scaleway_vpc_public_gateway_dhcp
        title: scaleway_vpc_public_gateway_dhcp
        examples:
            - name: main
              manifest: |-
                {
                  "subnet": "192.168.1.0/24"
                }
        argumentDocs:
            address: '- (Optional) The IP address of the DHCP server. This will be the gateway''s address in the Private Network.'
            created_at: '- The date and time of the creation of the Public Gateway DHCP configuration.'
            dns_local_name: '- (Optional) TLD given to hostnames in the Private Network. Allowed characters are a-z0-9-.. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to priv.'
            dns_search: '- (Optional) Additional DNS search paths'
            dns_servers_override: '- (Optional) Override the DNS server list pushed to DHCP clients, instead of the gateway itself.'
            enable_dynamic: '- (Optional) Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to true.'
            id: '- The ID of the public gateway DHCP config.'
            organization_id: '- The Organization ID the Public Gateway DHCP config is associated with.'
            pool_high: '- (Optional) High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.'
            pool_low: '- (Optional) Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.'
            project_id: '- (Defaults to provider project_id) The ID of the Project the Public Gateway DHCP configuration is associated with.'
            push_default_route: '- (Optional) Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to true.'
            push_dns_server: '- (Optional) Whether the gateway should push custom DNS servers to clients. This allows for instance hostname -> IP resolution. Defaults to true.'
            rebind_timer: '- (Optional) After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than valid_lifetime. Defaults to 51m (3060s).'
            renew_timer: '- (Optional) After how long, in seconds, a renewal will be attempted. Must be 30s lower than rebind_timer. Defaults to 50m (3000s).'
            subnet: '- (Required) The subnet to associate with the Public Gateway DHCP configuration.'
            updated_at: '- The date and time of the last update of the Public Gateway DHCP configuration.'
            valid_lifetime: '- (Optional) How long, in seconds, DHCP entries will be valid. Defaults to 1h (3600s).'
            zone: '- (Defaults to provider zone) The zone in which the Public Gateway DHCP configuration should be created.'
        importStatements: []
    scaleway_vpc_public_gateway_dhcp_reservation:
        subCategory: VPC
        name: scaleway_vpc_public_gateway_dhcp_reservation
        title: scaleway_vpc_public_gateway_dhcp_reservation
        examples:
            - name: main
              manifest: |-
                {
                  "gateway_network_id": "${scaleway_vpc_gateway_network.main.id}",
                  "ip_address": "192.168.1.1",
                  "mac_address": "${scaleway_instance_server.main.private_network.0.mac_address}"
                }
              references:
                gateway_network_id: scaleway_vpc_gateway_network.main.id
                mac_address: scaleway_instance_server.main.private_network.0.mac_address
              dependencies:
                scaleway_instance_server.main: |-
                    {
                      "image": "ubuntu_jammy",
                      "private_network": [
                        {
                          "pn_id": "${scaleway_vpc_private_network.main.id}"
                        }
                      ],
                      "type": "DEV1-S",
                      "zone": "fr-par-1"
                    }
                scaleway_vpc_gateway_network.main: |-
                    {
                      "cleanup_dhcp": true,
                      "depends_on": [
                        "${scaleway_vpc_public_gateway_ip.main}",
                        "${scaleway_vpc_private_network.main}"
                      ],
                      "dhcp_id": "${scaleway_vpc_public_gateway_dhcp.main.id}",
                      "enable_masquerade": true,
                      "gateway_id": "${scaleway_vpc_public_gateway.main.id}",
                      "private_network_id": "${scaleway_vpc_private_network.main.id}"
                    }
                scaleway_vpc_private_network.main: |-
                    {
                      "name": "your_private_network"
                    }
                scaleway_vpc_public_gateway.main: |-
                    {
                      "ip_id": "${scaleway_vpc_public_gateway_ip.main.id}",
                      "name": "foobar",
                      "type": "VPC-GW-S"
                    }
                scaleway_vpc_public_gateway_dhcp.main: |-
                    {
                      "subnet": "192.168.1.0/24"
                    }
                scaleway_vpc_public_gateway_ip.main: '{}'
        argumentDocs:
            created_at: '- The date and time of the creation of the Public Gateway DHCP configuration.'
            gateway_network_id: '- (Required) The ID of the owning GatewayNetwork.'
            hostname: '- The hostname of the client machine.'
            id: '- The ID of the Public Gateway DHCP reservation configuration.'
            ip_address: '- (Required) The IP address to give to the machine.'
            mac_address: '- (Required) The MAC address for the static entry.'
            type: '- The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.'
            updated_at: '- The date and time of the last update of the Public Gateway DHCP configuration.'
            zone: '- (Defaults to provider zone) The zone in which the public gateway DHCP config should be created.'
        importStatements: []
    scaleway_vpc_public_gateway_ip:
        subCategory: VPC
        name: scaleway_vpc_public_gateway_ip
        title: scaleway_vpc_public_gateway_ip
        examples:
            - name: main
              manifest: |-
                {
                  "reverse": "tf.example.com"
                }
              dependencies:
                scaleway_domain_record.tf_A: |-
                    {
                      "data": "${scaleway_vpc_public_gateway_ip.main.address}",
                      "dns_zone": "example.com",
                      "name": "tf",
                      "priority": 1,
                      "ttl": 3600,
                      "type": "A"
                    }
        argumentDocs:
            address: '- The IP address itself.'
            created_at: '- The date and time of the creation of the Public Gateway IP.'
            id: '- The ID of the Public Gateway IP.'
            organization_id: '- The Organization ID the Public Gateway IP is associated with.'
            project_id: '- (Defaults to provider project_id) The ID of the Project the Public Gateway IP is associated with.'
            reverse: '- (Optional) The reverse domain name for the IP address'
            tags: '- (Optional) The tags associated with the Public Gateway IP.'
            updated_at: '- The date and time of the last update of the Public Gateway IP.'
            zone: '- (Defaults to provider zone) The zone in which the Public Gateway IP should be created.'
        importStatements: []
    scaleway_vpc_public_gateway_ip_reverse_dns:
        subCategory: VPC
        name: scaleway_vpc_public_gateway_ip_reverse_dns
        title: scaleway_vpc_public_gateway_ip_reverse_dns
        examples:
            - name: main
              manifest: |-
                {
                  "gateway_ip_id": "${scaleway_vpc_public_gateway_ip.main.id}",
                  "reverse": "tf.example.com"
                }
              references:
                gateway_ip_id: scaleway_vpc_public_gateway_ip.main.id
              dependencies:
                scaleway_domain_record.tf_A: |-
                    {
                      "data": "${scaleway_vpc_public_gateway_ip.main.address}",
                      "dns_zone": "example.com",
                      "name": "tf",
                      "priority": 1,
                      "ttl": 3600,
                      "type": "A"
                    }
                scaleway_vpc_public_gateway_ip.main: '{}'
        argumentDocs:
            gateway_ip_id: '- (Required) The Public Gateway IP ID'
            id: '- The ID of the Public Gateway IP for which the reverse DNS is configured.'
            reverse: '- (Required) The reverse domain name for this IP address'
            zone: '- (Defaults to provider zone) The zone in which the IP should be reserved.'
        importStatements: []
    scaleway_vpc_public_gateway_pat_rule:
        subCategory: VPC
        name: scaleway_vpc_public_gateway_pat_rule
        title: scaleway_vpc_public_gateway_pat_rule
        examples:
            - name: pat01
              manifest: |-
                {
                  "gateway_id": "${scaleway_vpc_public_gateway.pg01.id}",
                  "private_ip": "${scaleway_vpc_public_gateway_dhcp_reservation.rsv01.ip_address}",
                  "private_port": 22,
                  "protocol": "tcp",
                  "public_port": 2202
                }
              references:
                gateway_id: scaleway_vpc_public_gateway.pg01.id
                private_ip: scaleway_vpc_public_gateway_dhcp_reservation.rsv01.ip_address
              dependencies:
                scaleway_instance_private_nic.pnic01: |-
                    {
                      "private_network_id": "${scaleway_vpc_private_network.pn01.id}",
                      "server_id": "${scaleway_instance_server.srv01.id}"
                    }
                scaleway_instance_security_group.sg01: |-
                    {
                      "inbound_default_policy": "drop",
                      "inbound_rule": [
                        {
                          "action": "accept",
                          "port": 22,
                          "protocol": "TCP"
                        }
                      ],
                      "outbound_default_policy": "accept"
                    }
                scaleway_instance_server.srv01: |-
                    {
                      "image": "ubuntu_jammy",
                      "name": "my-server",
                      "security_group_id": "${scaleway_instance_security_group.sg01.id}",
                      "type": "PLAY2-NANO"
                    }
                scaleway_vpc_gateway_network.gn01: |-
                    {
                      "cleanup_dhcp": true,
                      "dhcp_id": "${scaleway_vpc_public_gateway_dhcp.dhcp01.id}",
                      "enable_masquerade": true,
                      "gateway_id": "${scaleway_vpc_public_gateway.pg01.id}",
                      "private_network_id": "${scaleway_vpc_private_network.pn01.id}"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "name": "my-pn"
                    }
                scaleway_vpc_public_gateway.pg01: |-
                    {
                      "ip_id": "${scaleway_vpc_public_gateway_ip.ip01.id}",
                      "name": "my-pg",
                      "type": "VPC-GW-S"
                    }
                scaleway_vpc_public_gateway_dhcp.dhcp01: |-
                    {
                      "subnet": "192.168.0.0/24"
                    }
                scaleway_vpc_public_gateway_dhcp_reservation.rsv01: |-
                    {
                      "gateway_network_id": "${scaleway_vpc_gateway_network.gn01.id}",
                      "ip_address": "192.168.0.7",
                      "mac_address": "${scaleway_instance_private_nic.pnic01.mac_address}"
                    }
                scaleway_vpc_public_gateway_ip.ip01: '{}'
        argumentDocs:
            created_at: '- The date and time of the creation of the PAT rule configuration.'
            gateway_id: '- (Required) The ID of the Public Gateway.'
            id: '- The ID of the Public Gateway PAT rule.'
            organization_id: '- The Organization ID the PAT rule configuration is associated with.'
            private_ip: '- (Required) The private IP address to forward data to.'
            private_port: '- (Required) The private port to translate to.'
            protocol: '- (Defaults to both) The protocol the rule should apply to. Possible values are both, tcp and udp.'
            public_port: '- (Required) The public port to listen on.'
            updated_at: '- The date and time of the last update of the PAT rule configuration.'
            zone: '- (Defaults to provider zone) The zone in which the Public Gateway DHCP configuration should be created.'
        importStatements: []
    scaleway_vpc_route:
        subCategory: VPC
        name: scaleway_vpc_route
        title: scaleway_vpc_route
        examples:
            - name: rt01
              manifest: |-
                {
                  "description": "tf-route-vpn",
                  "destination": "10.0.0.0/24",
                  "nexthop_resource_id": "${scaleway_instance_private_nic.pnic01.id}",
                  "tags": [
                    "tf",
                    "route"
                  ],
                  "vpc_id": "${scaleway_vpc.vpc01.id}"
                }
              references:
                nexthop_resource_id: scaleway_instance_private_nic.pnic01.id
                vpc_id: scaleway_vpc.vpc01.id
              dependencies:
                scaleway_instance_private_nic.pnic01: |-
                    {
                      "private_network_id": "${scaleway_vpc_private_network.pn01.id}",
                      "server_id": "${scaleway_instance_server.server01.id}"
                    }
                scaleway_instance_server.server01: |-
                    {
                      "image": "openvpn",
                      "name": "tf-server-vpn",
                      "type": "PLAY2-MICRO"
                    }
                scaleway_vpc.vpc01: |-
                    {
                      "name": "tf-vpc-vpn"
                    }
                scaleway_vpc_private_network.pn01: |-
                    {
                      "ipv4_subnet": [
                        {
                          "subnet": "172.16.64.0/22"
                        }
                      ],
                      "name": "tf-pn-vpn",
                      "vpc_id": "${scaleway_vpc.vpc01.id}"
                    }
        argumentDocs:
            created_at: '- The date and time of the creation of the route (RFC 3339 format).'
            description: '- (Optional) The route description.'
            destination: '- (Optional) The destination of the route.'
            id: '- The ID of the route.'
            nexthop_private_network_id: '- (Optional) The ID of the nexthop private network.'
            nexthop_resource_id: '- (Optional) The ID of the nexthop resource.'
            project_id: '- (Defaults to provider project_id) The ID of the Project the route is associated with.'
            region: '- (Defaults to provider region) The region of the route.'
            tags: '- (Optional) The tags to associate with the route.'
            updated_at: '- The date and time of the creation of the route (RFC 3339 format).'
            vpc_id: '- (Required) The VPC ID the route belongs to.'
        importStatements: []
    scaleway_webhosting:
        subCategory: Web Hosting
        name: scaleway_webhosting
        title: scaleway_webhosting
        examples:
            - name: main
              manifest: |-
                {
                  "domain": "yourdomain.com",
                  "email": "your@email.com",
                  "offer_id": "${data.scaleway_webhosting_offer.by_name.offer_id}",
                  "tags": [
                    "webhosting",
                    "provider",
                    "terraform"
                  ]
                }
              references:
                offer_id: data.scaleway_webhosting_offer.by_name.offer_id
        argumentDocs:
            cpanel_urls: '- The URL to connect to cPanel Dashboard and to Webmail interface.'
            created_at: '- Date and time of hosting''s creation (RFC 3339 format).'
            dashboard: '- The URL of the Dashboard.'
            dns_status: '- The DNS status of the hosting.'
            domain: '- (Required) The domain name of the hosting.'
            email: '- (Required) The contact email of the client for the hosting.'
            id: '- The ID of the hosting.'
            name: '- The option name.'
            offer_id: '- (Required) The ID of the selected offer for the hosting.'
            offer_name: '- The name of the active offer.'
            option_ids: '- (Optional) The IDs of the selected options for the hosting.'
            options: '- The active options of the hosting.'
            organization_id: '- The organization ID the hosting is associated with.'
            platform_hostname: '- The hostname of the host platform.'
            platform_number: '- The number of the host platform.'
            project_id: '- (Defaults to provider project_id) The ID of the project the VPC is associated with.'
            region: '- (Defaults to provider region) The region of the Hosting.'
            status: '- The hosting status.'
            tags: '- (Optional) The tags associated with the hosting.'
            updated_at: '- Date and time of hosting''s last update (RFC 3339 format).'
            username: '- The main hosting cPanel username.'
            webmail: '- The URL of the Webmail interface.'
        importStatements: []
