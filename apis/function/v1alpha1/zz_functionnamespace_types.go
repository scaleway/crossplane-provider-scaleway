/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FunctionNamespaceInitParameters struct {

	// The description of the namespace.
	// The description of the function namespace
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The environment variables of the namespace.
	// The environment variables of the function namespace
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// The unique name of the function namespace.
	// The name of the function namespace
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the namespace is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region). The region in which the namespace should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type FunctionNamespaceObservation struct {

	// The description of the namespace.
	// The description of the function namespace
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The environment variables of the namespace.
	// The environment variables of the function namespace
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// The ID of the namespace
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique name of the function namespace.
	// The name of the function namespace
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The organization ID the namespace is associated with.
	// The organization_id you want to attach the resource to
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the namespace is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region). The region in which the namespace should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The registry endpoint of the namespace.
	// The endpoint reachable by docker
	RegistryEndpoint *string `json:"registryEndpoint,omitempty" tf:"registry_endpoint,omitempty"`

	// The registry namespace ID of the namespace.
	// The ID of the registry namespace
	RegistryNamespaceID *string `json:"registryNamespaceId,omitempty" tf:"registry_namespace_id,omitempty"`
}

type FunctionNamespaceParameters struct {

	// The description of the namespace.
	// The description of the function namespace
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The environment variables of the namespace.
	// The environment variables of the function namespace
	// +kubebuilder:validation:Optional
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// The unique name of the function namespace.
	// The name of the function namespace
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the namespace is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region). The region in which the namespace should be created.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The secret environment variables of the namespace.
	// The environment variables of the function namespace
	// +kubebuilder:validation:Optional
	SecretEnvironmentVariablesSecretRef *v1.SecretReference `json:"secretEnvironmentVariablesSecretRef,omitempty" tf:"-"`
}

// FunctionNamespaceSpec defines the desired state of FunctionNamespace
type FunctionNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FunctionNamespaceParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FunctionNamespaceInitParameters `json:"initProvider,omitempty"`
}

// FunctionNamespaceStatus defines the observed state of FunctionNamespace.
type FunctionNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FunctionNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionNamespace is the Schema for the FunctionNamespaces API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type FunctionNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FunctionNamespaceSpec   `json:"spec"`
	Status            FunctionNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionNamespaceList contains a list of FunctionNamespaces
type FunctionNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FunctionNamespace `json:"items"`
}

// Repository type metadata.
var (
	FunctionNamespace_Kind             = "FunctionNamespace"
	FunctionNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FunctionNamespace_Kind}.String()
	FunctionNamespace_KindAPIVersion   = FunctionNamespace_Kind + "." + CRDGroupVersion.String()
	FunctionNamespace_GroupVersionKind = CRDGroupVersion.WithKind(FunctionNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&FunctionNamespace{}, &FunctionNamespaceList{})
}
