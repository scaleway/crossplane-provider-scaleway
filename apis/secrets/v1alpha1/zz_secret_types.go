/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EphemeralPolicyInitParameters struct {

	// Action to perform when the version of a secret expires. Available values can be found in SDK constants.
	// Action to perform when the version of a secret expires.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// True if the secret version expires after a single user access.
	// True if the secret version expires after a single user access.
	ExpiresOnceAccessed *bool `json:"expiresOnceAccessed,omitempty" tf:"expires_once_accessed,omitempty"`

	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format (ex: "30m", "24h").
	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type EphemeralPolicyObservation struct {

	// Action to perform when the version of a secret expires. Available values can be found in SDK constants.
	// Action to perform when the version of a secret expires.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// True if the secret version expires after a single user access.
	// True if the secret version expires after a single user access.
	ExpiresOnceAccessed *bool `json:"expiresOnceAccessed,omitempty" tf:"expires_once_accessed,omitempty"`

	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format (ex: "30m", "24h").
	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type EphemeralPolicyParameters struct {

	// Action to perform when the version of a secret expires. Available values can be found in SDK constants.
	// Action to perform when the version of a secret expires.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// True if the secret version expires after a single user access.
	// True if the secret version expires after a single user access.
	// +kubebuilder:validation:Optional
	ExpiresOnceAccessed *bool `json:"expiresOnceAccessed,omitempty" tf:"expires_once_accessed,omitempty"`

	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format (ex: "30m", "24h").
	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format
	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type SecretInitParameters struct {

	// Description of the secret (e.g. my-new-description).
	// Description of the secret
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Ephemeral policy of the secret. Policy that defines whether/when a secret's versions expire. By default, the policy is applied to all the secret's versions.
	EphemeralPolicy []EphemeralPolicyInitParameters `json:"ephemeralPolicy,omitempty" tf:"ephemeral_policy,omitempty"`

	// Name of the secret (e.g. my-secret).
	// The secret name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path of the secret, defaults to /.
	// Location of the secret in the directory structure.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The project ID containing is the secret.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// True if secret protection is enabled on the secret.
	// True if secret protection is enabled on a given secret. A protected secret cannot be deleted.
	Protected *bool `json:"protected,omitempty" tf:"protected,omitempty"`

	// (Defaults to provider region) The region
	// in which the resource exists.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Tags of the secret (e.g. ["tag", "secret"]).
	// List of tags ["tag1", "tag2", ...] associated to secret
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Type of the secret. If not specified, the type is Opaque. Available values can be found in SDK Constants.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SecretObservation struct {

	// Date and time of the secret's creation (in RFC 3339 format).
	// Date and time of secret's creation (RFC 3339 format)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Description of the secret (e.g. my-new-description).
	// Description of the secret
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Ephemeral policy of the secret. Policy that defines whether/when a secret's versions expire. By default, the policy is applied to all the secret's versions.
	EphemeralPolicy []EphemeralPolicyObservation `json:"ephemeralPolicy,omitempty" tf:"ephemeral_policy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the secret (e.g. my-secret).
	// The secret name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path of the secret, defaults to /.
	// Location of the secret in the directory structure.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The project ID containing is the secret.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// True if secret protection is enabled on the secret.
	// True if secret protection is enabled on a given secret. A protected secret cannot be deleted.
	Protected *bool `json:"protected,omitempty" tf:"protected,omitempty"`

	// (Defaults to provider region) The region
	// in which the resource exists.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The status of the secret.
	// Status of the secret
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Tags of the secret (e.g. ["tag", "secret"]).
	// List of tags ["tag1", "tag2", ...] associated to secret
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Type of the secret. If not specified, the type is Opaque. Available values can be found in SDK Constants.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Date and time of the secret's last update (in RFC 3339 format).
	// Date and time of secret's creation (RFC 3339 format)
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// The amount of secret versions.
	// The number of versions for this Secret
	VersionCount *float64 `json:"versionCount,omitempty" tf:"version_count,omitempty"`

	Versions []VersionsObservation `json:"versions,omitempty" tf:"versions,omitempty"`
}

type SecretParameters struct {

	// Description of the secret (e.g. my-new-description).
	// Description of the secret
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Ephemeral policy of the secret. Policy that defines whether/when a secret's versions expire. By default, the policy is applied to all the secret's versions.
	// +kubebuilder:validation:Optional
	EphemeralPolicy []EphemeralPolicyParameters `json:"ephemeralPolicy,omitempty" tf:"ephemeral_policy,omitempty"`

	// Name of the secret (e.g. my-secret).
	// The secret name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path of the secret, defaults to /.
	// Location of the secret in the directory structure.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The project ID containing is the secret.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// True if secret protection is enabled on the secret.
	// True if secret protection is enabled on a given secret. A protected secret cannot be deleted.
	// +kubebuilder:validation:Optional
	Protected *bool `json:"protected,omitempty" tf:"protected,omitempty"`

	// (Defaults to provider region) The region
	// in which the resource exists.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Tags of the secret (e.g. ["tag", "secret"]).
	// List of tags ["tag1", "tag2", ...] associated to secret
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Type of the secret. If not specified, the type is Opaque. Available values can be found in SDK Constants.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VersionsInitParameters struct {
}

type VersionsObservation struct {

	// Date and time of the secret's creation (in RFC 3339 format).
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Description of the secret (e.g. my-new-description).
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Latest *bool `json:"latest,omitempty" tf:"latest,omitempty"`

	Revision *string `json:"revision,omitempty" tf:"revision,omitempty"`

	SecretID *string `json:"secretId,omitempty" tf:"secret_id,omitempty"`

	// The status of the secret.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Date and time of the secret's last update (in RFC 3339 format).
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type VersionsParameters struct {
}

// SecretSpec defines the desired state of Secret
type SecretSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretInitParameters `json:"initProvider,omitempty"`
}

// SecretStatus defines the observed state of Secret.
type SecretStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Secret is the Schema for the Secrets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Secret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SecretSpec   `json:"spec"`
	Status SecretStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretList contains a list of Secrets
type SecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Secret `json:"items"`
}

// Repository type metadata.
var (
	Secret_Kind             = "Secret"
	Secret_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Secret_Kind}.String()
	Secret_KindAPIVersion   = Secret_Kind + "." + CRDGroupVersion.String()
	Secret_GroupVersionKind = CRDGroupVersion.WithKind(Secret_Kind)
)

func init() {
	SchemeBuilder.Register(&Secret{}, &SecretList{})
}
