/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnapshotInitParameters struct {

	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. 2024-12-31T23:59:59Z).
	// Expiration date (Format ISO 8601). Cannot be removed.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// The ID of the MongoDB® instance from which the snapshot was created.
	// The ID of the instance from which the snapshot was created
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/mongodb/v1alpha1.Instance
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in mongodb to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in mongodb to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The name of the MongoDB® snapshot.
	// Name of the snapshot
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider region) The region in which the MongoDB® snapshot should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type SnapshotObservation struct {

	// The date and time when the MongoDB® snapshot was created.
	// The date and time when the snapshot was created
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. 2024-12-31T23:59:59Z).
	// Expiration date (Format ISO 8601). Cannot be removed.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// The ID of the snapshot.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the MongoDB® instance from which the snapshot was created.
	// The ID of the instance from which the snapshot was created
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The name of the MongoDB® instance from which the snapshot was created.
	// Name of the instance from which the snapshot was created
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// The name of the MongoDB® snapshot.
	// Name of the snapshot
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of node associated with the MongoDB® snapshot.
	// Type of node associated with the snapshot
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// (Defaults to provider region) The region in which the MongoDB® snapshot should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The size of the MongoDB® snapshot in bytes.
	// Size of the snapshot in bytes
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The date and time of the last update of the MongoDB® snapshot.
	// The date and time of the last update of the snapshot
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// The type of volume used for the MongoDB® snapshot.
	// Type of volume used for the snapshot (e.g., SSD, HDD)
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type SnapshotParameters struct {

	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. 2024-12-31T23:59:59Z).
	// Expiration date (Format ISO 8601). Cannot be removed.
	// +kubebuilder:validation:Optional
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// The ID of the MongoDB® instance from which the snapshot was created.
	// The ID of the instance from which the snapshot was created
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/mongodb/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in mongodb to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in mongodb to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The name of the MongoDB® snapshot.
	// Name of the snapshot
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider region) The region in which the MongoDB® snapshot should be created.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// SnapshotSpec defines the desired state of Snapshot
type SnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SnapshotInitParameters `json:"initProvider,omitempty"`
}

// SnapshotStatus defines the observed state of Snapshot.
type SnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Snapshot is the Schema for the Snapshots API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Snapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.expiresAt) || (has(self.initProvider) && has(self.initProvider.expiresAt))",message="spec.forProvider.expiresAt is a required parameter"
	Spec   SnapshotSpec   `json:"spec"`
	Status SnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotList contains a list of Snapshots
type SnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Snapshot `json:"items"`
}

// Repository type metadata.
var (
	Snapshot_Kind             = "Snapshot"
	Snapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Snapshot_Kind}.String()
	Snapshot_KindAPIVersion   = Snapshot_Kind + "." + CRDGroupVersion.String()
	Snapshot_GroupVersionKind = CRDGroupVersion.WithKind(Snapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&Snapshot{}, &SnapshotList{})
}
