/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceInitParameters struct {

	// Name of the MongoDB® instance.
	// Name of the MongoDB cluster
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of nodes in the instance
	NodeNumber *float64 `json:"nodeNumber,omitempty" tf:"node_number,omitempty"`

	// The type of MongoDB® intance to create.
	// Type of node to use for the instance
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Password of the user.
	// Password of the user
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Private Network endpoints of the Database Instance.
	// Private network to expose your mongodb instance
	PrivateNetwork []PrivateNetworkInitParameters `json:"privateNetwork,omitempty" tf:"private_network,omitempty"`

	// The ID of the MongoDB® instance.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Public network specs details.
	// Public network specs details
	PublicNetwork []PublicNetworkInitParameters `json:"publicNetwork,omitempty" tf:"public_network,omitempty"`

	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Map of settings to define for the instance.
	// +mapType=granular
	Settings map[string]*string `json:"settings,omitempty" tf:"settings,omitempty"`

	// Snapshot ID to restore the MongoDB® instance from.
	// Snapshot ID to restore the MongoDB instance from
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// List of tags attached to the MongoDB® instance.
	// List of tags ["tag1", "tag2", ...] attached to a MongoDB instance
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Name of the user created when the intance is created.
	// Name of the user created when the cluster is created
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// MongoDB® version of the instance.
	// MongoDB version of the instance
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// Volume size in GB.
	// Volume size (in GB)
	VolumeSizeInGb *float64 `json:"volumeSizeInGb,omitempty" tf:"volume_size_in_gb,omitempty"`

	// Volume type of the instance.
	// Volume type of the instance
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type InstanceObservation struct {

	// The date and time of the creation of the MongoDB® instance.
	// The date and time of the creation of the MongoDB instance
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the MongoDB® instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the MongoDB® instance.
	// Name of the MongoDB cluster
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of nodes in the instance
	NodeNumber *float64 `json:"nodeNumber,omitempty" tf:"node_number,omitempty"`

	// The type of MongoDB® intance to create.
	// Type of node to use for the instance
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Private Network endpoints of the Database Instance.
	// Private network to expose your mongodb instance
	PrivateNetwork []PrivateNetworkObservation `json:"privateNetwork,omitempty" tf:"private_network,omitempty"`

	// The ID of the MongoDB® instance.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Public network specs details.
	// Public network specs details
	PublicNetwork []PublicNetworkObservation `json:"publicNetwork,omitempty" tf:"public_network,omitempty"`

	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Map of settings to define for the instance.
	// +mapType=granular
	Settings map[string]*string `json:"settings,omitempty" tf:"settings,omitempty"`

	// Snapshot ID to restore the MongoDB® instance from.
	// Snapshot ID to restore the MongoDB instance from
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// List of tags attached to the MongoDB® instance.
	// List of tags ["tag1", "tag2", ...] attached to a MongoDB instance
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The date and time of the last update of the MongoDB® instance.
	// The date and time of the last update of the MongoDB instance
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Name of the user created when the intance is created.
	// Name of the user created when the cluster is created
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// MongoDB® version of the instance.
	// MongoDB version of the instance
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// Volume size in GB.
	// Volume size (in GB)
	VolumeSizeInGb *float64 `json:"volumeSizeInGb,omitempty" tf:"volume_size_in_gb,omitempty"`

	// Volume type of the instance.
	// Volume type of the instance
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type InstanceParameters struct {

	// Name of the MongoDB® instance.
	// Name of the MongoDB cluster
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of nodes in the instance
	// +kubebuilder:validation:Optional
	NodeNumber *float64 `json:"nodeNumber,omitempty" tf:"node_number,omitempty"`

	// The type of MongoDB® intance to create.
	// Type of node to use for the instance
	// +kubebuilder:validation:Optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Password of the user.
	// Password of the user
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Private Network endpoints of the Database Instance.
	// Private network to expose your mongodb instance
	// +kubebuilder:validation:Optional
	PrivateNetwork []PrivateNetworkParameters `json:"privateNetwork,omitempty" tf:"private_network,omitempty"`

	// The ID of the MongoDB® instance.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Public network specs details.
	// Public network specs details
	// +kubebuilder:validation:Optional
	PublicNetwork []PublicNetworkParameters `json:"publicNetwork,omitempty" tf:"public_network,omitempty"`

	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Map of settings to define for the instance.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Settings map[string]*string `json:"settings,omitempty" tf:"settings,omitempty"`

	// Snapshot ID to restore the MongoDB® instance from.
	// Snapshot ID to restore the MongoDB instance from
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// List of tags attached to the MongoDB® instance.
	// List of tags ["tag1", "tag2", ...] attached to a MongoDB instance
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Name of the user created when the intance is created.
	// Name of the user created when the cluster is created
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// MongoDB® version of the instance.
	// MongoDB version of the instance
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// Volume size in GB.
	// Volume size (in GB)
	// +kubebuilder:validation:Optional
	VolumeSizeInGb *float64 `json:"volumeSizeInGb,omitempty" tf:"volume_size_in_gb,omitempty"`

	// Volume type of the instance.
	// Volume type of the instance
	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type PrivateNetworkInitParameters struct {

	// The ID of the Private Network.
	// The private network ID
	PnID *string `json:"pnId,omitempty" tf:"pn_id,omitempty"`
}

type PrivateNetworkObservation struct {

	// List of DNS records for your endpoint.
	// List of DNS records for your endpoint
	DNSRecords []*string `json:"dnsRecords,omitempty" tf:"dns_records,omitempty"`

	// The ID of the MongoDB® instance.
	// The private network ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of IP addresses for your endpoint.
	// List of IP addresses for your endpoint
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// The ID of the Private Network.
	// The private network ID
	PnID *string `json:"pnId,omitempty" tf:"pn_id,omitempty"`

	// TCP port of the endpoint.
	// TCP port of the endpoint
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type PrivateNetworkParameters struct {

	// The ID of the Private Network.
	// The private network ID
	// +kubebuilder:validation:Optional
	PnID *string `json:"pnId" tf:"pn_id,omitempty"`
}

type PublicNetworkInitParameters struct {
}

type PublicNetworkObservation struct {

	// The DNS record of your endpoint
	DNSRecord *string `json:"dnsRecord,omitempty" tf:"dns_record,omitempty"`

	// The ID of the MongoDB® instance.
	// ID of the public network
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// TCP port of the endpoint.
	// TCP port of the endpoint
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type PublicNetworkParameters struct {
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Instance is the Schema for the Instances API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeNumber) || (has(self.initProvider) && has(self.initProvider.nodeNumber))",message="spec.forProvider.nodeNumber is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeType) || (has(self.initProvider) && has(self.initProvider.nodeType))",message="spec.forProvider.nodeType is a required parameter"
	Spec   InstanceSpec   `json:"spec"`
	Status InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
