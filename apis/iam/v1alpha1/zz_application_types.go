/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationInitParameters struct {

	// The description of the iam application.
	// The description of the iam application
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the iam application.
	// The name of the iam application
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider organization_id) The ID of the organization the application is associated with.
	// ID of organization the resource is associated to.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// The tags associated with the application.
	// The tags associated with the application
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ApplicationObservation struct {

	// The date and time of the creation of the application.
	// The date and time of the creation of the application
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The description of the iam application.
	// The description of the iam application
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the application is editable.
	// Whether or not the application is editable.
	Editable *bool `json:"editable,omitempty" tf:"editable,omitempty"`

	// The ID of the application.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the iam application.
	// The name of the iam application
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider organization_id) The ID of the organization the application is associated with.
	// ID of organization the resource is associated to.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// The tags associated with the application.
	// The tags associated with the application
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The date and time of the last update of the application.
	// The date and time of the last update of the application
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ApplicationParameters struct {

	// The description of the iam application.
	// The description of the iam application
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the iam application.
	// The name of the iam application
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider organization_id) The ID of the organization the application is associated with.
	// ID of organization the resource is associated to.
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// The tags associated with the application.
	// The tags associated with the application
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ApplicationSpec defines the desired state of Application
type ApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApplicationInitParameters `json:"initProvider,omitempty"`
}

// ApplicationStatus defines the observed state of Application.
type ApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Application is the Schema for the Applications API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Application struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationSpec   `json:"spec"`
	Status            ApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationList contains a list of Applications
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Application `json:"items"`
}

// Repository type metadata.
var (
	Application_Kind             = "Application"
	Application_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Application_Kind}.String()
	Application_KindAPIVersion   = Application_Kind + "." + CRDGroupVersion.String()
	Application_GroupVersionKind = CRDGroupVersion.WithKind(Application_Kind)
)

func init() {
	SchemeBuilder.Register(&Application{}, &ApplicationList{})
}
