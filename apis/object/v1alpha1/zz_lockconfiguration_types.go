/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DefaultRetentionObservation struct {
}

type DefaultRetentionParameters struct {

	// The number of days that you want to specify for the default retention period.
	// The number of days that you want to specify for the default retention period.
	// +kubebuilder:validation:Optional
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. Valid values are GOVERNANCE or COMPLIANCE. To learn more about the difference between these modes, see Object Lock retention modes.
	// The default Object Lock retention mode you want to apply to new objects placed in the specified bucket.
	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// The number of years that you want to specify for the default retention period.
	// The number of years that you want to specify for the default retention period.
	// +kubebuilder:validation:Optional
	Years *float64 `json:"years,omitempty" tf:"years,omitempty"`
}

type LockConfigurationObservation struct {

	// The ID of the Object bucket lock configuration.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LockConfigurationParameters struct {

	// The name of the bucket.
	// The bucket name.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// (Defaults to provider project_id) The ID of the project the bucket is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the Object Lock rule for the specified object.
	// Specifies the Object Lock rule for the specified object.
	// +kubebuilder:validation:Required
	Rule []RuleParameters `json:"rule" tf:"rule,omitempty"`
}

type RuleObservation struct {
}

type RuleParameters struct {

	// The default retention for the lock.
	// +kubebuilder:validation:Required
	DefaultRetention []DefaultRetentionParameters `json:"defaultRetention" tf:"default_retention,omitempty"`
}

// LockConfigurationSpec defines the desired state of LockConfiguration
type LockConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LockConfigurationParameters `json:"forProvider"`
}

// LockConfigurationStatus defines the observed state of LockConfiguration.
type LockConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LockConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LockConfiguration is the Schema for the LockConfigurations API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type LockConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LockConfigurationSpec   `json:"spec"`
	Status            LockConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LockConfigurationList contains a list of LockConfigurations
type LockConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LockConfiguration `json:"items"`
}

// Repository type metadata.
var (
	LockConfiguration_Kind             = "LockConfiguration"
	LockConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LockConfiguration_Kind}.String()
	LockConfiguration_KindAPIVersion   = LockConfiguration_Kind + "." + CRDGroupVersion.String()
	LockConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(LockConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&LockConfiguration{}, &LockConfigurationList{})
}
