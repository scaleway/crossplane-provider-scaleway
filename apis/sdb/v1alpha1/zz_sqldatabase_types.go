/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SQLDatabaseInitParameters struct {

	// The maximum number of CPU units for your database. Defaults to 15.
	// The maximum number of CPU units for your Serverless SQL Database
	MaxCPU *float64 `json:"maxCpu,omitempty" tf:"max_cpu,omitempty"`

	// The minimum number of CPU units for your database. Defaults to 0.
	// The minimum number of CPU units for your Serverless SQL Database
	MinCPU *float64 `json:"minCpu,omitempty" tf:"min_cpu,omitempty"`

	// The name of the database (e.g. my-new-database).
	// The database name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique identifier of the database, which is of the form {region}/{id} e.g. fr-par/11111111-1111-1111-1111-111111111111.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region in which the resource exists.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type SQLDatabaseObservation struct {

	// The endpoint of the database.
	// endpoint of the database
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// The unique identifier of the database, which is of the form {region}/{id} e.g. fr-par/11111111-1111-1111-1111-111111111111.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The maximum number of CPU units for your database. Defaults to 15.
	// The maximum number of CPU units for your Serverless SQL Database
	MaxCPU *float64 `json:"maxCpu,omitempty" tf:"max_cpu,omitempty"`

	// The minimum number of CPU units for your database. Defaults to 0.
	// The minimum number of CPU units for your Serverless SQL Database
	MinCPU *float64 `json:"minCpu,omitempty" tf:"min_cpu,omitempty"`

	// The name of the database (e.g. my-new-database).
	// The database name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique identifier of the database, which is of the form {region}/{id} e.g. fr-par/11111111-1111-1111-1111-111111111111.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region in which the resource exists.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type SQLDatabaseParameters struct {

	// The maximum number of CPU units for your database. Defaults to 15.
	// The maximum number of CPU units for your Serverless SQL Database
	// +kubebuilder:validation:Optional
	MaxCPU *float64 `json:"maxCpu,omitempty" tf:"max_cpu,omitempty"`

	// The minimum number of CPU units for your database. Defaults to 0.
	// The minimum number of CPU units for your Serverless SQL Database
	// +kubebuilder:validation:Optional
	MinCPU *float64 `json:"minCpu,omitempty" tf:"min_cpu,omitempty"`

	// The name of the database (e.g. my-new-database).
	// The database name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique identifier of the database, which is of the form {region}/{id} e.g. fr-par/11111111-1111-1111-1111-111111111111.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region in which the resource exists.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// SQLDatabaseSpec defines the desired state of SQLDatabase
type SQLDatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SQLDatabaseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SQLDatabaseInitParameters `json:"initProvider,omitempty"`
}

// SQLDatabaseStatus defines the observed state of SQLDatabase.
type SQLDatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQLDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SQLDatabase is the Schema for the SQLDatabases API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type SQLDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SQLDatabaseSpec   `json:"spec"`
	Status SQLDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQLDatabaseList contains a list of SQLDatabases
type SQLDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLDatabase `json:"items"`
}

// Repository type metadata.
var (
	SQLDatabase_Kind             = "SQLDatabase"
	SQLDatabase_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQLDatabase_Kind}.String()
	SQLDatabase_KindAPIVersion   = SQLDatabase_Kind + "." + CRDGroupVersion.String()
	SQLDatabase_GroupVersionKind = CRDGroupVersion.WithKind(SQLDatabase_Kind)
)

func init() {
	SchemeBuilder.Register(&SQLDatabase{}, &SQLDatabaseList{})
}
