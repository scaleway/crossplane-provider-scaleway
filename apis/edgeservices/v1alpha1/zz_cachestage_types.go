/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CacheStageInitParameters struct {

	// The backend stage ID the cache stage will be linked to. Only one of backend_stage_id, route_stage_id and waf_stage_id should be specified.
	// The backend stage ID the cache stage will be linked to
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.BackendStage
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// Reference to a BackendStage in edgeservices to populate backendStageId.
	// +kubebuilder:validation:Optional
	BackendStageIDRef *v1.Reference `json:"backendStageIdRef,omitempty" tf:"-"`

	// Selector for a BackendStage in edgeservices to populate backendStageId.
	// +kubebuilder:validation:Optional
	BackendStageIDSelector *v1.Selector `json:"backendStageIdSelector,omitempty" tf:"-"`

	// The Time To Live (TTL) in seconds. Defines how long content is cached.
	// The Time To Live (TTL) in seconds. Defines how long content is cached
	FallbackTTL *float64 `json:"fallbackTtl,omitempty" tf:"fallback_ttl,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the cache stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
	PurgeRequests []PurgeRequestsInitParameters `json:"purgeRequests,omitempty" tf:"purge_requests,omitempty"`

	// Trigger a refresh of the cache by changing this field's value.
	// Trigger a refresh of the cache by changing this field's value
	RefreshCache *string `json:"refreshCache,omitempty" tf:"refresh_cache,omitempty"`

	// The route stage ID the cache stage will be linked to. Only one of backend_stage_id, route_stage_id and waf_stage_id should be specified.
	// The route stage ID the cache stage will be linked to
	RouteStageID *string `json:"routeStageId,omitempty" tf:"route_stage_id,omitempty"`

	// The WAF stage ID the cache stage will be linked to. Only one of backend_stage_id, route_stage_id and waf_stage_id should be specified.
	// The WAF stage ID the cache stage will be linked to
	WafStageID *string `json:"wafStageId,omitempty" tf:"waf_stage_id,omitempty"`
}

type CacheStageObservation struct {

	// The backend stage ID the cache stage will be linked to. Only one of backend_stage_id, route_stage_id and waf_stage_id should be specified.
	// The backend stage ID the cache stage will be linked to
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The date and time of the creation of the cache stage.
	// The date and time of the creation of the cache stage
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The Time To Live (TTL) in seconds. Defines how long content is cached.
	// The Time To Live (TTL) in seconds. Defines how long content is cached
	FallbackTTL *float64 `json:"fallbackTtl,omitempty" tf:"fallback_ttl,omitempty"`

	// The ID of the cache stage (UUID format).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the cache stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
	PurgeRequests []PurgeRequestsObservation `json:"purgeRequests,omitempty" tf:"purge_requests,omitempty"`

	// Trigger a refresh of the cache by changing this field's value.
	// Trigger a refresh of the cache by changing this field's value
	RefreshCache *string `json:"refreshCache,omitempty" tf:"refresh_cache,omitempty"`

	// The route stage ID the cache stage will be linked to. Only one of backend_stage_id, route_stage_id and waf_stage_id should be specified.
	// The route stage ID the cache stage will be linked to
	RouteStageID *string `json:"routeStageId,omitempty" tf:"route_stage_id,omitempty"`

	// The date and time of the last update of the cache stage.
	// The date and time of the last update of the cache stage
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// The WAF stage ID the cache stage will be linked to. Only one of backend_stage_id, route_stage_id and waf_stage_id should be specified.
	// The WAF stage ID the cache stage will be linked to
	WafStageID *string `json:"wafStageId,omitempty" tf:"waf_stage_id,omitempty"`
}

type CacheStageParameters struct {

	// The backend stage ID the cache stage will be linked to. Only one of backend_stage_id, route_stage_id and waf_stage_id should be specified.
	// The backend stage ID the cache stage will be linked to
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.BackendStage
	// +kubebuilder:validation:Optional
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// Reference to a BackendStage in edgeservices to populate backendStageId.
	// +kubebuilder:validation:Optional
	BackendStageIDRef *v1.Reference `json:"backendStageIdRef,omitempty" tf:"-"`

	// Selector for a BackendStage in edgeservices to populate backendStageId.
	// +kubebuilder:validation:Optional
	BackendStageIDSelector *v1.Selector `json:"backendStageIdSelector,omitempty" tf:"-"`

	// The Time To Live (TTL) in seconds. Defines how long content is cached.
	// The Time To Live (TTL) in seconds. Defines how long content is cached
	// +kubebuilder:validation:Optional
	FallbackTTL *float64 `json:"fallbackTtl,omitempty" tf:"fallback_ttl,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the cache stage is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
	// +kubebuilder:validation:Optional
	PurgeRequests []PurgeRequestsParameters `json:"purgeRequests,omitempty" tf:"purge_requests,omitempty"`

	// Trigger a refresh of the cache by changing this field's value.
	// Trigger a refresh of the cache by changing this field's value
	// +kubebuilder:validation:Optional
	RefreshCache *string `json:"refreshCache,omitempty" tf:"refresh_cache,omitempty"`

	// The route stage ID the cache stage will be linked to. Only one of backend_stage_id, route_stage_id and waf_stage_id should be specified.
	// The route stage ID the cache stage will be linked to
	// +kubebuilder:validation:Optional
	RouteStageID *string `json:"routeStageId,omitempty" tf:"route_stage_id,omitempty"`

	// The WAF stage ID the cache stage will be linked to. Only one of backend_stage_id, route_stage_id and waf_stage_id should be specified.
	// The WAF stage ID the cache stage will be linked to
	// +kubebuilder:validation:Optional
	WafStageID *string `json:"wafStageId,omitempty" tf:"waf_stage_id,omitempty"`
}

type PurgeRequestsInitParameters struct {

	// Defines whether to purge all content.
	// Defines whether to purge all content
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// The list of asserts to purge.
	// The list of asserts to purge
	Assets []*string `json:"assets,omitempty" tf:"assets,omitempty"`

	// The ID of the pipeline.
	// The pipeline ID in which the purge request will be created
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`
}

type PurgeRequestsObservation struct {

	// Defines whether to purge all content.
	// Defines whether to purge all content
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// The list of asserts to purge.
	// The list of asserts to purge
	Assets []*string `json:"assets,omitempty" tf:"assets,omitempty"`

	// The ID of the pipeline.
	// The pipeline ID in which the purge request will be created
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`
}

type PurgeRequestsParameters struct {

	// Defines whether to purge all content.
	// Defines whether to purge all content
	// +kubebuilder:validation:Optional
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// The list of asserts to purge.
	// The list of asserts to purge
	// +kubebuilder:validation:Optional
	Assets []*string `json:"assets,omitempty" tf:"assets,omitempty"`

	// The ID of the pipeline.
	// The pipeline ID in which the purge request will be created
	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`
}

// CacheStageSpec defines the desired state of CacheStage
type CacheStageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CacheStageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CacheStageInitParameters `json:"initProvider,omitempty"`
}

// CacheStageStatus defines the observed state of CacheStage.
type CacheStageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CacheStageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CacheStage is the Schema for the CacheStages API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type CacheStage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CacheStageSpec   `json:"spec"`
	Status            CacheStageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CacheStageList contains a list of CacheStages
type CacheStageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CacheStage `json:"items"`
}

// Repository type metadata.
var (
	CacheStage_Kind             = "CacheStage"
	CacheStage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CacheStage_Kind}.String()
	CacheStage_KindAPIVersion   = CacheStage_Kind + "." + CRDGroupVersion.String()
	CacheStage_GroupVersionKind = CRDGroupVersion.WithKind(CacheStage_Kind)
)

func init() {
	SchemeBuilder.Register(&CacheStage{}, &CacheStageList{})
}
