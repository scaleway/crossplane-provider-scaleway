/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretsInitParameters struct {

	// The region of the secret.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of the TLS stage (UUID format).
	// The ID of the Secret
	SecretID *string `json:"secretId,omitempty" tf:"secret_id,omitempty"`
}

type SecretsObservation struct {

	// The region of the secret.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of the TLS stage (UUID format).
	// The ID of the Secret
	SecretID *string `json:"secretId,omitempty" tf:"secret_id,omitempty"`
}

type SecretsParameters struct {

	// The region of the secret.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of the TLS stage (UUID format).
	// The ID of the Secret
	// +kubebuilder:validation:Optional
	SecretID *string `json:"secretId,omitempty" tf:"secret_id,omitempty"`
}

type TLSStageInitParameters struct {

	// The backend stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The backend stage ID the TLS stage will be linked to
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The cache stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The cache stage ID the TLS stage will be linked to
	CacheStageID *string `json:"cacheStageId,omitempty" tf:"cache_stage_id,omitempty"`

	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint
	ManagedCertificate *bool `json:"managedCertificate,omitempty" tf:"managed_certificate,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the TLS stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The route stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The route stage ID the TLS stage will be linked to
	RouteStageID *string `json:"routeStageId,omitempty" tf:"route_stage_id,omitempty"`

	// The TLS secrets.
	// The TLS secrets
	Secrets []SecretsInitParameters `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// The WAF stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The WAF stage ID the TLS stage will be linked to
	WafStageID *string `json:"wafStageId,omitempty" tf:"waf_stage_id,omitempty"`
}

type TLSStageObservation struct {

	// The backend stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The backend stage ID the TLS stage will be linked to
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The cache stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The cache stage ID the TLS stage will be linked to
	CacheStageID *string `json:"cacheStageId,omitempty" tf:"cache_stage_id,omitempty"`

	// The expiration date of the certificate.
	// TThe expiration date of the certificate
	CertificateExpiresAt *string `json:"certificateExpiresAt,omitempty" tf:"certificate_expires_at,omitempty"`

	// The date and time of the creation of the TLS stage.
	// The date and time of the creation of the TLS stage
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the TLS stage (UUID format).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint
	ManagedCertificate *bool `json:"managedCertificate,omitempty" tf:"managed_certificate,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the TLS stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The route stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The route stage ID the TLS stage will be linked to
	RouteStageID *string `json:"routeStageId,omitempty" tf:"route_stage_id,omitempty"`

	// The TLS secrets.
	// The TLS secrets
	Secrets []SecretsObservation `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// The date and time of the last update of the TLS stage.
	// The date and time of the last update of the TLS stage
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// The WAF stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The WAF stage ID the TLS stage will be linked to
	WafStageID *string `json:"wafStageId,omitempty" tf:"waf_stage_id,omitempty"`
}

type TLSStageParameters struct {

	// The backend stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The backend stage ID the TLS stage will be linked to
	// +kubebuilder:validation:Optional
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The cache stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The cache stage ID the TLS stage will be linked to
	// +kubebuilder:validation:Optional
	CacheStageID *string `json:"cacheStageId,omitempty" tf:"cache_stage_id,omitempty"`

	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint
	// +kubebuilder:validation:Optional
	ManagedCertificate *bool `json:"managedCertificate,omitempty" tf:"managed_certificate,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the TLS stage is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The route stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The route stage ID the TLS stage will be linked to
	// +kubebuilder:validation:Optional
	RouteStageID *string `json:"routeStageId,omitempty" tf:"route_stage_id,omitempty"`

	// The TLS secrets.
	// The TLS secrets
	// +kubebuilder:validation:Optional
	Secrets []SecretsParameters `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// The WAF stage ID the TLS stage will be linked to. Only one of backend_stage_id, cache_stage_id, route_stage_id and waf_stage_id should be specified.
	// The WAF stage ID the TLS stage will be linked to
	// +kubebuilder:validation:Optional
	WafStageID *string `json:"wafStageId,omitempty" tf:"waf_stage_id,omitempty"`
}

// TLSStageSpec defines the desired state of TLSStage
type TLSStageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TLSStageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TLSStageInitParameters `json:"initProvider,omitempty"`
}

// TLSStageStatus defines the observed state of TLSStage.
type TLSStageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TLSStageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TLSStage is the Schema for the TLSStages API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type TLSStage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TLSStageSpec   `json:"spec"`
	Status            TLSStageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TLSStageList contains a list of TLSStages
type TLSStageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TLSStage `json:"items"`
}

// Repository type metadata.
var (
	TLSStage_Kind             = "TLSStage"
	TLSStage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TLSStage_Kind}.String()
	TLSStage_KindAPIVersion   = TLSStage_Kind + "." + CRDGroupVersion.String()
	TLSStage_GroupVersionKind = CRDGroupVersion.WithKind(TLSStage_Kind)
)

func init() {
	SchemeBuilder.Register(&TLSStage{}, &TLSStageList{})
}
