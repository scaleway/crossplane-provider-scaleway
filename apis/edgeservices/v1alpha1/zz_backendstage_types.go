/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackendStageInitParameters struct {

	// The Scaleway Load Balancer linked to the backend stage.
	// The Scaleway Load Balancer origin linked to the backend stage
	LBBackendConfig []LBBackendConfigInitParameters `json:"lbBackendConfig,omitempty" tf:"lb_backend_config,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the backend stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
	// The Scaleway Object Storage origin bucket (S3) linked to the backend stage
	S3BackendConfig []S3BackendConfigInitParameters `json:"s3BackendConfig,omitempty" tf:"s3_backend_config,omitempty"`
}

type BackendStageObservation struct {

	// The date and time of the creation of the backend stage.
	// The date and time of the creation of the backend stage
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the Load Balancer.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Scaleway Load Balancer linked to the backend stage.
	// The Scaleway Load Balancer origin linked to the backend stage
	LBBackendConfig []LBBackendConfigObservation `json:"lbBackendConfig,omitempty" tf:"lb_backend_config,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the backend stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
	// The Scaleway Object Storage origin bucket (S3) linked to the backend stage
	S3BackendConfig []S3BackendConfigObservation `json:"s3BackendConfig,omitempty" tf:"s3_backend_config,omitempty"`

	// The date and time of the last update of the backend stage.
	// The date and time of the last update of the backend stage
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type BackendStageParameters struct {

	// The Scaleway Load Balancer linked to the backend stage.
	// The Scaleway Load Balancer origin linked to the backend stage
	// +kubebuilder:validation:Optional
	LBBackendConfig []LBBackendConfigParameters `json:"lbBackendConfig,omitempty" tf:"lb_backend_config,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the backend stage is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
	// The Scaleway Object Storage origin bucket (S3) linked to the backend stage
	// +kubebuilder:validation:Optional
	S3BackendConfig []S3BackendConfigParameters `json:"s3BackendConfig,omitempty" tf:"s3_backend_config,omitempty"`
}

type LBBackendConfigInitParameters struct {

	// The Load Balancer config.
	// The Load Balancer configuration
	LBConfig []LBConfigInitParameters `json:"lbConfig,omitempty" tf:"lb_config,omitempty"`
}

type LBBackendConfigObservation struct {

	// The Load Balancer config.
	// The Load Balancer configuration
	LBConfig []LBConfigObservation `json:"lbConfig,omitempty" tf:"lb_config,omitempty"`
}

type LBBackendConfigParameters struct {

	// The Load Balancer config.
	// The Load Balancer configuration
	// +kubebuilder:validation:Optional
	LBConfig []LBConfigParameters `json:"lbConfig,omitempty" tf:"lb_config,omitempty"`
}

type LBConfigInitParameters struct {

	// The Fully Qualified Domain Name (in the format subdomain.example.com) to use in HTTP requests sent towards your Load Balancer.
	// Fully Qualified Domain Name (in the format subdomain.example.com) to use in HTTP requests sent towards your Load Balancer
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// The ID of the frontend.
	// ID of the frontend linked to the Load Balancer
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/lb/v1alpha1.Frontend
	FrontendID *string `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	// Reference to a Frontend in lb to populate frontendId.
	// +kubebuilder:validation:Optional
	FrontendIDRef *v1.Reference `json:"frontendIdRef,omitempty" tf:"-"`

	// Selector for a Frontend in lb to populate frontendId.
	// +kubebuilder:validation:Optional
	FrontendIDSelector *v1.Selector `json:"frontendIdSelector,omitempty" tf:"-"`

	// The ID of the Load Balancer.
	// ID of the Load Balancer
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/lb/v1alpha1.LB
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a LB in lb to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a LB in lb to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// Defines whether the Load Balancer's frontend handles SSL connections.
	// Defines whether the Load Balancer's frontend handles SSL connections
	IsSSL *bool `json:"isSsl,omitempty" tf:"is_ssl,omitempty"`

	// (Defaults to provider zone) The zone of the Load Balancer.
	// The zone you want to attach the resource to
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type LBConfigObservation struct {

	// The Fully Qualified Domain Name (in the format subdomain.example.com) to use in HTTP requests sent towards your Load Balancer.
	// Fully Qualified Domain Name (in the format subdomain.example.com) to use in HTTP requests sent towards your Load Balancer
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// The ID of the frontend.
	// ID of the frontend linked to the Load Balancer
	FrontendID *string `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	// The ID of the Load Balancer.
	// ID of the Load Balancer
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Defines whether the Load Balancer's frontend handles SSL connections.
	// Defines whether the Load Balancer's frontend handles SSL connections
	IsSSL *bool `json:"isSsl,omitempty" tf:"is_ssl,omitempty"`

	// (Defaults to provider zone) The zone of the Load Balancer.
	// The zone you want to attach the resource to
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type LBConfigParameters struct {

	// The Fully Qualified Domain Name (in the format subdomain.example.com) to use in HTTP requests sent towards your Load Balancer.
	// Fully Qualified Domain Name (in the format subdomain.example.com) to use in HTTP requests sent towards your Load Balancer
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// The ID of the frontend.
	// ID of the frontend linked to the Load Balancer
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/lb/v1alpha1.Frontend
	// +kubebuilder:validation:Optional
	FrontendID *string `json:"frontendId,omitempty" tf:"frontend_id,omitempty"`

	// Reference to a Frontend in lb to populate frontendId.
	// +kubebuilder:validation:Optional
	FrontendIDRef *v1.Reference `json:"frontendIdRef,omitempty" tf:"-"`

	// Selector for a Frontend in lb to populate frontendId.
	// +kubebuilder:validation:Optional
	FrontendIDSelector *v1.Selector `json:"frontendIdSelector,omitempty" tf:"-"`

	// The ID of the Load Balancer.
	// ID of the Load Balancer
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/lb/v1alpha1.LB
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a LB in lb to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a LB in lb to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// Defines whether the Load Balancer's frontend handles SSL connections.
	// Defines whether the Load Balancer's frontend handles SSL connections
	// +kubebuilder:validation:Optional
	IsSSL *bool `json:"isSsl,omitempty" tf:"is_ssl,omitempty"`

	// (Defaults to provider zone) The zone of the Load Balancer.
	// The zone you want to attach the resource to
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type S3BackendConfigInitParameters struct {

	// The name of the Bucket.
	// The name of the Bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The region of the Bucket.
	// The region of the Bucket
	BucketRegion *string `json:"bucketRegion,omitempty" tf:"bucket_region,omitempty"`

	// Defines whether the bucket website feature is enabled.
	// Defines whether the bucket website feature is enabled.
	IsWebsite *bool `json:"isWebsite,omitempty" tf:"is_website,omitempty"`
}

type S3BackendConfigObservation struct {

	// The name of the Bucket.
	// The name of the Bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The region of the Bucket.
	// The region of the Bucket
	BucketRegion *string `json:"bucketRegion,omitempty" tf:"bucket_region,omitempty"`

	// Defines whether the bucket website feature is enabled.
	// Defines whether the bucket website feature is enabled.
	IsWebsite *bool `json:"isWebsite,omitempty" tf:"is_website,omitempty"`
}

type S3BackendConfigParameters struct {

	// The name of the Bucket.
	// The name of the Bucket
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The region of the Bucket.
	// The region of the Bucket
	// +kubebuilder:validation:Optional
	BucketRegion *string `json:"bucketRegion,omitempty" tf:"bucket_region,omitempty"`

	// Defines whether the bucket website feature is enabled.
	// Defines whether the bucket website feature is enabled.
	// +kubebuilder:validation:Optional
	IsWebsite *bool `json:"isWebsite,omitempty" tf:"is_website,omitempty"`
}

// BackendStageSpec defines the desired state of BackendStage
type BackendStageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackendStageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BackendStageInitParameters `json:"initProvider,omitempty"`
}

// BackendStageStatus defines the observed state of BackendStage.
type BackendStageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackendStageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BackendStage is the Schema for the BackendStages API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type BackendStage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackendStageSpec   `json:"spec"`
	Status            BackendStageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackendStageList contains a list of BackendStages
type BackendStageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackendStage `json:"items"`
}

// Repository type metadata.
var (
	BackendStage_Kind             = "BackendStage"
	BackendStage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackendStage_Kind}.String()
	BackendStage_KindAPIVersion   = BackendStage_Kind + "." + CRDGroupVersion.String()
	BackendStage_GroupVersionKind = CRDGroupVersion.WithKind(BackendStage_Kind)
)

func init() {
	SchemeBuilder.Register(&BackendStage{}, &BackendStageList{})
}
