/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1alpha1 "github.com/scaleway/crossplane-provider-scaleway/apis/lb/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this BackendStage.
func (mg *BackendStage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.LBBackendConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].FrontendID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].FrontendIDRef,
				Selector:     mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].FrontendIDSelector,
				To: reference.To{
					List:    &v1alpha1.FrontendList{},
					Managed: &v1alpha1.Frontend{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].FrontendID")
			}
			mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].FrontendID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].FrontendIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LBBackendConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].IDRef,
				Selector:     mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].IDSelector,
				To: reference.To{
					List:    &v1alpha1.LBList{},
					Managed: &v1alpha1.LB{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].ID")
			}
			mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LBBackendConfig[i3].LBConfig[i4].IDRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PipelineIDRef,
		Selector:     mg.Spec.ForProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineID")
	}
	mg.Spec.ForProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.LBBackendConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].FrontendID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].FrontendIDRef,
				Selector:     mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].FrontendIDSelector,
				To: reference.To{
					List:    &v1alpha1.FrontendList{},
					Managed: &v1alpha1.Frontend{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].FrontendID")
			}
			mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].FrontendID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].FrontendIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LBBackendConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].IDRef,
				Selector:     mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].IDSelector,
				To: reference.To{
					List:    &v1alpha1.LBList{},
					Managed: &v1alpha1.LB{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].ID")
			}
			mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LBBackendConfig[i3].LBConfig[i4].IDRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PipelineIDRef,
		Selector:     mg.Spec.InitProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineID")
	}
	mg.Spec.InitProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CacheStage.
func (mg *CacheStage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendStageID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.BackendStageIDRef,
		Selector:     mg.Spec.ForProvider.BackendStageIDSelector,
		To: reference.To{
			List:    &BackendStageList{},
			Managed: &BackendStage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendStageID")
	}
	mg.Spec.ForProvider.BackendStageID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendStageIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PipelineIDRef,
		Selector:     mg.Spec.ForProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineID")
	}
	mg.Spec.ForProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackendStageID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.BackendStageIDRef,
		Selector:     mg.Spec.InitProvider.BackendStageIDSelector,
		To: reference.To{
			List:    &BackendStageList{},
			Managed: &BackendStage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackendStageID")
	}
	mg.Spec.InitProvider.BackendStageID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendStageIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PipelineIDRef,
		Selector:     mg.Spec.InitProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineID")
	}
	mg.Spec.InitProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DNSStage.
func (mg *DNSStage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PipelineIDRef,
		Selector:     mg.Spec.ForProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineID")
	}
	mg.Spec.ForProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PipelineIDRef,
		Selector:     mg.Spec.InitProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineID")
	}
	mg.Spec.InitProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HeadStage.
func (mg *HeadStage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HeadStageID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.HeadStageIDRef,
		Selector:     mg.Spec.ForProvider.HeadStageIDSelector,
		To: reference.To{
			List:    &DNSStageList{},
			Managed: &DNSStage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HeadStageID")
	}
	mg.Spec.ForProvider.HeadStageID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HeadStageIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PipelineIDRef,
		Selector:     mg.Spec.ForProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineID")
	}
	mg.Spec.ForProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.HeadStageID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.HeadStageIDRef,
		Selector:     mg.Spec.InitProvider.HeadStageIDSelector,
		To: reference.To{
			List:    &DNSStageList{},
			Managed: &DNSStage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HeadStageID")
	}
	mg.Spec.InitProvider.HeadStageID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.HeadStageIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PipelineIDRef,
		Selector:     mg.Spec.InitProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineID")
	}
	mg.Spec.InitProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RouteStage.
func (mg *RouteStage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PipelineIDRef,
		Selector:     mg.Spec.ForProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineID")
	}
	mg.Spec.ForProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rule[i3].BackendStageID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Rule[i3].BackendStageIDRef,
			Selector:     mg.Spec.ForProvider.Rule[i3].BackendStageIDSelector,
			To: reference.To{
				List:    &BackendStageList{},
				Managed: &BackendStage{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].BackendStageID")
		}
		mg.Spec.ForProvider.Rule[i3].BackendStageID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Rule[i3].BackendStageIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WafStageID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.WafStageIDRef,
		Selector:     mg.Spec.ForProvider.WafStageIDSelector,
		To: reference.To{
			List:    &WAFStageList{},
			Managed: &WAFStage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WafStageID")
	}
	mg.Spec.ForProvider.WafStageID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WafStageIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PipelineIDRef,
		Selector:     mg.Spec.InitProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineID")
	}
	mg.Spec.InitProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Rule); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Rule[i3].BackendStageID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Rule[i3].BackendStageIDRef,
			Selector:     mg.Spec.InitProvider.Rule[i3].BackendStageIDSelector,
			To: reference.To{
				List:    &BackendStageList{},
				Managed: &BackendStage{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Rule[i3].BackendStageID")
		}
		mg.Spec.InitProvider.Rule[i3].BackendStageID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Rule[i3].BackendStageIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WafStageID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.WafStageIDRef,
		Selector:     mg.Spec.InitProvider.WafStageIDSelector,
		To: reference.To{
			List:    &WAFStageList{},
			Managed: &WAFStage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WafStageID")
	}
	mg.Spec.InitProvider.WafStageID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WafStageIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TLSStage.
func (mg *TLSStage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PipelineIDRef,
		Selector:     mg.Spec.ForProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineID")
	}
	mg.Spec.ForProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PipelineIDRef,
		Selector:     mg.Spec.InitProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineID")
	}
	mg.Spec.InitProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WAFStage.
func (mg *WAFStage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PipelineIDRef,
		Selector:     mg.Spec.ForProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineID")
	}
	mg.Spec.ForProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PipelineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PipelineIDRef,
		Selector:     mg.Spec.InitProvider.PipelineIDSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineID")
	}
	mg.Spec.InitProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineIDRef = rsp.ResolvedReference

	return nil
}
