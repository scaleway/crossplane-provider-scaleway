/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HeadStageInitParameters struct {

	// The ID of head stage of the pipeline.
	// The ID of the head stage of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.DNSStage
	HeadStageID *string `json:"headStageId,omitempty" tf:"head_stage_id,omitempty"`

	// Reference to a DNSStage in edgeservices to populate headStageId.
	// +kubebuilder:validation:Optional
	HeadStageIDRef *v1.Reference `json:"headStageIdRef,omitempty" tf:"-"`

	// Selector for a DNSStage in edgeservices to populate headStageId.
	// +kubebuilder:validation:Optional
	HeadStageIDSelector *v1.Selector `json:"headStageIdSelector,omitempty" tf:"-"`

	// The ID of the pipeline.
	// The ID of the pipeline ID
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`
}

type HeadStageObservation struct {

	// The ID of head stage of the pipeline.
	// The ID of the head stage of the pipeline
	HeadStageID *string `json:"headStageId,omitempty" tf:"head_stage_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline ID
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`
}

type HeadStageParameters struct {

	// The ID of head stage of the pipeline.
	// The ID of the head stage of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.DNSStage
	// +kubebuilder:validation:Optional
	HeadStageID *string `json:"headStageId,omitempty" tf:"head_stage_id,omitempty"`

	// Reference to a DNSStage in edgeservices to populate headStageId.
	// +kubebuilder:validation:Optional
	HeadStageIDRef *v1.Reference `json:"headStageIdRef,omitempty" tf:"-"`

	// Selector for a DNSStage in edgeservices to populate headStageId.
	// +kubebuilder:validation:Optional
	HeadStageIDSelector *v1.Selector `json:"headStageIdSelector,omitempty" tf:"-"`

	// The ID of the pipeline.
	// The ID of the pipeline ID
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`
}

// HeadStageSpec defines the desired state of HeadStage
type HeadStageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HeadStageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HeadStageInitParameters `json:"initProvider,omitempty"`
}

// HeadStageStatus defines the observed state of HeadStage.
type HeadStageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HeadStageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HeadStage is the Schema for the HeadStages API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type HeadStage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HeadStageSpec   `json:"spec"`
	Status            HeadStageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HeadStageList contains a list of HeadStages
type HeadStageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HeadStage `json:"items"`
}

// Repository type metadata.
var (
	HeadStage_Kind             = "HeadStage"
	HeadStage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HeadStage_Kind}.String()
	HeadStage_KindAPIVersion   = HeadStage_Kind + "." + CRDGroupVersion.String()
	HeadStage_GroupVersionKind = CRDGroupVersion.WithKind(HeadStage_Kind)
)

func init() {
	SchemeBuilder.Register(&HeadStage{}, &HeadStageList{})
}
