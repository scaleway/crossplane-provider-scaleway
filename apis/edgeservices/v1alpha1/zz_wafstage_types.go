/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WAFStageInitParameters struct {

	// The ID of the backend stage to forward requests to after the WAF stage.
	// The ID of the backend stage to forward requests to after the WAF stage
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The mode defining WAF behavior (disable/log_only/enable).
	// Mode defining WAF behavior (`disable`/`log_only`/`enable`)
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The sensitivity level (1,2,3,4) to use when classifying requests as malicious. With a high level, requests are more likely to be classed as malicious, and false positives are expected. With a lower level, requests are more likely to be classed as benign.
	// The sensitivity level (`1`,`2`,`3`,`4`) to use when classifying requests as malicious. With a high level, requests are more likely to be classed as malicious, and false positives are expected. With a lower level, requests are more likely to be classed as benign
	ParanoiaLevel *float64 `json:"paranoiaLevel,omitempty" tf:"paranoia_level,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the WAF stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type WAFStageObservation struct {

	// The ID of the backend stage to forward requests to after the WAF stage.
	// The ID of the backend stage to forward requests to after the WAF stage
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The date and time of the creation of the WAF stage.
	// The date and time of the creation of the WAF stage
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the WAF stage (UUID format).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The mode defining WAF behavior (disable/log_only/enable).
	// Mode defining WAF behavior (`disable`/`log_only`/`enable`)
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The sensitivity level (1,2,3,4) to use when classifying requests as malicious. With a high level, requests are more likely to be classed as malicious, and false positives are expected. With a lower level, requests are more likely to be classed as benign.
	// The sensitivity level (`1`,`2`,`3`,`4`) to use when classifying requests as malicious. With a high level, requests are more likely to be classed as malicious, and false positives are expected. With a lower level, requests are more likely to be classed as benign
	ParanoiaLevel *float64 `json:"paranoiaLevel,omitempty" tf:"paranoia_level,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the WAF stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The date and time of the last update of the WAF stage.
	// The date and time of the last update of the WAF stage
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type WAFStageParameters struct {

	// The ID of the backend stage to forward requests to after the WAF stage.
	// The ID of the backend stage to forward requests to after the WAF stage
	// +kubebuilder:validation:Optional
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The mode defining WAF behavior (disable/log_only/enable).
	// Mode defining WAF behavior (`disable`/`log_only`/`enable`)
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The sensitivity level (1,2,3,4) to use when classifying requests as malicious. With a high level, requests are more likely to be classed as malicious, and false positives are expected. With a lower level, requests are more likely to be classed as benign.
	// The sensitivity level (`1`,`2`,`3`,`4`) to use when classifying requests as malicious. With a high level, requests are more likely to be classed as malicious, and false positives are expected. With a lower level, requests are more likely to be classed as benign
	// +kubebuilder:validation:Optional
	ParanoiaLevel *float64 `json:"paranoiaLevel,omitempty" tf:"paranoia_level,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the WAF stage is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// WAFStageSpec defines the desired state of WAFStage
type WAFStageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WAFStageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WAFStageInitParameters `json:"initProvider,omitempty"`
}

// WAFStageStatus defines the observed state of WAFStage.
type WAFStageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WAFStageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WAFStage is the Schema for the WAFStages API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type WAFStage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.paranoiaLevel) || (has(self.initProvider) && has(self.initProvider.paranoiaLevel))",message="spec.forProvider.paranoiaLevel is a required parameter"
	Spec   WAFStageSpec   `json:"spec"`
	Status WAFStageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WAFStageList contains a list of WAFStages
type WAFStageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WAFStage `json:"items"`
}

// Repository type metadata.
var (
	WAFStage_Kind             = "WAFStage"
	WAFStage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WAFStage_Kind}.String()
	WAFStage_KindAPIVersion   = WAFStage_Kind + "." + CRDGroupVersion.String()
	WAFStage_GroupVersionKind = CRDGroupVersion.WithKind(WAFStage_Kind)
)

func init() {
	SchemeBuilder.Register(&WAFStage{}, &WAFStageList{})
}
