/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSStageInitParameters struct {

	// The backend stage ID the DNS stage will be linked to. Only one of backend_stage_id, cache_stage_id and tls_stage_id should be specified.
	// The backend stage ID the DNS stage will be linked to
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The cache stage ID the DNS stage will be linked to. Only one of backend_stage_id, cache_stage_id and tls_stage_id should be specified.
	// The cache stage ID the DNS stage will be linked to
	CacheStageID *string `json:"cacheStageId,omitempty" tf:"cache_stage_id,omitempty"`

	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage
	Fqdns []*string `json:"fqdns,omitempty" tf:"fqdns,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the DNS stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The TLS stage ID the DNS stage will be linked to. Only one of backend_stage_id, cache_stage_id and tls_stage_id should be specified.
	// The TLS stage ID the DNS stage will be linked to
	TLSStageID *string `json:"tlsStageId,omitempty" tf:"tls_stage_id,omitempty"`
}

type DNSStageObservation struct {

	// The backend stage ID the DNS stage will be linked to. Only one of backend_stage_id, cache_stage_id and tls_stage_id should be specified.
	// The backend stage ID the DNS stage will be linked to
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The cache stage ID the DNS stage will be linked to. Only one of backend_stage_id, cache_stage_id and tls_stage_id should be specified.
	// The cache stage ID the DNS stage will be linked to
	CacheStageID *string `json:"cacheStageId,omitempty" tf:"cache_stage_id,omitempty"`

	// The date and time of the creation of the DNS stage.
	// The date and time of the creation of the DNS stage
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage
	Fqdns []*string `json:"fqdns,omitempty" tf:"fqdns,omitempty"`

	// The ID of the DNS stage (UUID format).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the DNS stage is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The TLS stage ID the DNS stage will be linked to. Only one of backend_stage_id, cache_stage_id and tls_stage_id should be specified.
	// The TLS stage ID the DNS stage will be linked to
	TLSStageID *string `json:"tlsStageId,omitempty" tf:"tls_stage_id,omitempty"`

	// The type of the stage.
	// The type of the stage
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The date and time of the last update of the DNS stage.
	// The date and time of the last update of the DNS stage
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type DNSStageParameters struct {

	// The backend stage ID the DNS stage will be linked to. Only one of backend_stage_id, cache_stage_id and tls_stage_id should be specified.
	// The backend stage ID the DNS stage will be linked to
	// +kubebuilder:validation:Optional
	BackendStageID *string `json:"backendStageId,omitempty" tf:"backend_stage_id,omitempty"`

	// The cache stage ID the DNS stage will be linked to. Only one of backend_stage_id, cache_stage_id and tls_stage_id should be specified.
	// The cache stage ID the DNS stage will be linked to
	// +kubebuilder:validation:Optional
	CacheStageID *string `json:"cacheStageId,omitempty" tf:"cache_stage_id,omitempty"`

	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage
	// +kubebuilder:validation:Optional
	Fqdns []*string `json:"fqdns,omitempty" tf:"fqdns,omitempty"`

	// The ID of the pipeline.
	// The ID of the pipeline
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/edgeservices/v1alpha1.Pipeline
	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Reference to a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDRef *v1.Reference `json:"pipelineIdRef,omitempty" tf:"-"`

	// Selector for a Pipeline in edgeservices to populate pipelineId.
	// +kubebuilder:validation:Optional
	PipelineIDSelector *v1.Selector `json:"pipelineIdSelector,omitempty" tf:"-"`

	// (Defaults to provider project_id) The ID of the project the DNS stage is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The TLS stage ID the DNS stage will be linked to. Only one of backend_stage_id, cache_stage_id and tls_stage_id should be specified.
	// The TLS stage ID the DNS stage will be linked to
	// +kubebuilder:validation:Optional
	TLSStageID *string `json:"tlsStageId,omitempty" tf:"tls_stage_id,omitempty"`
}

// DNSStageSpec defines the desired state of DNSStage
type DNSStageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DNSStageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DNSStageInitParameters `json:"initProvider,omitempty"`
}

// DNSStageStatus defines the observed state of DNSStage.
type DNSStageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DNSStageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DNSStage is the Schema for the DNSStages API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type DNSStage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DNSStageSpec   `json:"spec"`
	Status            DNSStageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DNSStageList contains a list of DNSStages
type DNSStageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DNSStage `json:"items"`
}

// Repository type metadata.
var (
	DNSStage_Kind             = "DNSStage"
	DNSStage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DNSStage_Kind}.String()
	DNSStage_KindAPIVersion   = DNSStage_Kind + "." + CRDGroupVersion.String()
	DNSStage_GroupVersionKind = CRDGroupVersion.WithKind(DNSStage_Kind)
)

func init() {
	SchemeBuilder.Register(&DNSStage{}, &DNSStageList{})
}
