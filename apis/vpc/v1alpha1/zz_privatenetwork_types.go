/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv4SubnetInitParameters struct {

	// The subnet CIDR.
	// The subnet CIDR
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`
}

type IPv4SubnetObservation struct {

	// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.
	// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The date and time of the creation of the subnet.
	// The date and time of the creation of the subnet
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the private network.
	// The subnet ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.
	// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// The subnet CIDR.
	// The subnet CIDR
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
	// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`

	// The date and time of the last update of the subnet.
	// The date and time of the last update of the subnet
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type IPv4SubnetParameters struct {

	// The subnet CIDR.
	// The subnet CIDR
	// +kubebuilder:validation:Optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`
}

type IPv6SubnetsInitParameters struct {

	// The subnet CIDR.
	// The subnet CIDR
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`
}

type IPv6SubnetsObservation struct {

	// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet.
	// The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The date and time of the creation of the subnet.
	// The date and time of the creation of the subnet
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the private network.
	// The subnet ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask.
	// The length of the network prefix, e.g., 24 for a 255.255.255.0 mask
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// The subnet CIDR.
	// The subnet CIDR
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
	// The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`

	// The date and time of the last update of the subnet.
	// The date and time of the last update of the subnet
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type IPv6SubnetsParameters struct {

	// The subnet CIDR.
	// The subnet CIDR
	// +kubebuilder:validation:Optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`
}

type PrivateNetworkInitParameters struct {

	// The IPv4 subnet to associate with the private network.
	// The IPv4 subnet associated with the private network
	IPv4Subnet []IPv4SubnetInitParameters `json:"ipv4Subnet,omitempty" tf:"ipv4_subnet,omitempty"`

	// The IPv6 subnets to associate with the private network.
	// The IPv6 subnet associated with the private network
	IPv6Subnets []IPv6SubnetsInitParameters `json:"ipv6Subnets,omitempty" tf:"ipv6_subnets,omitempty"`

	// (Deprecated) The private networks are necessarily regional now.
	// Defines whether the private network is Regional. By default, it will be Zonal
	IsRegional *bool `json:"isRegional,omitempty" tf:"is_regional,omitempty"`

	// The name of the private network. If not provided it will be randomly generated.
	// The name of the private network
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the private network is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region of the private network.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The tags associated with the private network.
	// The tags associated with private network
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Deprecated) please use region instead - (Defaults to provider zone) The zone in which the private network should be created.
	// The zone you want to attach the resource to
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type PrivateNetworkObservation struct {

	// The date and time of the creation of the subnet.
	// The date and time of the creation of the private network
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the private network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IPv4 subnet to associate with the private network.
	// The IPv4 subnet associated with the private network
	IPv4Subnet []IPv4SubnetObservation `json:"ipv4Subnet,omitempty" tf:"ipv4_subnet,omitempty"`

	// The IPv6 subnets to associate with the private network.
	// The IPv6 subnet associated with the private network
	IPv6Subnets []IPv6SubnetsObservation `json:"ipv6Subnets,omitempty" tf:"ipv6_subnets,omitempty"`

	// (Deprecated) The private networks are necessarily regional now.
	// Defines whether the private network is Regional. By default, it will be Zonal
	IsRegional *bool `json:"isRegional,omitempty" tf:"is_regional,omitempty"`

	// The name of the private network. If not provided it will be randomly generated.
	// The name of the private network
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The organization ID the private network is associated with.
	// The organization_id you want to attach the resource to
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the private network is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region of the private network.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The tags associated with the private network.
	// The tags associated with private network
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The date and time of the last update of the subnet.
	// The date and time of the last update of the private network
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// The VPC in which to create the private network.
	// The VPC in which to create the private network
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// (Deprecated) please use region instead - (Defaults to provider zone) The zone in which the private network should be created.
	// The zone you want to attach the resource to
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type PrivateNetworkParameters struct {

	// The IPv4 subnet to associate with the private network.
	// The IPv4 subnet associated with the private network
	// +kubebuilder:validation:Optional
	IPv4Subnet []IPv4SubnetParameters `json:"ipv4Subnet,omitempty" tf:"ipv4_subnet,omitempty"`

	// The IPv6 subnets to associate with the private network.
	// The IPv6 subnet associated with the private network
	// +kubebuilder:validation:Optional
	IPv6Subnets []IPv6SubnetsParameters `json:"ipv6Subnets,omitempty" tf:"ipv6_subnets,omitempty"`

	// (Deprecated) The private networks are necessarily regional now.
	// Defines whether the private network is Regional. By default, it will be Zonal
	// +kubebuilder:validation:Optional
	IsRegional *bool `json:"isRegional,omitempty" tf:"is_regional,omitempty"`

	// The name of the private network. If not provided it will be randomly generated.
	// The name of the private network
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the private network is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region of the private network.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The tags associated with the private network.
	// The tags associated with private network
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The VPC in which to create the private network.
	// The VPC in which to create the private network
	// +crossplane:generate:reference:type=VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// (Deprecated) please use region instead - (Defaults to provider zone) The zone in which the private network should be created.
	// The zone you want to attach the resource to
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// PrivateNetworkSpec defines the desired state of PrivateNetwork
type PrivateNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivateNetworkParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivateNetworkInitParameters `json:"initProvider,omitempty"`
}

// PrivateNetworkStatus defines the observed state of PrivateNetwork.
type PrivateNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivateNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateNetwork is the Schema for the PrivateNetworks API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type PrivateNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivateNetworkSpec   `json:"spec"`
	Status            PrivateNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateNetworkList contains a list of PrivateNetworks
type PrivateNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateNetwork `json:"items"`
}

// Repository type metadata.
var (
	PrivateNetwork_Kind             = "PrivateNetwork"
	PrivateNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivateNetwork_Kind}.String()
	PrivateNetwork_KindAPIVersion   = PrivateNetwork_Kind + "." + CRDGroupVersion.String()
	PrivateNetwork_GroupVersionKind = CRDGroupVersion.WithKind(PrivateNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivateNetwork{}, &PrivateNetworkList{})
}
