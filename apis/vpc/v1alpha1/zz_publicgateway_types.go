/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicGatewayInitParameters struct {

	// Enable SSH bastion on the gateway
	// Enable SSH bastion on the gateway
	BastionEnabled *bool `json:"bastionEnabled,omitempty" tf:"bastion_enabled,omitempty"`

	// The port on which the SSH bastion will listen.
	// Port of the SSH bastion
	BastionPort *float64 `json:"bastionPort,omitempty" tf:"bastion_port,omitempty"`

	// Enable SMTP on the gateway
	// Enable SMTP on the gateway
	EnableSMTP *bool `json:"enableSmtp,omitempty" tf:"enable_smtp,omitempty"`

	// The name of the public gateway. If not provided it will be randomly generated.
	// name of the gateway
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the public gateway is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The tags associated with the public gateway.
	// The tags associated with public gateway
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The gateway type.
	// gateway type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// override the gateway's default recursive DNS servers, if DNS features are enabled.
	// override the gateway's default recursive DNS servers, if DNS features are enabled
	UpstreamDNSServers []*string `json:"upstreamDnsServers,omitempty" tf:"upstream_dns_servers,omitempty"`

	// (Defaults to provider zone) The zone in which the public gateway should be created.
	// The zone you want to attach the resource to
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type PublicGatewayObservation struct {

	// Enable SSH bastion on the gateway
	// Enable SSH bastion on the gateway
	BastionEnabled *bool `json:"bastionEnabled,omitempty" tf:"bastion_enabled,omitempty"`

	// The port on which the SSH bastion will listen.
	// Port of the SSH bastion
	BastionPort *float64 `json:"bastionPort,omitempty" tf:"bastion_port,omitempty"`

	// The date and time of the creation of the public gateway.
	// The date and time of the creation of the public gateway
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Enable SMTP on the gateway
	// Enable SMTP on the gateway
	EnableSMTP *bool `json:"enableSmtp,omitempty" tf:"enable_smtp,omitempty"`

	// The ID of the public gateway.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// attach an existing flexible IP to the gateway
	// attach an existing IP to the gateway
	IPID *string `json:"ipId,omitempty" tf:"ip_id,omitempty"`

	// The name of the public gateway. If not provided it will be randomly generated.
	// name of the gateway
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The organization ID the public gateway is associated with.
	// The organization_id you want to attach the resource to
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the public gateway is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The status of the public gateway.
	// The status of the public gateway
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The tags associated with the public gateway.
	// The tags associated with public gateway
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The gateway type.
	// gateway type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The date and time of the last update of the public gateway.
	// The date and time of the last update of the public gateway
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// override the gateway's default recursive DNS servers, if DNS features are enabled.
	// override the gateway's default recursive DNS servers, if DNS features are enabled
	UpstreamDNSServers []*string `json:"upstreamDnsServers,omitempty" tf:"upstream_dns_servers,omitempty"`

	// (Defaults to provider zone) The zone in which the public gateway should be created.
	// The zone you want to attach the resource to
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type PublicGatewayParameters struct {

	// Enable SSH bastion on the gateway
	// Enable SSH bastion on the gateway
	// +kubebuilder:validation:Optional
	BastionEnabled *bool `json:"bastionEnabled,omitempty" tf:"bastion_enabled,omitempty"`

	// The port on which the SSH bastion will listen.
	// Port of the SSH bastion
	// +kubebuilder:validation:Optional
	BastionPort *float64 `json:"bastionPort,omitempty" tf:"bastion_port,omitempty"`

	// Enable SMTP on the gateway
	// Enable SMTP on the gateway
	// +kubebuilder:validation:Optional
	EnableSMTP *bool `json:"enableSmtp,omitempty" tf:"enable_smtp,omitempty"`

	// attach an existing flexible IP to the gateway
	// attach an existing IP to the gateway
	// +crossplane:generate:reference:type=PublicGatewayIP
	// +kubebuilder:validation:Optional
	IPID *string `json:"ipId,omitempty" tf:"ip_id,omitempty"`

	// Reference to a PublicGatewayIP to populate ipId.
	// +kubebuilder:validation:Optional
	IPIDRef *v1.Reference `json:"ipIdRef,omitempty" tf:"-"`

	// Selector for a PublicGatewayIP to populate ipId.
	// +kubebuilder:validation:Optional
	IPIDSelector *v1.Selector `json:"ipIdSelector,omitempty" tf:"-"`

	// The name of the public gateway. If not provided it will be randomly generated.
	// name of the gateway
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the public gateway is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The tags associated with the public gateway.
	// The tags associated with public gateway
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The gateway type.
	// gateway type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// override the gateway's default recursive DNS servers, if DNS features are enabled.
	// override the gateway's default recursive DNS servers, if DNS features are enabled
	// +kubebuilder:validation:Optional
	UpstreamDNSServers []*string `json:"upstreamDnsServers,omitempty" tf:"upstream_dns_servers,omitempty"`

	// (Defaults to provider zone) The zone in which the public gateway should be created.
	// The zone you want to attach the resource to
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// PublicGatewaySpec defines the desired state of PublicGateway
type PublicGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PublicGatewayParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PublicGatewayInitParameters `json:"initProvider,omitempty"`
}

// PublicGatewayStatus defines the observed state of PublicGateway.
type PublicGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PublicGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PublicGateway is the Schema for the PublicGateways API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type PublicGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   PublicGatewaySpec   `json:"spec"`
	Status PublicGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublicGatewayList contains a list of PublicGateways
type PublicGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicGateway `json:"items"`
}

// Repository type metadata.
var (
	PublicGateway_Kind             = "PublicGateway"
	PublicGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PublicGateway_Kind}.String()
	PublicGateway_KindAPIVersion   = PublicGateway_Kind + "." + CRDGroupVersion.String()
	PublicGateway_GroupVersionKind = CRDGroupVersion.WithKind(PublicGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&PublicGateway{}, &PublicGatewayList{})
}
