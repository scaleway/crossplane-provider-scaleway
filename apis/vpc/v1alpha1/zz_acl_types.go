/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AclInitParameters struct {

	// The action to take for packets which do not match any rules.
	// The action to take for packets which do not match any rules
	DefaultPolicy *string `json:"defaultPolicy,omitempty" tf:"default_policy,omitempty"`

	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type
	IsIPv6 *bool `json:"isIpv6,omitempty" tf:"is_ipv6,omitempty"`

	// (Defaults to provider region) The region of the ACL.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The list of Network ACL rules.
	// The list of Network ACL rules
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// The VPC ID the ACL belongs to.
	// The VPC in which to create the ACL rule
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/vpc/v1alpha1.VPC
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

type AclObservation struct {

	// The action to take for packets which do not match any rules.
	// The action to take for packets which do not match any rules
	DefaultPolicy *string `json:"defaultPolicy,omitempty" tf:"default_policy,omitempty"`

	// The ID of the ACL.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type
	IsIPv6 *bool `json:"isIpv6,omitempty" tf:"is_ipv6,omitempty"`

	// (Defaults to provider region) The region of the ACL.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The list of Network ACL rules.
	// The list of Network ACL rules
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// The VPC ID the ACL belongs to.
	// The VPC in which to create the ACL rule
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type AclParameters struct {

	// The action to take for packets which do not match any rules.
	// The action to take for packets which do not match any rules
	// +kubebuilder:validation:Optional
	DefaultPolicy *string `json:"defaultPolicy,omitempty" tf:"default_policy,omitempty"`

	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type
	// +kubebuilder:validation:Optional
	IsIPv6 *bool `json:"isIpv6,omitempty" tf:"is_ipv6,omitempty"`

	// (Defaults to provider region) The region of the ACL.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The list of Network ACL rules.
	// The list of Network ACL rules
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// The VPC ID the ACL belongs to.
	// The VPC in which to create the ACL rule
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

type RulesInitParameters struct {

	// The policy to apply to the packet.
	// The policy to apply to the packet
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The rule description.
	// The rule description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination IP range to which this rule applies (CIDR notation with subnet mask).
	// Destination IP range to which this rule applies (CIDR notation with subnet mask)
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// The ending port of the destination port range to which this rule applies (inclusive).
	// Ending port of the destination port range to which this rule applies (inclusive)
	DstPortHigh *float64 `json:"dstPortHigh,omitempty" tf:"dst_port_high,omitempty"`

	// The starting port of the destination port range to which this rule applies (inclusive).
	// Starting port of the destination port range to which this rule applies (inclusive)
	DstPortLow *float64 `json:"dstPortLow,omitempty" tf:"dst_port_low,omitempty"`

	// The protocol to which this rule applies. Default value: ANY.
	// The protocol to which this rule applies. Default value: ANY
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The Source IP range to which this rule applies (CIDR notation with subnet mask).
	// Source IP range to which this rule applies (CIDR notation with subnet mask)
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The ending port of the source port range to which this rule applies (inclusive).
	// Ending port of the source port range to which this rule applies (inclusive)
	SrcPortHigh *float64 `json:"srcPortHigh,omitempty" tf:"src_port_high,omitempty"`

	// The starting port of the source port range to which this rule applies (inclusive).
	// Starting port of the source port range to which this rule applies (inclusive)
	SrcPortLow *float64 `json:"srcPortLow,omitempty" tf:"src_port_low,omitempty"`
}

type RulesObservation struct {

	// The policy to apply to the packet.
	// The policy to apply to the packet
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The rule description.
	// The rule description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination IP range to which this rule applies (CIDR notation with subnet mask).
	// Destination IP range to which this rule applies (CIDR notation with subnet mask)
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// The ending port of the destination port range to which this rule applies (inclusive).
	// Ending port of the destination port range to which this rule applies (inclusive)
	DstPortHigh *float64 `json:"dstPortHigh,omitempty" tf:"dst_port_high,omitempty"`

	// The starting port of the destination port range to which this rule applies (inclusive).
	// Starting port of the destination port range to which this rule applies (inclusive)
	DstPortLow *float64 `json:"dstPortLow,omitempty" tf:"dst_port_low,omitempty"`

	// The protocol to which this rule applies. Default value: ANY.
	// The protocol to which this rule applies. Default value: ANY
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The Source IP range to which this rule applies (CIDR notation with subnet mask).
	// Source IP range to which this rule applies (CIDR notation with subnet mask)
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The ending port of the source port range to which this rule applies (inclusive).
	// Ending port of the source port range to which this rule applies (inclusive)
	SrcPortHigh *float64 `json:"srcPortHigh,omitempty" tf:"src_port_high,omitempty"`

	// The starting port of the source port range to which this rule applies (inclusive).
	// Starting port of the source port range to which this rule applies (inclusive)
	SrcPortLow *float64 `json:"srcPortLow,omitempty" tf:"src_port_low,omitempty"`
}

type RulesParameters struct {

	// The policy to apply to the packet.
	// The policy to apply to the packet
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The rule description.
	// The rule description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination IP range to which this rule applies (CIDR notation with subnet mask).
	// Destination IP range to which this rule applies (CIDR notation with subnet mask)
	// +kubebuilder:validation:Optional
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// The ending port of the destination port range to which this rule applies (inclusive).
	// Ending port of the destination port range to which this rule applies (inclusive)
	// +kubebuilder:validation:Optional
	DstPortHigh *float64 `json:"dstPortHigh,omitempty" tf:"dst_port_high,omitempty"`

	// The starting port of the destination port range to which this rule applies (inclusive).
	// Starting port of the destination port range to which this rule applies (inclusive)
	// +kubebuilder:validation:Optional
	DstPortLow *float64 `json:"dstPortLow,omitempty" tf:"dst_port_low,omitempty"`

	// The protocol to which this rule applies. Default value: ANY.
	// The protocol to which this rule applies. Default value: ANY
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The Source IP range to which this rule applies (CIDR notation with subnet mask).
	// Source IP range to which this rule applies (CIDR notation with subnet mask)
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The ending port of the source port range to which this rule applies (inclusive).
	// Ending port of the source port range to which this rule applies (inclusive)
	// +kubebuilder:validation:Optional
	SrcPortHigh *float64 `json:"srcPortHigh,omitempty" tf:"src_port_high,omitempty"`

	// The starting port of the source port range to which this rule applies (inclusive).
	// Starting port of the source port range to which this rule applies (inclusive)
	// +kubebuilder:validation:Optional
	SrcPortLow *float64 `json:"srcPortLow,omitempty" tf:"src_port_low,omitempty"`
}

// AclSpec defines the desired state of Acl
type AclSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AclParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AclInitParameters `json:"initProvider,omitempty"`
}

// AclStatus defines the observed state of Acl.
type AclStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Acl is the Schema for the Acls API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Acl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultPolicy) || (has(self.initProvider) && has(self.initProvider.defaultPolicy))",message="spec.forProvider.defaultPolicy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	Spec   AclSpec   `json:"spec"`
	Status AclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AclList contains a list of Acls
type AclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Acl `json:"items"`
}

// Repository type metadata.
var (
	Acl_Kind             = "Acl"
	Acl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Acl_Kind}.String()
	Acl_KindAPIVersion   = Acl_Kind + "." + CRDGroupVersion.String()
	Acl_GroupVersionKind = CRDGroupVersion.WithKind(Acl_Kind)
)

func init() {
	SchemeBuilder.Register(&Acl{}, &AclList{})
}
