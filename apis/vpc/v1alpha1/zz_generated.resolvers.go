/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this GatewayNetwork.
func (mg *GatewayNetwork) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DHCPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DHCPIDRef,
		Selector:     mg.Spec.ForProvider.DHCPIDSelector,
		To: reference.To{
			List:    &PublicGatewayDHCPList{},
			Managed: &PublicGatewayDHCP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DHCPID")
	}
	mg.Spec.ForProvider.DHCPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DHCPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.GatewayIDRef,
		Selector:     mg.Spec.ForProvider.GatewayIDSelector,
		To: reference.To{
			List:    &PublicGatewayList{},
			Managed: &PublicGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayID")
	}
	mg.Spec.ForProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrivateNetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PrivateNetworkIDRef,
		Selector:     mg.Spec.ForProvider.PrivateNetworkIDSelector,
		To: reference.To{
			List:    &PrivateNetworkList{},
			Managed: &PrivateNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrivateNetworkID")
	}
	mg.Spec.ForProvider.PrivateNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrivateNetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateNetwork.
func (mg *PrivateNetwork) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PublicGateway.
func (mg *PublicGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IPIDRef,
		Selector:     mg.Spec.ForProvider.IPIDSelector,
		To: reference.To{
			List:    &PublicGatewayIPList{},
			Managed: &PublicGatewayIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPID")
	}
	mg.Spec.ForProvider.IPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PublicGatewayPATRule.
func (mg *PublicGatewayPATRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.GatewayIDRef,
		Selector:     mg.Spec.ForProvider.GatewayIDSelector,
		To: reference.To{
			List:    &PublicGatewayList{},
			Managed: &PublicGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayID")
	}
	mg.Spec.ForProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewayIDRef = rsp.ResolvedReference

	return nil
}
