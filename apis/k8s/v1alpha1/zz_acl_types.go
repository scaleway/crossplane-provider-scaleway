/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLRulesInitParameters struct {

	// A text describing this rule.
	// The description of the ACL rule
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The IP range to whitelist in CIDR notation
	// The IP subnet to be allowed
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Allow access to cluster from all Scaleway ranges as defined in Scaleway Network Information - IP ranges used by Scaleway.
	// Only one rule with this field set to true can be added.
	// Allow access to cluster from all Scaleway ranges
	ScalewayRanges *bool `json:"scalewayRanges,omitempty" tf:"scaleway_ranges,omitempty"`
}

type ACLRulesObservation struct {

	// A text describing this rule.
	// The description of the ACL rule
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the ACL resource. It is the same as the ID of the cluster.
	// The ID of the ACL rule
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP range to whitelist in CIDR notation
	// The IP subnet to be allowed
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Allow access to cluster from all Scaleway ranges as defined in Scaleway Network Information - IP ranges used by Scaleway.
	// Only one rule with this field set to true can be added.
	// Allow access to cluster from all Scaleway ranges
	ScalewayRanges *bool `json:"scalewayRanges,omitempty" tf:"scaleway_ranges,omitempty"`
}

type ACLRulesParameters struct {

	// A text describing this rule.
	// The description of the ACL rule
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The IP range to whitelist in CIDR notation
	// The IP subnet to be allowed
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Allow access to cluster from all Scaleway ranges as defined in Scaleway Network Information - IP ranges used by Scaleway.
	// Only one rule with this field set to true can be added.
	// Allow access to cluster from all Scaleway ranges
	// +kubebuilder:validation:Optional
	ScalewayRanges *bool `json:"scalewayRanges,omitempty" tf:"scaleway_ranges,omitempty"`
}

type AclInitParameters struct {

	// A list of ACLs (structure is described below)
	// The list of network rules that manage inbound traffic
	ACLRules []ACLRulesInitParameters `json:"aclRules,omitempty" tf:"acl_rules,omitempty"`

	// UUID of the cluster. The ID of the cluster is also the ID of the ACL resource, as there can only be one per cluster.
	// Cluster on which the ACL should be applied
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/k8s/v1alpha1.Cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in k8s to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in k8s to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// If set to true, no IP will be allowed and the cluster will be in full-isolation.
	// If true, no IP will be allowed and the cluster will be fully isolated
	NoIPAllowed *bool `json:"noIpAllowed,omitempty" tf:"no_ip_allowed,omitempty"`

	// (Defaults to provider region) The region in which the ACL rule should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type AclObservation struct {

	// A list of ACLs (structure is described below)
	// The list of network rules that manage inbound traffic
	ACLRules []ACLRulesObservation `json:"aclRules,omitempty" tf:"acl_rules,omitempty"`

	// UUID of the cluster. The ID of the cluster is also the ID of the ACL resource, as there can only be one per cluster.
	// Cluster on which the ACL should be applied
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The ID of the ACL resource. It is the same as the ID of the cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// If set to true, no IP will be allowed and the cluster will be in full-isolation.
	// If true, no IP will be allowed and the cluster will be fully isolated
	NoIPAllowed *bool `json:"noIpAllowed,omitempty" tf:"no_ip_allowed,omitempty"`

	// (Defaults to provider region) The region in which the ACL rule should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type AclParameters struct {

	// A list of ACLs (structure is described below)
	// The list of network rules that manage inbound traffic
	// +kubebuilder:validation:Optional
	ACLRules []ACLRulesParameters `json:"aclRules,omitempty" tf:"acl_rules,omitempty"`

	// UUID of the cluster. The ID of the cluster is also the ID of the ACL resource, as there can only be one per cluster.
	// Cluster on which the ACL should be applied
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/k8s/v1alpha1.Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in k8s to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in k8s to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// If set to true, no IP will be allowed and the cluster will be in full-isolation.
	// If true, no IP will be allowed and the cluster will be fully isolated
	// +kubebuilder:validation:Optional
	NoIPAllowed *bool `json:"noIpAllowed,omitempty" tf:"no_ip_allowed,omitempty"`

	// (Defaults to provider region) The region in which the ACL rule should be created.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// AclSpec defines the desired state of Acl
type AclSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AclParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AclInitParameters `json:"initProvider,omitempty"`
}

// AclStatus defines the observed state of Acl.
type AclStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Acl is the Schema for the Acls API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Acl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AclSpec   `json:"spec"`
	Status            AclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AclList contains a list of Acls
type AclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Acl `json:"items"`
}

// Repository type metadata.
var (
	Acl_Kind             = "Acl"
	Acl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Acl_Kind}.String()
	Acl_KindAPIVersion   = Acl_Kind + "." + CRDGroupVersion.String()
	Acl_GroupVersionKind = CRDGroupVersion.WithKind(Acl_Kind)
)

func init() {
	SchemeBuilder.Register(&Acl{}, &AclList{})
}
