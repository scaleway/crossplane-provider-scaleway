/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ModelInitParameters struct {

	// The name of the model. This must be unique within the project.
	// The name of the model
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the deployment is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region in which the deployment is created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
	// A token or credential used to authenticate when pulling the model from a private or gated source. For example, a Hugging Face access token with read permissions.
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via secret
	// The HTTPS URL to the model archive or repository. Typically, this is a Hugging Face repository URL (e.g., `https://huggingface.co/your-org/your-model`). The URL must be publicly accessible or require a valid secret for authentication.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ModelObservation struct {

	// The date and time of the creation of the model
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// A textual description of the model (if available).
	// The description of the model
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the model requires end-user license agreement acceptance before use.
	// Defines whether the model has an end user license agreement
	HasEula *bool `json:"hasEula,omitempty" tf:"has_eula,omitempty"`

	// The unique identifier of the model.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the model. This must be unique within the project.
	// The name of the model
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of supported node types and their quantization options. Each entry contains:
	// - node_type_name - The type of node supported.
	// - quantization - A list of supported quantization options, including:
	// - quantization_bits -  Number of bits used for quantization (e.g., 8, 16).
	// - allowed - Whether this quantization is allowed.
	// - max_context_size - Maximum context length supported by this quantization.
	// Supported node types with quantization options and context lengths.
	NodesSupport []NodesSupportObservation `json:"nodesSupport,omitempty" tf:"nodes_support,omitempty"`

	// Size, in bits, of the model parameters.
	// Size, in bits, of the model parameters
	ParameterSizeBits *float64 `json:"parameterSizeBits,omitempty" tf:"parameter_size_bits,omitempty"`

	// (Defaults to provider project_id) The ID of the project the deployment is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region in which the deployment is created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Total size, in bytes, of the model archive.
	// Total size, in bytes, of the model files
	SizeBytes *float64 `json:"sizeBytes,omitempty" tf:"size_bytes,omitempty"`

	// The current status of the model (e.g., ready, error, etc.).
	// The status of the model
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Tags associated with the model.
	// The tags associated with the deployment
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via secret
	// The HTTPS URL to the model archive or repository. Typically, this is a Hugging Face repository URL (e.g., `https://huggingface.co/your-org/your-model`). The URL must be publicly accessible or require a valid secret for authentication.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The date and time of the last update of the model
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ModelParameters struct {

	// The name of the model. This must be unique within the project.
	// The name of the model
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the deployment is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region in which the deployment is created.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
	// A token or credential used to authenticate when pulling the model from a private or gated source. For example, a Hugging Face access token with read permissions.
	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via secret
	// The HTTPS URL to the model archive or repository. Typically, this is a Hugging Face repository URL (e.g., `https://huggingface.co/your-org/your-model`). The URL must be publicly accessible or require a valid secret for authentication.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type NodesSupportInitParameters struct {
}

type NodesSupportObservation struct {

	// The name of the model. This must be unique within the project.
	NodeTypeName *string `json:"nodeTypeName,omitempty" tf:"node_type_name,omitempty"`

	Quantization []QuantizationObservation `json:"quantization,omitempty" tf:"quantization,omitempty"`
}

type NodesSupportParameters struct {
}

type QuantizationInitParameters struct {
}

type QuantizationObservation struct {
	Allowed *bool `json:"allowed,omitempty" tf:"allowed,omitempty"`

	MaxContextSize *float64 `json:"maxContextSize,omitempty" tf:"max_context_size,omitempty"`

	QuantizationBits *float64 `json:"quantizationBits,omitempty" tf:"quantization_bits,omitempty"`
}

type QuantizationParameters struct {
}

// ModelSpec defines the desired state of Model
type ModelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ModelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ModelInitParameters `json:"initProvider,omitempty"`
}

// ModelStatus defines the observed state of Model.
type ModelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ModelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Model is the Schema for the Models API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Model struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   ModelSpec   `json:"spec"`
	Status ModelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ModelList contains a list of Models
type ModelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Model `json:"items"`
}

// Repository type metadata.
var (
	Model_Kind             = "Model"
	Model_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Model_Kind}.String()
	Model_KindAPIVersion   = Model_Kind + "." + CRDGroupVersion.String()
	Model_GroupVersionKind = CRDGroupVersion.WithKind(Model_Kind)
)

func init() {
	SchemeBuilder.Register(&Model{}, &ModelList{})
}
