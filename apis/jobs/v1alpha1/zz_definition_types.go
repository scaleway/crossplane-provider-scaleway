/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CronInitParameters struct {

	// Cron format string.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// The timezone, must be a canonical TZ identifier as found in this list.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type CronObservation struct {

	// Cron format string.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// The timezone, must be a canonical TZ identifier as found in this list.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type CronParameters struct {

	// Cron format string.
	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`

	// The timezone, must be a canonical TZ identifier as found in this list.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone" tf:"timezone,omitempty"`
}

type DefinitionInitParameters struct {

	// The amount of vCPU computing resources to allocate to each container running the job.
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// The command that will be run in the container if specified.
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// The cron configuration
	Cron []CronInitParameters `json:"cron,omitempty" tf:"cron,omitempty"`

	// The description of the job
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The environment variables of the container.
	// +mapType=granular
	Env map[string]*string `json:"env,omitempty" tf:"env,omitempty"`

	// The uri of the container image that will be used for the job run.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// The memory computing resources in MB to allocate to each container running the job.
	MemoryLimit *float64 `json:"memoryLimit,omitempty" tf:"memory_limit,omitempty"`

	// The name of the job.
	// The job name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the Job is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region of the Job.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The job run timeout, in Go Time format (ex: 2h30m25s)
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type DefinitionObservation struct {

	// The amount of vCPU computing resources to allocate to each container running the job.
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// The command that will be run in the container if specified.
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// The cron configuration
	Cron []CronObservation `json:"cron,omitempty" tf:"cron,omitempty"`

	// The description of the job
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The environment variables of the container.
	// +mapType=granular
	Env map[string]*string `json:"env,omitempty" tf:"env,omitempty"`

	// The ID of the Job Definition.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The uri of the container image that will be used for the job run.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// The memory computing resources in MB to allocate to each container running the job.
	MemoryLimit *float64 `json:"memoryLimit,omitempty" tf:"memory_limit,omitempty"`

	// The name of the job.
	// The job name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the Job is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region of the Job.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The job run timeout, in Go Time format (ex: 2h30m25s)
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type DefinitionParameters struct {

	// The amount of vCPU computing resources to allocate to each container running the job.
	// +kubebuilder:validation:Optional
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// The command that will be run in the container if specified.
	// +kubebuilder:validation:Optional
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// The cron configuration
	// +kubebuilder:validation:Optional
	Cron []CronParameters `json:"cron,omitempty" tf:"cron,omitempty"`

	// The description of the job
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The environment variables of the container.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Env map[string]*string `json:"env,omitempty" tf:"env,omitempty"`

	// The uri of the container image that will be used for the job run.
	// +kubebuilder:validation:Optional
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// The memory computing resources in MB to allocate to each container running the job.
	// +kubebuilder:validation:Optional
	MemoryLimit *float64 `json:"memoryLimit,omitempty" tf:"memory_limit,omitempty"`

	// The name of the job.
	// The job name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the Job is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region of the Job.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The job run timeout, in Go Time format (ex: 2h30m25s)
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

// DefinitionSpec defines the desired state of Definition
type DefinitionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DefinitionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DefinitionInitParameters `json:"initProvider,omitempty"`
}

// DefinitionStatus defines the observed state of Definition.
type DefinitionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Definition is the Schema for the Definitions API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Definition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cpuLimit) || (has(self.initProvider) && has(self.initProvider.cpuLimit))",message="spec.forProvider.cpuLimit is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memoryLimit) || (has(self.initProvider) && has(self.initProvider.memoryLimit))",message="spec.forProvider.memoryLimit is a required parameter"
	Spec   DefinitionSpec   `json:"spec"`
	Status DefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DefinitionList contains a list of Definitions
type DefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Definition `json:"items"`
}

// Repository type metadata.
var (
	Definition_Kind             = "Definition"
	Definition_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Definition_Kind}.String()
	Definition_KindAPIVersion   = Definition_Kind + "." + CRDGroupVersion.String()
	Definition_GroupVersionKind = CRDGroupVersion.WithKind(Definition_Kind)
)

func init() {
	SchemeBuilder.Register(&Definition{}, &DefinitionList{})
}
