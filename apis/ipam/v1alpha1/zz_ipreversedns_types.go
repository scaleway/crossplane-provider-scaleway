/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPReverseDNSInitParameters struct {

	// The IP corresponding to the hostname.
	// The IP corresponding to the hostname
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The reverse domain name.
	// The reverse domain name
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The IPAM IP ID.
	// The IPAM IP ID
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/ipam/v1alpha1.IP
	IpamIPID *string `json:"ipamIpId,omitempty" tf:"ipam_ip_id,omitempty"`

	// Reference to a IP in ipam to populate ipamIpId.
	// +kubebuilder:validation:Optional
	IpamIPIDRef *v1.Reference `json:"ipamIpIdRef,omitempty" tf:"-"`

	// Selector for a IP in ipam to populate ipamIpId.
	// +kubebuilder:validation:Optional
	IpamIPIDSelector *v1.Selector `json:"ipamIpIdSelector,omitempty" tf:"-"`

	// (Defaults to provider region) The region of the IP reverse DNS.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type IPReverseDNSObservation struct {

	// The IP corresponding to the hostname.
	// The IP corresponding to the hostname
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The reverse domain name.
	// The reverse domain name
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The ID of the IPAM IP for which reverse DNS is configured.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IPAM IP ID.
	// The IPAM IP ID
	IpamIPID *string `json:"ipamIpId,omitempty" tf:"ipam_ip_id,omitempty"`

	// (Defaults to provider region) The region of the IP reverse DNS.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type IPReverseDNSParameters struct {

	// The IP corresponding to the hostname.
	// The IP corresponding to the hostname
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The reverse domain name.
	// The reverse domain name
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The IPAM IP ID.
	// The IPAM IP ID
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/ipam/v1alpha1.IP
	// +kubebuilder:validation:Optional
	IpamIPID *string `json:"ipamIpId,omitempty" tf:"ipam_ip_id,omitempty"`

	// Reference to a IP in ipam to populate ipamIpId.
	// +kubebuilder:validation:Optional
	IpamIPIDRef *v1.Reference `json:"ipamIpIdRef,omitempty" tf:"-"`

	// Selector for a IP in ipam to populate ipamIpId.
	// +kubebuilder:validation:Optional
	IpamIPIDSelector *v1.Selector `json:"ipamIpIdSelector,omitempty" tf:"-"`

	// (Defaults to provider region) The region of the IP reverse DNS.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// IPReverseDNSSpec defines the desired state of IPReverseDNS
type IPReverseDNSSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPReverseDNSParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPReverseDNSInitParameters `json:"initProvider,omitempty"`
}

// IPReverseDNSStatus defines the observed state of IPReverseDNS.
type IPReverseDNSStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPReverseDNSObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IPReverseDNS is the Schema for the IPReverseDNSs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type IPReverseDNS struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.address) || (has(self.initProvider) && has(self.initProvider.address))",message="spec.forProvider.address is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostname) || (has(self.initProvider) && has(self.initProvider.hostname))",message="spec.forProvider.hostname is a required parameter"
	Spec   IPReverseDNSSpec   `json:"spec"`
	Status IPReverseDNSStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPReverseDNSList contains a list of IPReverseDNSs
type IPReverseDNSList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPReverseDNS `json:"items"`
}

// Repository type metadata.
var (
	IPReverseDNS_Kind             = "IPReverseDNS"
	IPReverseDNS_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPReverseDNS_Kind}.String()
	IPReverseDNS_KindAPIVersion   = IPReverseDNS_Kind + "." + CRDGroupVersion.String()
	IPReverseDNS_GroupVersionKind = CRDGroupVersion.WithKind(IPReverseDNS_Kind)
)

func init() {
	SchemeBuilder.Register(&IPReverseDNS{}, &IPReverseDNSList{})
}
