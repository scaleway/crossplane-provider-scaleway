/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPInitParameters struct {

	// Request a specific IP in the requested source pool.
	// Request a specific IP in the requested source pool
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Defines whether to request an IPv6 instead of an IPv4.
	// Request an IPv6 instead of an IPv4
	IsIPv6 *bool `json:"isIpv6,omitempty" tf:"is_ipv6,omitempty"`

	// (Defaults to provider project_id) The ID of the project the IP is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region of the IP.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The source in which to book the IP.
	// The source in which to book the IP
	Source []SourceInitParameters `json:"source,omitempty" tf:"source,omitempty"`

	// The tags associated with the IP.
	// The tags associated with the IP
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type IPObservation struct {

	// Request a specific IP in the requested source pool.
	// Request a specific IP in the requested source pool
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Date and time of IP's creation (RFC 3339 format).
	// The date and time of the creation of the IP
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the IP in IPAM.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Defines whether to request an IPv6 instead of an IPv4.
	// Request an IPv6 instead of an IPv4
	IsIPv6 *bool `json:"isIpv6,omitempty" tf:"is_ipv6,omitempty"`

	// (Defaults to provider project_id) The ID of the project the IP is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region of the IP.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The IP resource.
	// The IP resource
	Resource []ResourceObservation `json:"resource,omitempty" tf:"resource,omitempty"`

	// The reverses DNS for this IP.
	// The reverses DNS for this IP
	Reverses []ReversesObservation `json:"reverses,omitempty" tf:"reverses,omitempty"`

	// The source in which to book the IP.
	// The source in which to book the IP
	Source []SourceObservation `json:"source,omitempty" tf:"source,omitempty"`

	// The tags associated with the IP.
	// The tags associated with the IP
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Date and time of IP's last update (RFC 3339 format).
	// The date and time of the last update of the IP
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// The zone of the IP.
	// The zone of the resource
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type IPParameters struct {

	// Request a specific IP in the requested source pool.
	// Request a specific IP in the requested source pool
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Defines whether to request an IPv6 instead of an IPv4.
	// Request an IPv6 instead of an IPv4
	// +kubebuilder:validation:Optional
	IsIPv6 *bool `json:"isIpv6,omitempty" tf:"is_ipv6,omitempty"`

	// (Defaults to provider project_id) The ID of the project the IP is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region of the IP.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The source in which to book the IP.
	// The source in which to book the IP
	// +kubebuilder:validation:Optional
	Source []SourceParameters `json:"source,omitempty" tf:"source,omitempty"`

	// The tags associated with the IP.
	// The tags associated with the IP
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ResourceInitParameters struct {
}

type ResourceObservation struct {

	// The ID of the IP in IPAM.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The MAC Address of the resource the IP is attached to.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// The name of the resource the IP is attached to.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of resource the IP is attached to.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ResourceParameters struct {
}

type ReversesInitParameters struct {
}

type ReversesObservation struct {

	// Request a specific IP in the requested source pool.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The reverse domain name.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`
}

type ReversesParameters struct {
}

type SourceInitParameters struct {

	// The private network the IP lives in if the IP is a private IP.
	// Private Network the IP lives in if the IP is a private IP
	// +crossplane:generate:reference:type=github.com/scaleway/provider-scaleway/apis/vpc/v1alpha1.PrivateNetwork
	PrivateNetworkID *string `json:"privateNetworkId,omitempty" tf:"private_network_id,omitempty"`

	// Reference to a PrivateNetwork in vpc to populate privateNetworkId.
	// +kubebuilder:validation:Optional
	PrivateNetworkIDRef *v1.Reference `json:"privateNetworkIdRef,omitempty" tf:"-"`

	// Selector for a PrivateNetwork in vpc to populate privateNetworkId.
	// +kubebuilder:validation:Optional
	PrivateNetworkIDSelector *v1.Selector `json:"privateNetworkIdSelector,omitempty" tf:"-"`

	// The private network subnet the IP lives in if the IP is a private IP in a private network.
	// Private Network subnet the IP lives in if the IP is a private IP in a Private Network
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The zone the IP lives in if the IP is a public zoned one
	// Zone the IP lives in if the IP is a public zoned one
	Zonal *string `json:"zonal,omitempty" tf:"zonal,omitempty"`
}

type SourceObservation struct {

	// The private network the IP lives in if the IP is a private IP.
	// Private Network the IP lives in if the IP is a private IP
	PrivateNetworkID *string `json:"privateNetworkId,omitempty" tf:"private_network_id,omitempty"`

	// The private network subnet the IP lives in if the IP is a private IP in a private network.
	// Private Network subnet the IP lives in if the IP is a private IP in a Private Network
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The zone the IP lives in if the IP is a public zoned one
	// Zone the IP lives in if the IP is a public zoned one
	Zonal *string `json:"zonal,omitempty" tf:"zonal,omitempty"`
}

type SourceParameters struct {

	// The private network the IP lives in if the IP is a private IP.
	// Private Network the IP lives in if the IP is a private IP
	// +crossplane:generate:reference:type=github.com/scaleway/provider-scaleway/apis/vpc/v1alpha1.PrivateNetwork
	// +kubebuilder:validation:Optional
	PrivateNetworkID *string `json:"privateNetworkId,omitempty" tf:"private_network_id,omitempty"`

	// Reference to a PrivateNetwork in vpc to populate privateNetworkId.
	// +kubebuilder:validation:Optional
	PrivateNetworkIDRef *v1.Reference `json:"privateNetworkIdRef,omitempty" tf:"-"`

	// Selector for a PrivateNetwork in vpc to populate privateNetworkId.
	// +kubebuilder:validation:Optional
	PrivateNetworkIDSelector *v1.Selector `json:"privateNetworkIdSelector,omitempty" tf:"-"`

	// The private network subnet the IP lives in if the IP is a private IP in a private network.
	// Private Network subnet the IP lives in if the IP is a private IP in a Private Network
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The zone the IP lives in if the IP is a public zoned one
	// Zone the IP lives in if the IP is a public zoned one
	// +kubebuilder:validation:Optional
	Zonal *string `json:"zonal,omitempty" tf:"zonal,omitempty"`
}

// IPSpec defines the desired state of IP
type IPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPInitParameters `json:"initProvider,omitempty"`
}

// IPStatus defines the observed state of IP.
type IPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IP is the Schema for the IPs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type IP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) && has(self.initProvider.source))",message="spec.forProvider.source is a required parameter"
	Spec   IPSpec   `json:"spec"`
	Status IPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPList contains a list of IPs
type IPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IP `json:"items"`
}

// Repository type metadata.
var (
	IP_Kind             = "IP"
	IP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IP_Kind}.String()
	IP_KindAPIVersion   = IP_Kind + "." + CRDGroupVersion.String()
	IP_GroupVersionKind = CRDGroupVersion.WithKind(IP_Kind)
)

func init() {
	SchemeBuilder.Register(&IP{}, &IPList{})
}
