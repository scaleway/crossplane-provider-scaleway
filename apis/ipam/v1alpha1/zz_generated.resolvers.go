/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1alpha1 "github.com/scaleway/provider-scaleway/apis/vpc/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this IP.
func (mg *IP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source[i3].PrivateNetworkID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Source[i3].PrivateNetworkIDRef,
			Selector:     mg.Spec.ForProvider.Source[i3].PrivateNetworkIDSelector,
			To: reference.To{
				List:    &v1alpha1.PrivateNetworkList{},
				Managed: &v1alpha1.PrivateNetwork{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].PrivateNetworkID")
		}
		mg.Spec.ForProvider.Source[i3].PrivateNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source[i3].PrivateNetworkIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source[i3].PrivateNetworkID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Source[i3].PrivateNetworkIDRef,
			Selector:     mg.Spec.InitProvider.Source[i3].PrivateNetworkIDSelector,
			To: reference.To{
				List:    &v1alpha1.PrivateNetworkList{},
				Managed: &v1alpha1.PrivateNetwork{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source[i3].PrivateNetworkID")
		}
		mg.Spec.InitProvider.Source[i3].PrivateNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source[i3].PrivateNetworkIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this IPReverseDNS.
func (mg *IPReverseDNS) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IpamIPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IpamIPIDRef,
		Selector:     mg.Spec.ForProvider.IpamIPIDSelector,
		To: reference.To{
			List:    &IPList{},
			Managed: &IP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IpamIPID")
	}
	mg.Spec.ForProvider.IpamIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IpamIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IpamIPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.IpamIPIDRef,
		Selector:     mg.Spec.InitProvider.IpamIPIDSelector,
		To: reference.To{
			List:    &IPList{},
			Managed: &IP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IpamIPID")
	}
	mg.Spec.InitProvider.IpamIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IpamIPIDRef = rsp.ResolvedReference

	return nil
}
