/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SQSCredentialsInitParameters struct {

	// The unique name of the SQS credentials.
	// The credentials name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// . List of permissions associated with these credentials.
	Permissions []SQSCredentialsPermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (Defaults to provider project_id) The ID of the Project in which SQS is enabled.
	// The project_id you want to attach the resource to
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/account/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Defaults to provider region). The region in which SQS is enabled.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type SQSCredentialsObservation struct {

	// The ID of the credentials
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique name of the SQS credentials.
	// The credentials name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// . List of permissions associated with these credentials.
	Permissions []SQSCredentialsPermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (Defaults to provider project_id) The ID of the Project in which SQS is enabled.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region). The region in which SQS is enabled.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type SQSCredentialsParameters struct {

	// The unique name of the SQS credentials.
	// The credentials name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// . List of permissions associated with these credentials.
	// +kubebuilder:validation:Optional
	Permissions []SQSCredentialsPermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (Defaults to provider project_id) The ID of the Project in which SQS is enabled.
	// The project_id you want to attach the resource to
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/account/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Defaults to provider region). The region in which SQS is enabled.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type SQSCredentialsPermissionsInitParameters struct {

	// . Defines whether the user can manage the associated resource(s).
	// Allow manage the associated resource
	CanManage *bool `json:"canManage,omitempty" tf:"can_manage,omitempty"`

	// . Defines whether the user can publish messages to the service.
	// Allow publish messages to the service
	CanPublish *bool `json:"canPublish,omitempty" tf:"can_publish,omitempty"`

	// . Defines whether the user can receive messages from the service.
	// Allow receive messages from the service
	CanReceive *bool `json:"canReceive,omitempty" tf:"can_receive,omitempty"`
}

type SQSCredentialsPermissionsObservation struct {

	// . Defines whether the user can manage the associated resource(s).
	// Allow manage the associated resource
	CanManage *bool `json:"canManage,omitempty" tf:"can_manage,omitempty"`

	// . Defines whether the user can publish messages to the service.
	// Allow publish messages to the service
	CanPublish *bool `json:"canPublish,omitempty" tf:"can_publish,omitempty"`

	// . Defines whether the user can receive messages from the service.
	// Allow receive messages from the service
	CanReceive *bool `json:"canReceive,omitempty" tf:"can_receive,omitempty"`
}

type SQSCredentialsPermissionsParameters struct {

	// . Defines whether the user can manage the associated resource(s).
	// Allow manage the associated resource
	// +kubebuilder:validation:Optional
	CanManage *bool `json:"canManage,omitempty" tf:"can_manage,omitempty"`

	// . Defines whether the user can publish messages to the service.
	// Allow publish messages to the service
	// +kubebuilder:validation:Optional
	CanPublish *bool `json:"canPublish,omitempty" tf:"can_publish,omitempty"`

	// . Defines whether the user can receive messages from the service.
	// Allow receive messages from the service
	// +kubebuilder:validation:Optional
	CanReceive *bool `json:"canReceive,omitempty" tf:"can_receive,omitempty"`
}

// SQSCredentialsSpec defines the desired state of SQSCredentials
type SQSCredentialsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SQSCredentialsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SQSCredentialsInitParameters `json:"initProvider,omitempty"`
}

// SQSCredentialsStatus defines the observed state of SQSCredentials.
type SQSCredentialsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQSCredentialsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SQSCredentials is the Schema for the SQSCredentialss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type SQSCredentials struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SQSCredentialsSpec   `json:"spec"`
	Status            SQSCredentialsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQSCredentialsList contains a list of SQSCredentialss
type SQSCredentialsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQSCredentials `json:"items"`
}

// Repository type metadata.
var (
	SQSCredentials_Kind             = "SQSCredentials"
	SQSCredentials_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQSCredentials_Kind}.String()
	SQSCredentials_KindAPIVersion   = SQSCredentials_Kind + "." + CRDGroupVersion.String()
	SQSCredentials_GroupVersionKind = CRDGroupVersion.WithKind(SQSCredentials_Kind)
)

func init() {
	SchemeBuilder.Register(&SQSCredentials{}, &SQSCredentialsList{})
}
