/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SNSTopicInitParameters struct {

	// The access key of the SNS credentials.
	// SNS access key
	AccessKeySecretRef v1.SecretKeySelector `json:"accessKeySecretRef" tf:"-"`

	// Specifies whether to enable content-based deduplication.
	// Specifies whether to enable content-based deduplication.
	ContentBasedDeduplication *bool `json:"contentBasedDeduplication,omitempty" tf:"content_based_deduplication,omitempty"`

	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo
	FifoTopic *bool `json:"fifoTopic,omitempty" tf:"fifo_topic,omitempty"`

	// The unique name of the SNS topic. Either name or name_prefix is required. Conflicts with name_prefix.
	// Name of the SNS Topic.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Creates a unique name beginning with the specified prefix. Conflicts with name.
	// Creates a unique name beginning with the specified prefix.
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix,omitempty"`

	// (Defaults to provider project_id) The ID of the Project in which SNS is enabled.
	// The project_id you want to attach the resource to
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/mnq/v1alpha1.SNS
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a SNS in mnq to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a SNS in mnq to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Defaults to provider region). The region
	// in which SNS is enabled.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The secret key of the SNS credentials.
	// SNS secret key
	SecretKeySecretRef v1.SecretKeySelector `json:"secretKeySecretRef" tf:"-"`

	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to https://sns.mnq.{region}.scaleway.com.
	// SNS endpoint
	SnsEndpoint *string `json:"snsEndpoint,omitempty" tf:"sns_endpoint,omitempty"`
}

type SNSTopicObservation struct {

	// The ARN of the topic
	// ARN of the topic, should have format 'arn:scw:sns:project-${project_id}:${topic_name}'
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Specifies whether to enable content-based deduplication.
	// Specifies whether to enable content-based deduplication.
	ContentBasedDeduplication *bool `json:"contentBasedDeduplication,omitempty" tf:"content_based_deduplication,omitempty"`

	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo
	FifoTopic *bool `json:"fifoTopic,omitempty" tf:"fifo_topic,omitempty"`

	// The ID of the topic with format {region}/{project-id}/{topic-name}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique name of the SNS topic. Either name or name_prefix is required. Conflicts with name_prefix.
	// Name of the SNS Topic.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Creates a unique name beginning with the specified prefix. Conflicts with name.
	// Creates a unique name beginning with the specified prefix.
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix,omitempty"`

	// Owner of the SNS topic, should have format 'project-${project_id}'
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Defaults to provider project_id) The ID of the Project in which SNS is enabled.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region). The region
	// in which SNS is enabled.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to https://sns.mnq.{region}.scaleway.com.
	// SNS endpoint
	SnsEndpoint *string `json:"snsEndpoint,omitempty" tf:"sns_endpoint,omitempty"`
}

type SNSTopicParameters struct {

	// The access key of the SNS credentials.
	// SNS access key
	// +kubebuilder:validation:Optional
	AccessKeySecretRef v1.SecretKeySelector `json:"accessKeySecretRef" tf:"-"`

	// Specifies whether to enable content-based deduplication.
	// Specifies whether to enable content-based deduplication.
	// +kubebuilder:validation:Optional
	ContentBasedDeduplication *bool `json:"contentBasedDeduplication,omitempty" tf:"content_based_deduplication,omitempty"`

	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo
	// +kubebuilder:validation:Optional
	FifoTopic *bool `json:"fifoTopic,omitempty" tf:"fifo_topic,omitempty"`

	// The unique name of the SNS topic. Either name or name_prefix is required. Conflicts with name_prefix.
	// Name of the SNS Topic.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Creates a unique name beginning with the specified prefix. Conflicts with name.
	// Creates a unique name beginning with the specified prefix.
	// +kubebuilder:validation:Optional
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix,omitempty"`

	// (Defaults to provider project_id) The ID of the Project in which SNS is enabled.
	// The project_id you want to attach the resource to
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/mnq/v1alpha1.SNS
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a SNS in mnq to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a SNS in mnq to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Defaults to provider region). The region
	// in which SNS is enabled.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The secret key of the SNS credentials.
	// SNS secret key
	// +kubebuilder:validation:Optional
	SecretKeySecretRef v1.SecretKeySelector `json:"secretKeySecretRef" tf:"-"`

	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to https://sns.mnq.{region}.scaleway.com.
	// SNS endpoint
	// +kubebuilder:validation:Optional
	SnsEndpoint *string `json:"snsEndpoint,omitempty" tf:"sns_endpoint,omitempty"`
}

// SNSTopicSpec defines the desired state of SNSTopic
type SNSTopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SNSTopicParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SNSTopicInitParameters `json:"initProvider,omitempty"`
}

// SNSTopicStatus defines the observed state of SNSTopic.
type SNSTopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SNSTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SNSTopic is the Schema for the SNSTopics API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type SNSTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessKeySecretRef)",message="spec.forProvider.accessKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secretKeySecretRef)",message="spec.forProvider.secretKeySecretRef is a required parameter"
	Spec   SNSTopicSpec   `json:"spec"`
	Status SNSTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SNSTopicList contains a list of SNSTopics
type SNSTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SNSTopic `json:"items"`
}

// Repository type metadata.
var (
	SNSTopic_Kind             = "SNSTopic"
	SNSTopic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SNSTopic_Kind}.String()
	SNSTopic_KindAPIVersion   = SNSTopic_Kind + "." + CRDGroupVersion.String()
	SNSTopic_GroupVersionKind = CRDGroupVersion.WithKind(SNSTopic_Kind)
)

func init() {
	SchemeBuilder.Register(&SNSTopic{}, &SNSTopicList{})
}
