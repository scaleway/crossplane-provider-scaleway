/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NATSCredentialsInitParameters struct {

	// The ID of the NATS account the credentials are generated from
	// ID of the nats account
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/mnq/v1alpha1.NATSAccount
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a NATSAccount in mnq to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a NATSAccount in mnq to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// The unique name of the NATS credentials.
	// The nats credentials name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider region). The region
	// in which the account exists.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type NATSCredentialsObservation struct {

	// The ID of the NATS account the credentials are generated from
	// ID of the nats account
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The ID of the credentials
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique name of the NATS credentials.
	// The nats credentials name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider region). The region
	// in which the account exists.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type NATSCredentialsParameters struct {

	// The ID of the NATS account the credentials are generated from
	// ID of the nats account
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/mnq/v1alpha1.NATSAccount
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a NATSAccount in mnq to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a NATSAccount in mnq to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// The unique name of the NATS credentials.
	// The nats credentials name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider region). The region
	// in which the account exists.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// NATSCredentialsSpec defines the desired state of NATSCredentials
type NATSCredentialsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NATSCredentialsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NATSCredentialsInitParameters `json:"initProvider,omitempty"`
}

// NATSCredentialsStatus defines the observed state of NATSCredentials.
type NATSCredentialsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NATSCredentialsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NATSCredentials is the Schema for the NATSCredentialss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type NATSCredentials struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NATSCredentialsSpec   `json:"spec"`
	Status            NATSCredentialsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NATSCredentialsList contains a list of NATSCredentialss
type NATSCredentialsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATSCredentials `json:"items"`
}

// Repository type metadata.
var (
	NATSCredentials_Kind             = "NATSCredentials"
	NATSCredentials_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NATSCredentials_Kind}.String()
	NATSCredentials_KindAPIVersion   = NATSCredentials_Kind + "." + CRDGroupVersion.String()
	NATSCredentials_GroupVersionKind = CRDGroupVersion.WithKind(NATSCredentials_Kind)
)

func init() {
	SchemeBuilder.Register(&NATSCredentials{}, &NATSCredentialsList{})
}
