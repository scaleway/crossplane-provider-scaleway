/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SourceInitParameters struct {

	// The name of the data source.
	// Name of the datasource
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to the Project ID specified in the provider configuration) The ID of the Project the data source is associated with.
	// The project_id you want to attach the resource to
	// +crossplane:generate:reference:type=github.com/scaleway/provider-scaleway/apis/account/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Defaults to the region specified in the provider configuration) The region where the data source is located.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The number of days to retain data in the data source. Must be a value between 1 and 365. Changes to this field will force the creation of a new resource.
	// The number of days to retain data, must be between 1 and 365.
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// The type of data source. Possible values are: metrics, logs, or traces.
	// The type of the datasource
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceObservation struct {

	// The date and time the data source was created (in RFC 3339 format).
	// The date and time of the creation of the cockpit datasource
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the data source.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the data source.
	// Name of the datasource
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The origin of the Cockpit data source.
	// The origin of the datasource
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// (Defaults to the Project ID specified in the provider configuration) The ID of the Project the data source is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The URL endpoint used for pushing data to the Cockpit data source.
	// The URL endpoint used for pushing data to the cockpit data source.
	PushURL *string `json:"pushUrl,omitempty" tf:"push_url,omitempty"`

	// (Defaults to the region specified in the provider configuration) The region where the data source is located.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The number of days to retain data in the data source. Must be a value between 1 and 365. Changes to this field will force the creation of a new resource.
	// The number of days to retain data, must be between 1 and 365.
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// Indicates whether the data source is synchronized with Grafana.
	// Indicates whether the data source is synchronized with Grafana
	SynchronizedWithGrafana *bool `json:"synchronizedWithGrafana,omitempty" tf:"synchronized_with_grafana,omitempty"`

	// The type of data source. Possible values are: metrics, logs, or traces.
	// The type of the datasource
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The URL of the Cockpit data source.
	// The URL of the datasource
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The date and time the data source was last updated (in RFC 3339 format).
	// The date and time of the last update of the cockpit datasource
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SourceParameters struct {

	// The name of the data source.
	// Name of the datasource
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to the Project ID specified in the provider configuration) The ID of the Project the data source is associated with.
	// The project_id you want to attach the resource to
	// +crossplane:generate:reference:type=github.com/scaleway/provider-scaleway/apis/account/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Defaults to the region specified in the provider configuration) The region where the data source is located.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The number of days to retain data in the data source. Must be a value between 1 and 365. Changes to this field will force the creation of a new resource.
	// The number of days to retain data, must be between 1 and 365.
	// +kubebuilder:validation:Optional
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// The type of data source. Possible values are: metrics, logs, or traces.
	// The type of the datasource
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// SourceSpec defines the desired state of Source
type SourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SourceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SourceInitParameters `json:"initProvider,omitempty"`
}

// SourceStatus defines the observed state of Source.
type SourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Source is the Schema for the Sources API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Source struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.retentionDays) || (has(self.initProvider) && has(self.initProvider.retentionDays))",message="spec.forProvider.retentionDays is a required parameter"
	Spec   SourceSpec   `json:"spec"`
	Status SourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SourceList contains a list of Sources
type SourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Source `json:"items"`
}

// Repository type metadata.
var (
	Source_Kind             = "Source"
	Source_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Source_Kind}.String()
	Source_KindAPIVersion   = Source_Kind + "." + CRDGroupVersion.String()
	Source_GroupVersionKind = CRDGroupVersion.WithKind(Source_Kind)
)

func init() {
	SchemeBuilder.Register(&Source{}, &SourceList{})
}
