/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertManagerInitParameters struct {

	// A list of contact points with email addresses for the alert receivers. Each map should contain a single key email.
	// A list of contact points
	ContactPoints []ContactPointsInitParameters `json:"contactPoints,omitempty" tf:"contact_points,omitempty"`

	// Indicates whether the alert manager should be enabled. Defaults to true.
	// Enable or disable the alert manager
	EnableManagedAlerts *bool `json:"enableManagedAlerts,omitempty" tf:"enable_managed_alerts,omitempty"`

	// (Defaults to provider project_id) The ID of the project the cockpit is associated with.
	// The project_id you want to attach the resource to
	// +crossplane:generate:reference:type=github.com/scaleway/provider-scaleway/apis/account/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Defaults to provider region) The region in which alert_manager should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type AlertManagerObservation struct {

	// Alert manager URL.
	// Alert manager URL
	AlertManagerURL *string `json:"alertManagerUrl,omitempty" tf:"alert_manager_url,omitempty"`

	// A list of contact points with email addresses for the alert receivers. Each map should contain a single key email.
	// A list of contact points
	ContactPoints []ContactPointsObservation `json:"contactPoints,omitempty" tf:"contact_points,omitempty"`

	// Indicates whether the alert manager should be enabled. Defaults to true.
	// Enable or disable the alert manager
	EnableManagedAlerts *bool `json:"enableManagedAlerts,omitempty" tf:"enable_managed_alerts,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the cockpit is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region) The region in which alert_manager should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type AlertManagerParameters struct {

	// A list of contact points with email addresses for the alert receivers. Each map should contain a single key email.
	// A list of contact points
	// +kubebuilder:validation:Optional
	ContactPoints []ContactPointsParameters `json:"contactPoints,omitempty" tf:"contact_points,omitempty"`

	// Indicates whether the alert manager should be enabled. Defaults to true.
	// Enable or disable the alert manager
	// +kubebuilder:validation:Optional
	EnableManagedAlerts *bool `json:"enableManagedAlerts,omitempty" tf:"enable_managed_alerts,omitempty"`

	// (Defaults to provider project_id) The ID of the project the cockpit is associated with.
	// The project_id you want to attach the resource to
	// +crossplane:generate:reference:type=github.com/scaleway/provider-scaleway/apis/account/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in account to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Defaults to provider region) The region in which alert_manager should be created.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ContactPointsInitParameters struct {

	// Email addresses for the alert receivers
	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type ContactPointsObservation struct {

	// Email addresses for the alert receivers
	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type ContactPointsParameters struct {

	// Email addresses for the alert receivers
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

// AlertManagerSpec defines the desired state of AlertManager
type AlertManagerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlertManagerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AlertManagerInitParameters `json:"initProvider,omitempty"`
}

// AlertManagerStatus defines the observed state of AlertManager.
type AlertManagerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlertManagerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AlertManager is the Schema for the AlertManagers API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type AlertManager struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlertManagerSpec   `json:"spec"`
	Status            AlertManagerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlertManagerList contains a list of AlertManagers
type AlertManagerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlertManager `json:"items"`
}

// Repository type metadata.
var (
	AlertManager_Kind             = "AlertManager"
	AlertManager_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlertManager_Kind}.String()
	AlertManager_KindAPIVersion   = AlertManager_Kind + "." + CRDGroupVersion.String()
	AlertManager_GroupVersionKind = CRDGroupVersion.WithKind(AlertManager_Kind)
)

func init() {
	SchemeBuilder.Register(&AlertManager{}, &AlertManagerList{})
}
