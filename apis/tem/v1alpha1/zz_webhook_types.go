/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WebhookInitParameters struct {

	// The ID of the domain the webhook is associated with.
	// The domain id
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/tem/v1alpha1.Domain
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Reference to a Domain in tem to populate domainId.
	// +kubebuilder:validation:Optional
	DomainIDRef *v1.Reference `json:"domainIdRef,omitempty" tf:"-"`

	// Selector for a Domain in tem to populate domainId.
	// +kubebuilder:validation:Optional
	DomainIDSelector *v1.Selector `json:"domainIdSelector,omitempty" tf:"-"`

	// A list of event types that trigger the webhook.
	// List of event types
	EventTypes []*string `json:"eventTypes,omitempty" tf:"event_types,omitempty"`

	// The name of the webhook. Defaults to an autogenerated name if not provided.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the webhook is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region). The region in which the webhook should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Amazon Resource Name (ARN) of the SNS topic.
	// SNS ARN
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/mnq/v1alpha1.SNSTopic
	SnsArn *string `json:"snsArn,omitempty" tf:"sns_arn,omitempty"`

	// Reference to a SNSTopic in mnq to populate snsArn.
	// +kubebuilder:validation:Optional
	SnsArnRef *v1.Reference `json:"snsArnRef,omitempty" tf:"-"`

	// Selector for a SNSTopic in mnq to populate snsArn.
	// +kubebuilder:validation:Optional
	SnsArnSelector *v1.Selector `json:"snsArnSelector,omitempty" tf:"-"`
}

type WebhookObservation struct {

	// The date and time of the webhook's creation (RFC 3339 format).
	// Creation timestamp
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The ID of the domain the webhook is associated with.
	// The domain id
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// A list of event types that trigger the webhook.
	// List of event types
	EventTypes []*string `json:"eventTypes,omitempty" tf:"event_types,omitempty"`

	// The ID of the webhook.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the webhook. Defaults to an autogenerated name if not provided.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the organization the webhook belongs to.
	// The organization_id you want to attach the resource to
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Defaults to provider project_id) The ID of the project the webhook is associated with.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region). The region in which the webhook should be created.
	// The region you want to attach the resource to
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Amazon Resource Name (ARN) of the SNS topic.
	// SNS ARN
	SnsArn *string `json:"snsArn,omitempty" tf:"sns_arn,omitempty"`

	// The date and time of the webhook's last update (RFC 3339 format).
	// Last update timestamp
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type WebhookParameters struct {

	// The ID of the domain the webhook is associated with.
	// The domain id
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/tem/v1alpha1.Domain
	// +kubebuilder:validation:Optional
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Reference to a Domain in tem to populate domainId.
	// +kubebuilder:validation:Optional
	DomainIDRef *v1.Reference `json:"domainIdRef,omitempty" tf:"-"`

	// Selector for a Domain in tem to populate domainId.
	// +kubebuilder:validation:Optional
	DomainIDSelector *v1.Selector `json:"domainIdSelector,omitempty" tf:"-"`

	// A list of event types that trigger the webhook.
	// List of event types
	// +kubebuilder:validation:Optional
	EventTypes []*string `json:"eventTypes,omitempty" tf:"event_types,omitempty"`

	// The name of the webhook. Defaults to an autogenerated name if not provided.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Defaults to provider project_id) The ID of the project the webhook is associated with.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Defaults to provider region). The region in which the webhook should be created.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Amazon Resource Name (ARN) of the SNS topic.
	// SNS ARN
	// +crossplane:generate:reference:type=github.com/scaleway/crossplane-provider-scaleway/apis/mnq/v1alpha1.SNSTopic
	// +kubebuilder:validation:Optional
	SnsArn *string `json:"snsArn,omitempty" tf:"sns_arn,omitempty"`

	// Reference to a SNSTopic in mnq to populate snsArn.
	// +kubebuilder:validation:Optional
	SnsArnRef *v1.Reference `json:"snsArnRef,omitempty" tf:"-"`

	// Selector for a SNSTopic in mnq to populate snsArn.
	// +kubebuilder:validation:Optional
	SnsArnSelector *v1.Selector `json:"snsArnSelector,omitempty" tf:"-"`
}

// WebhookSpec defines the desired state of Webhook
type WebhookSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WebhookParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WebhookInitParameters `json:"initProvider,omitempty"`
}

// WebhookStatus defines the observed state of Webhook.
type WebhookStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WebhookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Webhook is the Schema for the Webhooks API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Webhook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventTypes) || (has(self.initProvider) && has(self.initProvider.eventTypes))",message="spec.forProvider.eventTypes is a required parameter"
	Spec   WebhookSpec   `json:"spec"`
	Status WebhookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WebhookList contains a list of Webhooks
type WebhookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Webhook `json:"items"`
}

// Repository type metadata.
var (
	Webhook_Kind             = "Webhook"
	Webhook_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Webhook_Kind}.String()
	Webhook_KindAPIVersion   = Webhook_Kind + "." + CRDGroupVersion.String()
	Webhook_GroupVersionKind = CRDGroupVersion.WithKind(Webhook_Kind)
)

func init() {
	SchemeBuilder.Register(&Webhook{}, &WebhookList{})
}
