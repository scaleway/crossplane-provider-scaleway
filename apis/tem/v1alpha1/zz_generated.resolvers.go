/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1alpha1 "github.com/scaleway/crossplane-provider-scaleway/apis/mnq/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this List.
func (mg *List) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DomainID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DomainIDRef,
		Selector:     mg.Spec.ForProvider.DomainIDSelector,
		To: reference.To{
			List:    &DomainList{},
			Managed: &Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DomainID")
	}
	mg.Spec.ForProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DomainID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DomainIDRef,
		Selector:     mg.Spec.InitProvider.DomainIDSelector,
		To: reference.To{
			List:    &DomainList{},
			Managed: &Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DomainID")
	}
	mg.Spec.InitProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Webhook.
func (mg *Webhook) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DomainID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DomainIDRef,
		Selector:     mg.Spec.ForProvider.DomainIDSelector,
		To: reference.To{
			List:    &DomainList{},
			Managed: &Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DomainID")
	}
	mg.Spec.ForProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnsArn),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SnsArnRef,
		Selector:     mg.Spec.ForProvider.SnsArnSelector,
		To: reference.To{
			List:    &v1alpha1.SNSTopicList{},
			Managed: &v1alpha1.SNSTopic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SnsArn")
	}
	mg.Spec.ForProvider.SnsArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SnsArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DomainID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DomainIDRef,
		Selector:     mg.Spec.InitProvider.DomainIDSelector,
		To: reference.To{
			List:    &DomainList{},
			Managed: &Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DomainID")
	}
	mg.Spec.InitProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnsArn),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SnsArnRef,
		Selector:     mg.Spec.InitProvider.SnsArnSelector,
		To: reference.To{
			List:    &v1alpha1.SNSTopicList{},
			Managed: &v1alpha1.SNSTopic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SnsArn")
	}
	mg.Spec.InitProvider.SnsArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SnsArnRef = rsp.ResolvedReference

	return nil
}
