/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdministrativeContactInitParameters struct {
}

type AdministrativeContactObservation struct {

	// : Primary address.
	AddressLine1 *string `json:"addressLine1,omitempty" tf:"address_line_1,omitempty"`

	AddressLine2 *string `json:"addressLine2,omitempty" tf:"address_line_2,omitempty"`

	// : City.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// : Company identification code.
	CompanyIdentificationCode *string `json:"companyIdentificationCode,omitempty" tf:"company_identification_code,omitempty"`

	// : Company name.
	CompanyName *string `json:"companyName,omitempty" tf:"company_name,omitempty"`

	// : Country code (ISO format).
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// : Primary email.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	EmailAlt *string `json:"emailAlt,omitempty" tf:"email_alt,omitempty"`

	ExtensionEu []ExtensionEuObservation `json:"extensionEu,omitempty" tf:"extension_eu,omitempty"`

	ExtensionFr []ExtensionFrObservation `json:"extensionFr,omitempty" tf:"extension_fr,omitempty"`

	ExtensionNl []*string `json:"extensionNl,omitempty" tf:"extension_nl,omitempty"`

	FaxNumber *string `json:"faxNumber,omitempty" tf:"fax_number,omitempty"`

	// : First name.
	Firstname *string `json:"firstname,omitempty" tf:"firstname,omitempty"`

	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// : Last name.
	Lastname *string `json:"lastname,omitempty" tf:"lastname,omitempty"`

	// : Legal form of the contact.
	LegalForm *string `json:"legalForm,omitempty" tf:"legal_form,omitempty"`

	// : Primary phone number.
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	Resale *bool `json:"resale,omitempty" tf:"resale,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// : VAT identification code.
	VatIdentificationCode *string `json:"vatIdentificationCode,omitempty" tf:"vat_identification_code,omitempty"`

	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`

	// : Postal code.
	Zip *string `json:"zip,omitempty" tf:"zip,omitempty"`
}

type AdministrativeContactParameters struct {
}

type AssociationInfoInitParameters struct {
}

type AssociationInfoObservation struct {
	PublicationJo *string `json:"publicationJo,omitempty" tf:"publication_jo,omitempty"`

	PublicationJoPage *float64 `json:"publicationJoPage,omitempty" tf:"publication_jo_page,omitempty"`
}

type AssociationInfoParameters struct {
}

type CodeAuthAfnicInfoInitParameters struct {
}

type CodeAuthAfnicInfoObservation struct {
	CodeAuthAfnic *string `json:"codeAuthAfnic,omitempty" tf:"code_auth_afnic,omitempty"`
}

type CodeAuthAfnicInfoParameters struct {
}

type DigestInitParameters struct {
}

type DigestObservation struct {
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	PublicKey []PublicKeyObservation `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DigestParameters struct {
}

type DsRecordInitParameters struct {
}

type DsRecordObservation struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	Digest []DigestObservation `json:"digest,omitempty" tf:"digest,omitempty"`

	// : The ID of the domain registration.
	KeyID *float64 `json:"keyId,omitempty" tf:"key_id,omitempty"`

	PublicKey []DsRecordPublicKeyObservation `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type DsRecordParameters struct {
}

type DsRecordPublicKeyInitParameters struct {
}

type DsRecordPublicKeyObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type DsRecordPublicKeyParameters struct {
}

type DunsInfoInitParameters struct {
}

type DunsInfoObservation struct {

	// : The ID of the domain registration.
	DunsID *string `json:"dunsId,omitempty" tf:"duns_id,omitempty"`

	// : The ID of the domain registration.
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`
}

type DunsInfoParameters struct {
}

type ExtensionEuInitParameters struct {
}

type ExtensionEuObservation struct {
	EuropeanCitizenship *string `json:"europeanCitizenship,omitempty" tf:"european_citizenship,omitempty"`
}

type ExtensionEuParameters struct {
}

type ExtensionFrAssociationInfoInitParameters struct {

	// Publication date in the Official Journal (RFC3339 format) for association information.
	PublicationJo *string `json:"publicationJo,omitempty" tf:"publication_jo,omitempty"`

	// Page number of the publication in the Official Journal for association information.
	PublicationJoPage *float64 `json:"publicationJoPage,omitempty" tf:"publication_jo_page,omitempty"`
}

type ExtensionFrAssociationInfoObservation struct {

	// Publication date in the Official Journal (RFC3339 format) for association information.
	PublicationJo *string `json:"publicationJo,omitempty" tf:"publication_jo,omitempty"`

	// Page number of the publication in the Official Journal for association information.
	PublicationJoPage *float64 `json:"publicationJoPage,omitempty" tf:"publication_jo_page,omitempty"`
}

type ExtensionFrAssociationInfoParameters struct {

	// Publication date in the Official Journal (RFC3339 format) for association information.
	// +kubebuilder:validation:Optional
	PublicationJo *string `json:"publicationJo,omitempty" tf:"publication_jo,omitempty"`

	// Page number of the publication in the Official Journal for association information.
	// +kubebuilder:validation:Optional
	PublicationJoPage *float64 `json:"publicationJoPage,omitempty" tf:"publication_jo_page,omitempty"`
}

type ExtensionFrCodeAuthAfnicInfoInitParameters struct {

	// AFNIC authorization code for the contact (specific to French domains).
	CodeAuthAfnic *string `json:"codeAuthAfnic,omitempty" tf:"code_auth_afnic,omitempty"`
}

type ExtensionFrCodeAuthAfnicInfoObservation struct {

	// AFNIC authorization code for the contact (specific to French domains).
	CodeAuthAfnic *string `json:"codeAuthAfnic,omitempty" tf:"code_auth_afnic,omitempty"`
}

type ExtensionFrCodeAuthAfnicInfoParameters struct {

	// AFNIC authorization code for the contact (specific to French domains).
	// +kubebuilder:validation:Optional
	CodeAuthAfnic *string `json:"codeAuthAfnic,omitempty" tf:"code_auth_afnic,omitempty"`
}

type ExtensionFrDunsInfoInitParameters struct {

	// : The ID of the domain registration.
	// DUNS ID associated with the domain owner (for French domains).
	DunsID *string `json:"dunsId,omitempty" tf:"duns_id,omitempty"`

	// : The ID of the domain registration.
	// Local identifier of the domain owner (for French domains).
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`
}

type ExtensionFrDunsInfoObservation struct {

	// : The ID of the domain registration.
	// DUNS ID associated with the domain owner (for French domains).
	DunsID *string `json:"dunsId,omitempty" tf:"duns_id,omitempty"`

	// : The ID of the domain registration.
	// Local identifier of the domain owner (for French domains).
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`
}

type ExtensionFrDunsInfoParameters struct {

	// : The ID of the domain registration.
	// DUNS ID associated with the domain owner (for French domains).
	// +kubebuilder:validation:Optional
	DunsID *string `json:"dunsId,omitempty" tf:"duns_id,omitempty"`

	// : The ID of the domain registration.
	// Local identifier of the domain owner (for French domains).
	// +kubebuilder:validation:Optional
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`
}

type ExtensionFrIndividualInfoInitParameters struct {

	// Whether the individual contact has opted into WHOIS publishing.
	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`
}

type ExtensionFrIndividualInfoObservation struct {

	// Whether the individual contact has opted into WHOIS publishing.
	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`
}

type ExtensionFrIndividualInfoParameters struct {

	// Whether the individual contact has opted into WHOIS publishing.
	// +kubebuilder:validation:Optional
	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`
}

type ExtensionFrInitParameters struct {
}

type ExtensionFrObservation struct {
	AssociationInfo []AssociationInfoObservation `json:"associationInfo,omitempty" tf:"association_info,omitempty"`

	CodeAuthAfnicInfo []CodeAuthAfnicInfoObservation `json:"codeAuthAfnicInfo,omitempty" tf:"code_auth_afnic_info,omitempty"`

	DunsInfo []DunsInfoObservation `json:"dunsInfo,omitempty" tf:"duns_info,omitempty"`

	IndividualInfo []IndividualInfoObservation `json:"individualInfo,omitempty" tf:"individual_info,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	TrademarkInfo []TrademarkInfoObservation `json:"trademarkInfo,omitempty" tf:"trademark_info,omitempty"`
}

type ExtensionFrParameters struct {
}

type ExtensionFrTrademarkInfoInitParameters struct {

	// Trademark information from INPI (French extension).
	TrademarkInpi *string `json:"trademarkInpi,omitempty" tf:"trademark_inpi,omitempty"`
}

type ExtensionFrTrademarkInfoObservation struct {

	// Trademark information from INPI (French extension).
	TrademarkInpi *string `json:"trademarkInpi,omitempty" tf:"trademark_inpi,omitempty"`
}

type ExtensionFrTrademarkInfoParameters struct {

	// Trademark information from INPI (French extension).
	// +kubebuilder:validation:Optional
	TrademarkInpi *string `json:"trademarkInpi,omitempty" tf:"trademark_inpi,omitempty"`
}

type IndividualInfoInitParameters struct {
}

type IndividualInfoObservation struct {
	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`
}

type IndividualInfoParameters struct {
}

type OwnerContactExtensionEuInitParameters struct {

	// Indicates the European citizenship of the contact.
	EuropeanCitizenship *string `json:"europeanCitizenship,omitempty" tf:"european_citizenship,omitempty"`
}

type OwnerContactExtensionEuObservation struct {

	// Indicates the European citizenship of the contact.
	EuropeanCitizenship *string `json:"europeanCitizenship,omitempty" tf:"european_citizenship,omitempty"`
}

type OwnerContactExtensionEuParameters struct {

	// Indicates the European citizenship of the contact.
	// +kubebuilder:validation:Optional
	EuropeanCitizenship *string `json:"europeanCitizenship,omitempty" tf:"european_citizenship,omitempty"`
}

type OwnerContactExtensionFrInitParameters struct {

	// Association-specific information for the domain (French extension).
	AssociationInfo []ExtensionFrAssociationInfoInitParameters `json:"associationInfo,omitempty" tf:"association_info,omitempty"`

	// AFNIC authorization information for the contact (French extension).
	CodeAuthAfnicInfo []ExtensionFrCodeAuthAfnicInfoInitParameters `json:"codeAuthAfnicInfo,omitempty" tf:"code_auth_afnic_info,omitempty"`

	// DUNS information for the domain owner (specific to French domains).
	DunsInfo []ExtensionFrDunsInfoInitParameters `json:"dunsInfo,omitempty" tf:"duns_info,omitempty"`

	// Information about the individual registration for French domains.
	IndividualInfo []ExtensionFrIndividualInfoInitParameters `json:"individualInfo,omitempty" tf:"individual_info,omitempty"`

	// Mode of the French extension (e.g., 'individual', 'duns', 'association', etc.).
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Trademark-related information for the domain (French extension).
	TrademarkInfo []ExtensionFrTrademarkInfoInitParameters `json:"trademarkInfo,omitempty" tf:"trademark_info,omitempty"`
}

type OwnerContactExtensionFrObservation struct {

	// Association-specific information for the domain (French extension).
	AssociationInfo []ExtensionFrAssociationInfoObservation `json:"associationInfo,omitempty" tf:"association_info,omitempty"`

	// AFNIC authorization information for the contact (French extension).
	CodeAuthAfnicInfo []ExtensionFrCodeAuthAfnicInfoObservation `json:"codeAuthAfnicInfo,omitempty" tf:"code_auth_afnic_info,omitempty"`

	// DUNS information for the domain owner (specific to French domains).
	DunsInfo []ExtensionFrDunsInfoObservation `json:"dunsInfo,omitempty" tf:"duns_info,omitempty"`

	// Information about the individual registration for French domains.
	IndividualInfo []ExtensionFrIndividualInfoObservation `json:"individualInfo,omitempty" tf:"individual_info,omitempty"`

	// Mode of the French extension (e.g., 'individual', 'duns', 'association', etc.).
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Trademark-related information for the domain (French extension).
	TrademarkInfo []ExtensionFrTrademarkInfoObservation `json:"trademarkInfo,omitempty" tf:"trademark_info,omitempty"`
}

type OwnerContactExtensionFrParameters struct {

	// Association-specific information for the domain (French extension).
	// +kubebuilder:validation:Optional
	AssociationInfo []ExtensionFrAssociationInfoParameters `json:"associationInfo,omitempty" tf:"association_info,omitempty"`

	// AFNIC authorization information for the contact (French extension).
	// +kubebuilder:validation:Optional
	CodeAuthAfnicInfo []ExtensionFrCodeAuthAfnicInfoParameters `json:"codeAuthAfnicInfo,omitempty" tf:"code_auth_afnic_info,omitempty"`

	// DUNS information for the domain owner (specific to French domains).
	// +kubebuilder:validation:Optional
	DunsInfo []ExtensionFrDunsInfoParameters `json:"dunsInfo,omitempty" tf:"duns_info,omitempty"`

	// Information about the individual registration for French domains.
	// +kubebuilder:validation:Optional
	IndividualInfo []ExtensionFrIndividualInfoParameters `json:"individualInfo,omitempty" tf:"individual_info,omitempty"`

	// Mode of the French extension (e.g., 'individual', 'duns', 'association', etc.).
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Trademark-related information for the domain (French extension).
	// +kubebuilder:validation:Optional
	TrademarkInfo []ExtensionFrTrademarkInfoParameters `json:"trademarkInfo,omitempty" tf:"trademark_info,omitempty"`
}

type OwnerContactInitParameters struct {

	// : Primary address.
	// Primary address line for the contact.
	AddressLine1 *string `json:"addressLine1,omitempty" tf:"address_line_1,omitempty"`

	// Secondary address line for the contact (optional).
	AddressLine2 *string `json:"addressLine2,omitempty" tf:"address_line_2,omitempty"`

	// : City.
	// City of the contact's address.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// : Company identification code.
	// Company identification code (e.g., SIREN/SIRET in France) for the contact.
	CompanyIdentificationCode *string `json:"companyIdentificationCode,omitempty" tf:"company_identification_code,omitempty"`

	// : Company name.
	// Name of the company associated with the contact (if applicable).
	CompanyName *string `json:"companyName,omitempty" tf:"company_name,omitempty"`

	// : Country code (ISO format).
	// Country code of the contact's address (ISO format).
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// : Primary email.
	// Primary email address of the contact.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Alternative email address for the contact.
	EmailAlt *string `json:"emailAlt,omitempty" tf:"email_alt,omitempty"`

	// Details specific to European domain extensions.
	ExtensionEu []OwnerContactExtensionEuInitParameters `json:"extensionEu,omitempty" tf:"extension_eu,omitempty"`

	// Details specific to French domain extensions.
	ExtensionFr []OwnerContactExtensionFrInitParameters `json:"extensionFr,omitempty" tf:"extension_fr,omitempty"`

	// Extension details specific to Dutch domain registrations.
	ExtensionNl []*string `json:"extensionNl,omitempty" tf:"extension_nl,omitempty"`

	// Fax number for the contact (if available).
	FaxNumber *string `json:"faxNumber,omitempty" tf:"fax_number,omitempty"`

	// : First name.
	// First name of the contact.
	Firstname *string `json:"firstname,omitempty" tf:"firstname,omitempty"`

	// Preferred language of the contact (e.g., 'en_US', 'fr_FR').
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// : Last name.
	// Last name of the contact.
	Lastname *string `json:"lastname,omitempty" tf:"lastname,omitempty"`

	// : Legal form of the contact.
	// Legal form of the contact (e.g., 'individual' or 'organization').
	LegalForm *string `json:"legalForm,omitempty" tf:"legal_form,omitempty"`

	// : Primary phone number.
	// Primary phone number of the contact.
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	// Indicates if the contact is used for resale purposes.
	Resale *bool `json:"resale,omitempty" tf:"resale,omitempty"`

	// State or region of the contact.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// : VAT identification code.
	// VAT identification code of the contact, if applicable.
	VatIdentificationCode *string `json:"vatIdentificationCode,omitempty" tf:"vat_identification_code,omitempty"`

	// Indicates whether the contact has opted into WHOIS publishing.
	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`

	// : Postal code.
	// Postal code of the contact's address.
	Zip *string `json:"zip,omitempty" tf:"zip,omitempty"`
}

type OwnerContactObservation struct {

	// : Primary address.
	// Primary address line for the contact.
	AddressLine1 *string `json:"addressLine1,omitempty" tf:"address_line_1,omitempty"`

	// Secondary address line for the contact (optional).
	AddressLine2 *string `json:"addressLine2,omitempty" tf:"address_line_2,omitempty"`

	// : City.
	// City of the contact's address.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// : Company identification code.
	// Company identification code (e.g., SIREN/SIRET in France) for the contact.
	CompanyIdentificationCode *string `json:"companyIdentificationCode,omitempty" tf:"company_identification_code,omitempty"`

	// : Company name.
	// Name of the company associated with the contact (if applicable).
	CompanyName *string `json:"companyName,omitempty" tf:"company_name,omitempty"`

	// : Country code (ISO format).
	// Country code of the contact's address (ISO format).
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// : Primary email.
	// Primary email address of the contact.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Alternative email address for the contact.
	EmailAlt *string `json:"emailAlt,omitempty" tf:"email_alt,omitempty"`

	// Details specific to European domain extensions.
	ExtensionEu []OwnerContactExtensionEuObservation `json:"extensionEu,omitempty" tf:"extension_eu,omitempty"`

	// Details specific to French domain extensions.
	ExtensionFr []OwnerContactExtensionFrObservation `json:"extensionFr,omitempty" tf:"extension_fr,omitempty"`

	// Extension details specific to Dutch domain registrations.
	ExtensionNl []*string `json:"extensionNl,omitempty" tf:"extension_nl,omitempty"`

	// Fax number for the contact (if available).
	FaxNumber *string `json:"faxNumber,omitempty" tf:"fax_number,omitempty"`

	// : First name.
	// First name of the contact.
	Firstname *string `json:"firstname,omitempty" tf:"firstname,omitempty"`

	// Preferred language of the contact (e.g., 'en_US', 'fr_FR').
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// : Last name.
	// Last name of the contact.
	Lastname *string `json:"lastname,omitempty" tf:"lastname,omitempty"`

	// : Legal form of the contact.
	// Legal form of the contact (e.g., 'individual' or 'organization').
	LegalForm *string `json:"legalForm,omitempty" tf:"legal_form,omitempty"`

	// : Primary phone number.
	// Primary phone number of the contact.
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	// Indicates if the contact is used for resale purposes.
	Resale *bool `json:"resale,omitempty" tf:"resale,omitempty"`

	// State or region of the contact.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// : VAT identification code.
	// VAT identification code of the contact, if applicable.
	VatIdentificationCode *string `json:"vatIdentificationCode,omitempty" tf:"vat_identification_code,omitempty"`

	// Indicates whether the contact has opted into WHOIS publishing.
	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`

	// : Postal code.
	// Postal code of the contact's address.
	Zip *string `json:"zip,omitempty" tf:"zip,omitempty"`
}

type OwnerContactParameters struct {

	// : Primary address.
	// Primary address line for the contact.
	// +kubebuilder:validation:Optional
	AddressLine1 *string `json:"addressLine1" tf:"address_line_1,omitempty"`

	// Secondary address line for the contact (optional).
	// +kubebuilder:validation:Optional
	AddressLine2 *string `json:"addressLine2,omitempty" tf:"address_line_2,omitempty"`

	// : City.
	// City of the contact's address.
	// +kubebuilder:validation:Optional
	City *string `json:"city" tf:"city,omitempty"`

	// : Company identification code.
	// Company identification code (e.g., SIREN/SIRET in France) for the contact.
	// +kubebuilder:validation:Optional
	CompanyIdentificationCode *string `json:"companyIdentificationCode" tf:"company_identification_code,omitempty"`

	// : Company name.
	// Name of the company associated with the contact (if applicable).
	// +kubebuilder:validation:Optional
	CompanyName *string `json:"companyName,omitempty" tf:"company_name,omitempty"`

	// : Country code (ISO format).
	// Country code of the contact's address (ISO format).
	// +kubebuilder:validation:Optional
	Country *string `json:"country" tf:"country,omitempty"`

	// : Primary email.
	// Primary email address of the contact.
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// Alternative email address for the contact.
	// +kubebuilder:validation:Optional
	EmailAlt *string `json:"emailAlt,omitempty" tf:"email_alt,omitempty"`

	// Details specific to European domain extensions.
	// +kubebuilder:validation:Optional
	ExtensionEu []OwnerContactExtensionEuParameters `json:"extensionEu,omitempty" tf:"extension_eu,omitempty"`

	// Details specific to French domain extensions.
	// +kubebuilder:validation:Optional
	ExtensionFr []OwnerContactExtensionFrParameters `json:"extensionFr,omitempty" tf:"extension_fr,omitempty"`

	// Extension details specific to Dutch domain registrations.
	// +kubebuilder:validation:Optional
	ExtensionNl []*string `json:"extensionNl,omitempty" tf:"extension_nl,omitempty"`

	// Fax number for the contact (if available).
	// +kubebuilder:validation:Optional
	FaxNumber *string `json:"faxNumber,omitempty" tf:"fax_number,omitempty"`

	// : First name.
	// First name of the contact.
	// +kubebuilder:validation:Optional
	Firstname *string `json:"firstname" tf:"firstname,omitempty"`

	// Preferred language of the contact (e.g., 'en_US', 'fr_FR').
	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// : Last name.
	// Last name of the contact.
	// +kubebuilder:validation:Optional
	Lastname *string `json:"lastname" tf:"lastname,omitempty"`

	// : Legal form of the contact.
	// Legal form of the contact (e.g., 'individual' or 'organization').
	// +kubebuilder:validation:Optional
	LegalForm *string `json:"legalForm" tf:"legal_form,omitempty"`

	// : Primary phone number.
	// Primary phone number of the contact.
	// +kubebuilder:validation:Optional
	PhoneNumber *string `json:"phoneNumber" tf:"phone_number,omitempty"`

	// Indicates if the contact is used for resale purposes.
	// +kubebuilder:validation:Optional
	Resale *bool `json:"resale,omitempty" tf:"resale,omitempty"`

	// State or region of the contact.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// : VAT identification code.
	// VAT identification code of the contact, if applicable.
	// +kubebuilder:validation:Optional
	VatIdentificationCode *string `json:"vatIdentificationCode" tf:"vat_identification_code,omitempty"`

	// Indicates whether the contact has opted into WHOIS publishing.
	// +kubebuilder:validation:Optional
	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`

	// : Postal code.
	// Postal code of the contact's address.
	// +kubebuilder:validation:Optional
	Zip *string `json:"zip" tf:"zip,omitempty"`
}

type PublicKeyInitParameters struct {
}

type PublicKeyObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type PublicKeyParameters struct {
}

type RegistrationInitParameters struct {

	// renewal.
	// Enable or disable auto-renewal of the domain.
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// : Enables or disables DNSSEC.
	// Enable or disable dnssec for the domain.
	DNSSEC *bool `json:"dnssec,omitempty" tf:"dnssec,omitempty"`

	// : A list of domain names to be registered.
	// List of domain names to be managed.
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// : The registration period in years.
	DurationInYears *float64 `json:"durationInYears,omitempty" tf:"duration_in_years,omitempty"`

	// : Details of the owner contact.
	// Details of the owner contact. Either `owner_contact_id` or `owner_contact` must be provided.
	OwnerContact []OwnerContactInitParameters `json:"ownerContact,omitempty" tf:"owner_contact,omitempty"`

	// : The ID of an existing owner contact.
	// ID of the owner contact. Either `owner_contact_id` or `owner_contact` must be provided.
	OwnerContactID *string `json:"ownerContactId,omitempty" tf:"owner_contact_id,omitempty"`

	// : The Scaleway project ID.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type RegistrationObservation struct {

	// (Computed, List): Administrative contact information.
	// Details of the administrative contact.
	AdministrativeContact []AdministrativeContactObservation `json:"administrativeContact,omitempty" tf:"administrative_contact,omitempty"`

	// renewal.
	// Enable or disable auto-renewal of the domain.
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// : Enables or disables DNSSEC.
	// Enable or disable dnssec for the domain.
	DNSSEC *bool `json:"dnssec,omitempty" tf:"dnssec,omitempty"`

	// : A list of domain names to be registered.
	// List of domain names to be managed.
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// : DNSSEC DS record configuration.
	// dnssec DS record configuration.
	DsRecord []DsRecordObservation `json:"dsRecord,omitempty" tf:"ds_record,omitempty"`

	// : The registration period in years.
	DurationInYears *float64 `json:"durationInYears,omitempty" tf:"duration_in_years,omitempty"`

	// : The ID of the domain registration.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// : Details of the owner contact.
	// Details of the owner contact. Either `owner_contact_id` or `owner_contact` must be provided.
	OwnerContact []OwnerContactObservation `json:"ownerContact,omitempty" tf:"owner_contact,omitempty"`

	// : The ID of an existing owner contact.
	// ID of the owner contact. Either `owner_contact_id` or `owner_contact` must be provided.
	OwnerContactID *string `json:"ownerContactId,omitempty" tf:"owner_contact_id,omitempty"`

	// : The Scaleway project ID.
	// The project_id you want to attach the resource to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// : ID of the task that created the domain.
	// ID of the task that created the domain.
	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`

	// (Computed, List): Technical contact information.
	// Details of the technical contact.
	TechnicalContact []TechnicalContactObservation `json:"technicalContact,omitempty" tf:"technical_contact,omitempty"`
}

type RegistrationParameters struct {

	// renewal.
	// Enable or disable auto-renewal of the domain.
	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// : Enables or disables DNSSEC.
	// Enable or disable dnssec for the domain.
	// +kubebuilder:validation:Optional
	DNSSEC *bool `json:"dnssec,omitempty" tf:"dnssec,omitempty"`

	// : A list of domain names to be registered.
	// List of domain names to be managed.
	// +kubebuilder:validation:Optional
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// : The registration period in years.
	// +kubebuilder:validation:Optional
	DurationInYears *float64 `json:"durationInYears,omitempty" tf:"duration_in_years,omitempty"`

	// : Details of the owner contact.
	// Details of the owner contact. Either `owner_contact_id` or `owner_contact` must be provided.
	// +kubebuilder:validation:Optional
	OwnerContact []OwnerContactParameters `json:"ownerContact,omitempty" tf:"owner_contact,omitempty"`

	// : The ID of an existing owner contact.
	// ID of the owner contact. Either `owner_contact_id` or `owner_contact` must be provided.
	// +kubebuilder:validation:Optional
	OwnerContactID *string `json:"ownerContactId,omitempty" tf:"owner_contact_id,omitempty"`

	// : The Scaleway project ID.
	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type TechnicalContactExtensionEuInitParameters struct {
}

type TechnicalContactExtensionEuObservation struct {
	EuropeanCitizenship *string `json:"europeanCitizenship,omitempty" tf:"european_citizenship,omitempty"`
}

type TechnicalContactExtensionEuParameters struct {
}

type TechnicalContactExtensionFrAssociationInfoInitParameters struct {
}

type TechnicalContactExtensionFrAssociationInfoObservation struct {
	PublicationJo *string `json:"publicationJo,omitempty" tf:"publication_jo,omitempty"`

	PublicationJoPage *float64 `json:"publicationJoPage,omitempty" tf:"publication_jo_page,omitempty"`
}

type TechnicalContactExtensionFrAssociationInfoParameters struct {
}

type TechnicalContactExtensionFrCodeAuthAfnicInfoInitParameters struct {
}

type TechnicalContactExtensionFrCodeAuthAfnicInfoObservation struct {
	CodeAuthAfnic *string `json:"codeAuthAfnic,omitempty" tf:"code_auth_afnic,omitempty"`
}

type TechnicalContactExtensionFrCodeAuthAfnicInfoParameters struct {
}

type TechnicalContactExtensionFrDunsInfoInitParameters struct {
}

type TechnicalContactExtensionFrDunsInfoObservation struct {

	// : The ID of the domain registration.
	DunsID *string `json:"dunsId,omitempty" tf:"duns_id,omitempty"`

	// : The ID of the domain registration.
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`
}

type TechnicalContactExtensionFrDunsInfoParameters struct {
}

type TechnicalContactExtensionFrIndividualInfoInitParameters struct {
}

type TechnicalContactExtensionFrIndividualInfoObservation struct {
	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`
}

type TechnicalContactExtensionFrIndividualInfoParameters struct {
}

type TechnicalContactExtensionFrInitParameters struct {
}

type TechnicalContactExtensionFrObservation struct {
	AssociationInfo []TechnicalContactExtensionFrAssociationInfoObservation `json:"associationInfo,omitempty" tf:"association_info,omitempty"`

	CodeAuthAfnicInfo []TechnicalContactExtensionFrCodeAuthAfnicInfoObservation `json:"codeAuthAfnicInfo,omitempty" tf:"code_auth_afnic_info,omitempty"`

	DunsInfo []TechnicalContactExtensionFrDunsInfoObservation `json:"dunsInfo,omitempty" tf:"duns_info,omitempty"`

	IndividualInfo []TechnicalContactExtensionFrIndividualInfoObservation `json:"individualInfo,omitempty" tf:"individual_info,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	TrademarkInfo []TechnicalContactExtensionFrTrademarkInfoObservation `json:"trademarkInfo,omitempty" tf:"trademark_info,omitempty"`
}

type TechnicalContactExtensionFrParameters struct {
}

type TechnicalContactExtensionFrTrademarkInfoInitParameters struct {
}

type TechnicalContactExtensionFrTrademarkInfoObservation struct {
	TrademarkInpi *string `json:"trademarkInpi,omitempty" tf:"trademark_inpi,omitempty"`
}

type TechnicalContactExtensionFrTrademarkInfoParameters struct {
}

type TechnicalContactInitParameters struct {
}

type TechnicalContactObservation struct {

	// : Primary address.
	AddressLine1 *string `json:"addressLine1,omitempty" tf:"address_line_1,omitempty"`

	AddressLine2 *string `json:"addressLine2,omitempty" tf:"address_line_2,omitempty"`

	// : City.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// : Company identification code.
	CompanyIdentificationCode *string `json:"companyIdentificationCode,omitempty" tf:"company_identification_code,omitempty"`

	// : Company name.
	CompanyName *string `json:"companyName,omitempty" tf:"company_name,omitempty"`

	// : Country code (ISO format).
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// : Primary email.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	EmailAlt *string `json:"emailAlt,omitempty" tf:"email_alt,omitempty"`

	ExtensionEu []TechnicalContactExtensionEuObservation `json:"extensionEu,omitempty" tf:"extension_eu,omitempty"`

	ExtensionFr []TechnicalContactExtensionFrObservation `json:"extensionFr,omitempty" tf:"extension_fr,omitempty"`

	ExtensionNl []*string `json:"extensionNl,omitempty" tf:"extension_nl,omitempty"`

	FaxNumber *string `json:"faxNumber,omitempty" tf:"fax_number,omitempty"`

	// : First name.
	Firstname *string `json:"firstname,omitempty" tf:"firstname,omitempty"`

	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// : Last name.
	Lastname *string `json:"lastname,omitempty" tf:"lastname,omitempty"`

	// : Legal form of the contact.
	LegalForm *string `json:"legalForm,omitempty" tf:"legal_form,omitempty"`

	// : Primary phone number.
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	Resale *bool `json:"resale,omitempty" tf:"resale,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// : VAT identification code.
	VatIdentificationCode *string `json:"vatIdentificationCode,omitempty" tf:"vat_identification_code,omitempty"`

	WhoisOptIn *bool `json:"whoisOptIn,omitempty" tf:"whois_opt_in,omitempty"`

	// : Postal code.
	Zip *string `json:"zip,omitempty" tf:"zip,omitempty"`
}

type TechnicalContactParameters struct {
}

type TrademarkInfoInitParameters struct {
}

type TrademarkInfoObservation struct {
	TrademarkInpi *string `json:"trademarkInpi,omitempty" tf:"trademark_inpi,omitempty"`
}

type TrademarkInfoParameters struct {
}

// RegistrationSpec defines the desired state of Registration
type RegistrationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegistrationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RegistrationInitParameters `json:"initProvider,omitempty"`
}

// RegistrationStatus defines the observed state of Registration.
type RegistrationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegistrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Registration is the Schema for the Registrations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Registration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domainNames) || (has(self.initProvider) && has(self.initProvider.domainNames))",message="spec.forProvider.domainNames is a required parameter"
	Spec   RegistrationSpec   `json:"spec"`
	Status RegistrationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegistrationList contains a list of Registrations
type RegistrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Registration `json:"items"`
}

// Repository type metadata.
var (
	Registration_Kind             = "Registration"
	Registration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Registration_Kind}.String()
	Registration_KindAPIVersion   = Registration_Kind + "." + CRDGroupVersion.String()
	Registration_GroupVersionKind = CRDGroupVersion.WithKind(Registration_Kind)
)

func init() {
	SchemeBuilder.Register(&Registration{}, &RegistrationList{})
}
