/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VersionObservation struct {

	// Date and time of secret version's creation (RFC 3339 format).
	// Date and time of secret version's creation (RFC 3339 format)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The revision for this Secret Version.
	// The revision of secret version
	Revision *string `json:"revision,omitempty" tf:"revision,omitempty"`

	// The status of the Secret Version.
	// Status of the secret version
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Date and time of secret version's last update (RFC 3339 format).
	// Date and time of secret version's creation (RFC 3339 format)
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type VersionParameters struct {

	// The data payload of the secret version. Must be no larger than 64KiB. (e.g. my-secret-version-payload). more on the data section
	// The data payload of your secret version.
	// +kubebuilder:validation:Required
	DataSecretRef v1.SecretKeySelector `json:"dataSecretRef" tf:"-"`

	// Description of the secret version (e.g. my-new-description).
	// Description of the secret version
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Defaults to provider region) The region
	// in which the resource exists.
	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Secret ID associated wit the secret version.
	// The secret ID associated with this version
	// +crossplane:generate:reference:type=Secret
	// +kubebuilder:validation:Optional
	SecretID *string `json:"secretId,omitempty" tf:"secret_id,omitempty"`

	// Reference to a Secret to populate secretId.
	// +kubebuilder:validation:Optional
	SecretIDRef *v1.Reference `json:"secretIdRef,omitempty" tf:"-"`

	// Selector for a Secret to populate secretId.
	// +kubebuilder:validation:Optional
	SecretIDSelector *v1.Selector `json:"secretIdSelector,omitempty" tf:"-"`
}

// VersionSpec defines the desired state of Version
type VersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VersionParameters `json:"forProvider"`
}

// VersionStatus defines the observed state of Version.
type VersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Version is the Schema for the Versions API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Version struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VersionSpec   `json:"spec"`
	Status            VersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VersionList contains a list of Versions
type VersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Version `json:"items"`
}

// Repository type metadata.
var (
	Version_Kind             = "Version"
	Version_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Version_Kind}.String()
	Version_KindAPIVersion   = Version_Kind + "." + CRDGroupVersion.String()
	Version_GroupVersionKind = CRDGroupVersion.WithKind(Version_Kind)
)

func init() {
	SchemeBuilder.Register(&Version{}, &VersionList{})
}
